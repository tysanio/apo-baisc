#include <a_samp>
#include <a_sampdb>
#include <streamer>
#include <foreach>
#include <a_mysql>
#include <sscanf2>

#define MAX_HOUSE_INTS 4

#define INVALID_SQL_ID -1

#undef MAX_PLAYERS
#define MAX_PLAYERS 40

#undef MAX_VEHICLES
#define MAX_VEHICLES 1300

#define PRESSED(%0) (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
#define RELEASED(%0) (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define IsPlayerLogged(%0) PlayerInfo[%0][pLogin]

#define GetPlayerData(%0,%1) 	PlayerInfo[%0][%1]
#define SetPlayerData(%0,%1,%2)	PlayerInfo[%0][%1] = %2
#define AddPlayerData(%0,%1,%2,%3) PlayerInfo[%0][%1] %2= %3

// fraction ID
#define FRACTION_LSPD 1
#define FRACTION_FBI 2
#define FRACTION_ARMY_LS 3 //NE
#define FRACTION_MAYOR 4
#define FRACTION_LSMEDICS 5
#define FRACTION_NEWS 6
#define FRACTION_BIKER 7
#define FRACTION_BALLAS 8
#define FRACTION_VAGOS 9
#define FRACTION_RUMAFIA 10
#define FRACTION_GROVE 11
#define FRACTION_AZTEC 12
#define FRACTION_RIFA 13
#define FRACTION_ARMY_SF 14 //Angkatan Laut
#define FRACTION_ARMY_LV 15 //Angkatan udara
#define FRACTION_YAKUZA 16
#define FRACTION_COLUMBIA 17
#define FRACTION_SFPD 18
#define FRACTION_LVPD 19
#define FRACTION_SFMEDICS 20
#define FRACTION_LVMEDICS 21
#define FRACTION_MECHANIK 22

#define UseCar(%0) PlayerInfo[%0][pUseCar]
#define GN(%0) PlayerInfo[%0][pName]
#define publics:%0(%1)                             forward %0(%1); public %0(%1)

#define KEY_AIM 128

#define GetPlayerIpEx(%0) PlayerInfo[%0][pIP]

#define MAX_VEHICLE_FUEL 100.0

#define SERVER_NAME "hostname  SUBZERO Roleplay 2021"
#define SERVER_NAME_BONUS "hostname SUBZERO Roleplay 2021 | Bonus X2"

#define IsPlayerHaveBackpack(%0) PlayerInfo[%0][pUpdPlayer][1]

//

#define GetWeaponName(%0) WeaponNames[%0]

static const stock WeaponNames[][32] = {
	{"Unarmed (Fist)"}, // 0
	{"Brass Knuckles"}, // 1
	{"Golf Club"}, // 2
	{"Night Stick"}, // 3
	{"Knife"}, // 4
	{"Baseball Bat"}, // 5
	{"Shovel"}, // 6
	{"Pool Cue"}, // 7
	{"Katana"}, // 8
	{"Chainsaw"}, // 9
	{"Purple Dildo"}, // 10
	{"Big White Vibrator"}, // 11
	{"Medium White Vibrator"}, // 12
	{"Small White Vibrator"}, // 13
	{"Flowers"}, // 14
	{"Cane"}, // 15
	{"Grenade"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt 45"}, // 22
	{"Silenced Pistol"}, // 23
	{"Desert Eagle"}, // 24
	{"Normal Shotgun"}, // 25
	{"Sawnoff Shotgun"}, // 26
	{"Combat Shotgun"}, // 27
	{"UZI"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel Charge"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Parachute"}, // 46
	{"Fake Pistol"}, // 47
	{""}, //48
	{"Vehicle"}, //49
	{"Helicopter"}, //50
	{"Explosion"}, //51
	{""}, //52
	{"Drowned"}, //53
	{"Splat"} //54
};

new GunNames[48][] = { // Armas

"tidak ada",
"tinju Amerika",
"klub golf",
"tongkat polisi",
"sebuah pisau",
"tongkat baseball",
"sebuah sekop",
"isyarat biliar",
"sebuah katana",
"gergaji mesin",
"vibrator ungu",
"dildo putih pendek",
"dildo putih panjang",
"sebuah dildo",
"buket bunga",
"tongkat",
"sebuah granat peledak",
"granat asap",
"koktail molotov",
"pemburu rudal atau hydra",
"api hidra",
"baling-baling",
"pistol 9mm",
"pistol 9mm dibungkam",
"pistol elang gurun",
"senapan biasa",
"senapan potong",
"senapan tempur",
"senapan mesin uzi",
"senapan mesin mp5",
"senapan ak47 otomatis",
"senapan m4 otomatis",
"senapan mesin tec9",
"senapan berburu",
"senapan sniper",
"peluncur roket",
"peluncur rudal mencari panas",
"penyembur api",
"a minigun",
"muatan ledakan",
"peledak muatan peledak",
"aerosol semprotan merica",
"alat pemadam kebakaran",
"kamera foto",
"beberapa kacamata night vision",
"kacamata inframerah",
"sebuah parasut",
"pistol palsu"
};

new GunObjects[47][0] = { // Objetos
	{0}, // Tidak ada.
{331}, // Tinju kuningan.
{333}, // Klub golf.
{334}, // Tongkat polisi.
{335}, // Razor.
{336}, // Pemukul bisbol.
{337}, // Sekop.
{338}, // Tongkat biliar.
{339}, // Katana.
{341}, // Gergaji.
{321}, // Dildo ungu.
{322}, // Dildo putih pendek.
{323}, // Dildo putih panjang.
{324}, // Dildo bergetar.
{325}, // Karangan bunga.
{326}, // Staf.
{342}, // Granada.
{343}, // Direkam dengan gas air mata.
{344}, // Koktail molotov.
{0},
{0},
{0},
{346}, // 9mm.
{347}, // 9mm dengan peredam.
{348}, // Elang gurun.
{349}, // Senapan biasa.
{350}, // Senapan lepas landas.
{351}, // Senapan tempur.
{352}, // UZI
{353}, // MP5
{355}, // AK47
{356}, // M4
{372}, // Tec-9
{357}, // Senapan berburu.
{358}, // Senapan Penembak Jitu (penembak jitu)
{359}, // Peluncur.
{360}, // Peluncur roket pencari panas.
{361}, // Penyembur api.
{362}, // Minigun.
{363}, // Pemicu.
{364}, // Tombol detonator.
{365}, // Semprotan merica.
{366}, // Alat pemadam kebakaran.
{367}, // Kamera.
{368}, // Kacamata penglihatan malam.
{368}, // Kacamata inframerah.
{371} // Parasut.
};

//

static const PedMan[] = {79, 135, 134, 200, 212, 213, 230, 239};
static const PedMale[] = {9, 10, 31, 39, 54, 55, 75, 131};

//

/*#define DIALOG_SNACK 1000
#define MAX_ATMS 50
enum AtmDatas
{
	Float:AtX,
	Float:AtY,
	Float:AtZ,
	Float:AtRX,
	Float:AtRY,
	Float:AtRZ,
	Float:VA,
	AtmObjID,
	Text3D:LabelVend,
};
new AtmDat[MAX_PLAYERS][AtmDatas];
new Iterator:ATMS<MAX_ATMS>;
*/
//

#define GetPlayerOfferInfo(%0,%1) 		g_player_offer[%0][%1]
#define SetPlayerOfferInfo(%0,%1,%2) 	g_player_offer[%0][%1] = %2

#define SetPlayerOfferValue(%0,%1,%2) g_player_offer[%0][O_INCOMING_VALUE][%1] = %2
#define ClearPlayerOffer(%0) g_player_offer[%0] = g_offer_default_values

enum E_PLAYER_OFFER_STURCT
{
	O_OUTCOMIG_PLAYER,  // Dikirim menawarkan kepada pemain
	O_INCOMING_PLAYER, 	// tawaran masuk dari pemain
	O_INCOMING_TYPE, 	// tawaran masuk
	O_INCOMING_VALUE[4] // Nilai Penawaran masuk
};

enum // Jenis penawaran
{
	OFFER_TYPE_NONE = -1,
	OFFER_TYPE_FAMILY,
	OFFER_TYPE_SELLCAR,
	OFFER_TYPE_SELLSIM,
	OFFER_TYPE_SELLBIZ,
	OFFER_TYPE_SELLFUEL,
	OFFER_TYPE_SELLHOUSE,
	OFFER_TYPE_SELLGUN,
	OFFER_TYPE_LIVE,
	OFFER_TYPE_LODGER,
	OFFER_TYPE_TICKET,
	OFFER_TYPE_SELLSKIN,
	OFFER_TYPE_DICE,
	OFFER_TYPE_HI,
	OFFER_TYPE_SELLDRUGS,
	OFFER_TYPE_GIVEHEALS,
	OFFER_TYPE_GIVEMASK,
	OFFER_TYPE_GIVEPATR,
	OFFER_TYPE_GIVEMETALL,
	OFFER_TYPE_PAINTJOB,
	OFFER_TYPE_COMPONENT,
	OFFER_TYPE_REPAINT_CAR
};

new g_player_offer[MAX_PLAYERS][E_PLAYER_OFFER_STURCT];
new const g_offer_default_values[E_PLAYER_OFFER_STURCT] =
{
	INVALID_PLAYER_ID,	// Dikirim menawarkan kepada pemain
	INVALID_PLAYER_ID, 	// tawaran masuk dari pemain
	OFFER_TYPE_NONE, 	// tawaran masuk
	{-1, -1} 			// Nilai Penawaran masuk
};

new cant_make_offer[MAX_PLAYERS];

//

new player_mysql_params[MAX_PLAYERS];
new player_mysql_page[MAX_PLAYERS];

new Text: speed_global_td[25];
new PlayerText: speed_player_td[7][MAX_PLAYERS];

new bool: player_news_live[MAX_PLAYERS];

//

new mp_status = 0;

new Float: mp_X, Float: mp_Y, Float: mp_Z;
new mp_int, mp_world;

//

new player_green_hits[MAX_PLAYERS];

new Float: green_zones[][] =
{
    {2188.6582,-2261.6140,13.4822,314.1779}, // Penggerak ZZ
	{-1074.5400,-1185.5780,129.2188,134.4979}, // �� Apel
	{-465.3294,-64.8822,60.0557,268.8737}, // ZZ Sawmill
	{2566.8789,-1299.2484,1044.1250,34.0869}, // �� Produk Unit
	{2579.0994,-3839.0168,13.6421,266.0339}, // Menara Minyak ZZ
	{1483.1418,-1715.2985,14.0469,226.8868}, // �� Area ��
	{1391.894287, -30.350280, 999.910888, 270.1877}, // �� AP Interior
	{353.1629,193.1430,1014.1797,88.7086}, // Ruang Pemilihan ZZ
	{-645.0973,-912.4214,1436.1736,239.7618}, // ZZ Bolka
	{814.3752,-1345.3441,13.5322, 0.0}, //spawn 1
	{403.7906,-1799.5159,7.8281,110.2695}, //spawn 2
	{1971.8313,1340.5493,1516.5916,89.4035}, // Sekolah mengemudi ZZ
	{-2044.1602,-90.0313,35.1641,83.7438}, // ZZ dari bagian dalam sekolah mengemudi
	{264.0815,77.6170,1001.0391, 0.0}, //jail
	{1559.2446,-1213.8204,1390.2681, 0.0}, //bank
	{1022.6956,-1122.5371,23.8714, 0.0}, //dice
	{2020.3683,1007.8116,10.8203, 0.0}, //four
	{1126.7045,-1.5172,1000.6797, 0.0}, //dice street
	{1968.3195,1166.8774,992.4688, 0.0} //four street
};

//

new Text:cheat_td[2][10];
new cheat_ids[2][10];

//

#define IsPlayerMobile(%0) player_mobile[%0]

native gpci(playerid, buffer[], size = sizeof(buffer));

new bool: player_mobile[MAX_PLAYERS];

//

#define SKIN_CLASS_ECONOM 1
#define SKIN_SEX_MALE 1
#define SKIN_SEX_FEMALE 2
#define SKIN_COLOR_WHITE 0
#define SKIN_COLOR_BLACK 1


new vehicle_driver[MAX_VEHICLES];
new vehicle_rent_owner[MAX_VEHICLES] = { INVALID_PLAYER_ID, ... };

enum vInfo
{
	vModel,
	vColors1,
	vColors2,
	Float:vFuel,
	vSost,
	Float:vProbeg,
	Float:vX,
	Float:vY,
	Float:vZ,
	Float:vFa,
	vInt,
	vWorld,
	vFr,
	vStatus,
	vRentCena,
	vBuyCena,
	vSpawnDelay,
	vEngineTune[5],
	vBrakeTune[5]
};

new VehInfo[MAX_VEHICLES][vInfo];

new standart_vehicle[][vInfo] =
{
	{0, 0, 0, 200.0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0},
	//MEKANIK
    {515, 3, 3, 200.0, 100, 0.0, -77.4635, -1110.9333, 1.0781, 0, 0, WORK_TYPE_HAULING, 0, 0, 0},
	{515, 3, 3, 200.0, 100, 0.0, -66.4976, -1109.4556, 1.0781, 0, 0, WORK_TYPE_HAULING, 0, 0, 0},
	{515, 0, 0, 200.0, 100, 0.0, 71.7722, -1109.4309, 1.0781, 0, 0, WORK_TYPE_HAULING, 0, 0, 0},
	//
    {414, 157, 157, 200.0, 0, 0.000000, -62.7501,-318.0251,5.1741,268.9456, 0, 0, 1, 1, 500, 0, 300},
	{414, 157, 157, 200.0, 0, 0.000000, -62.7139,-314.4543,5.1740,270.4289, 0, 0, 1, 1, 500, 0, 300},
	{552, 157, 157, 200.0, 0, 0.000000, -62.6353,-310.8776,5.1727,270.6335, 0, 0, 1, 1, 500, 0, 300},
	{552, 157, 157, 200.0, 0, 0.000000, -62.7728,-307.3958,5.1061,271.2803, 0, 0, 1, 1, 500, 0, 300},
	{552, 157, 157, 200.0, 0, 0.000000, -62.7615,-303.8114,5.1766,269.8152, 0, 0, 1, 1, 500, 0, 300},
 //LSPD
	{415, 1, 1, 200.0, 13, 4.529640, 1564.540039, -1711.589965, 5.689799, 359.252014, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{415, 1, 1, 200.0, 35, 0.000000, 1528.349975, -1688.060058, 5.610000, 269.533996, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{596, 1, 198, 200.0, 35, 0.000000, 1570.430053, -1710.880004, 5.676199, 359.259002, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{596, 1, 198, 200.0, 35, 0.000000, 1574.540039, -1710.920043, 5.679900, 0.061700, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{596, 1, 198, 200.0, 35, 0.000000, 1578.699951, -1711.069946, 5.683300, 0.287499, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{596, 1, 198, 200.0, 35, 0.327324, 1583.560058, -1711.160034, 5.685500, 0.319599, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{596, 1, 198, 200.0, 35, 0.000000, 1587.500000, -1711.209960, 5.688600, 0.777499, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{596, 1, 198, 200.0, 35, 0.000000, 1558.849975, -1711.040039, 5.613100, 0.898699, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.000000, 1546.030029, -1684.420043, 6.131899, 89.829597, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.000000, 1545.979980, -1680.280029, 6.131700, 90.431098, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.000000, 1546.150024, -1676.130004, 6.131400, 91.061698, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.000000, 1546.219970, -1671.920043, 6.130799, 89.569198, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{601, 1, 198, 200.0, 35, 0.000000, 1538.670043, -1644.040039, 5.674399, 179.919006, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{601, 1, 198, 200.0, 35, 0.021511, 1534.599975, -1644.140014, 5.674099, 180.100997, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{601, 1, 198, 200.0, 35, 0.000000, 1530.530029, -1644.229980, 5.673500, 180.410995, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{528, 1, 198, 200.0, 35, 0.000000, 1546.180053, -1663.089965, 5.897699, 89.838699, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{528, 1, 198, 200.0, 35, 0.000000, 1546.060058, -1659.030029, 5.922200, 89.839797, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{528, 1, 198, 200.0, 35, 0.000000, 1546.030029, -1654.959960, 5.925099, 90.250503, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{523, 1, 198, 200.0, 35, 0.000000, 1591.430053, -1711.680053, 5.455900, 358.308013, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{523, 1, 198, 200.0, 35, 0.000000, 1595.699951, -1711.800048, 5.461999, 0.201700, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{497, 1, 198, 200.0, 35, 0.000000, 1551.719970, -1643.339965, 28.566799, 89.778800, 0, 0, FRACTION_LSPD, 0, 0, 0},
	{497, 1, 198, 200.0, 35, 0.000000, 1551.290039, -1708.199951, 28.564500, 90.298400, 0, 0, FRACTION_LSPD, 0, 0, 0},
 //SFPD
    {597, 1, 198, 200.0, 35, 0.0,  -1616.6824,749.757934,-5.472858,180.000000, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1612.5667,749.842773,-5.473083,179.573394, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1608.6444,749.874633,-5.474194,180.334274, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1604.4166,749.981994,-5.473082,181.302078, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1600.4444,750.143981,-5.474306,179.944046, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1596.0124,750.111694,-5.473164,179.468429, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1592.0885,750.239929,-5.474564,180.952255, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1588.0272,750.268371,-5.473528,180.071334, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1583.8750,750.265197,-5.472936,179.949569, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1579.5806,750.180603,-5.474044,180.681854, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1572.4074,742.527648,-5.053358,88.536865, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1572.5054,738.727111,-5.051444,88.662963, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{597, 1, 198, 200.0, 35, 0.0,  -1572.2873,734.621887,-5.053571,91.140846, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.0,  -1572.3563,730.526245,-5.054760,88.813148, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.0,  -1572.1278,726.258605,-5.055293,90.872772, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.0,  -1572.1914,722.519104,-5.050671,90.809379, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{599, 1, 198, 200.0, 35, 0.0,  -1572.2348,718.309509,-5.051505,90.162696, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{601, 1, 198, 200.0, 35, 0.0,  -1596.3059,677.031616,-5.482570,0.520957, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{523, 1, 198, 200.0, 35, 0.0,  -1591.1502,681.419921,-5.669572,277.718597, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{523, 1, 198, 200.0, 35, 0.0,  -1587.6419,681.864013,-5.670049,276.782714, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{523, 1, 198, 200.0, 35, 0.0,  -1584.3377,682.910156,-5.668097,297.844512, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{427, 1, 198, 200.0, 35, 0.0,  -1600.2624,677.082702,-5.110285,2.884526, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{497, 1, 198, 200.0, 35, 0.0,  -1681.3768,705.497253,30.806211,275.618896, 0, 0, FRACTION_SFPD, 0, 0, 0},
	{427, 1, 198, 200.0, 35, 0.0,  -1596.5724,692.9887,-5.1191,180.8011, 0, 0, FRACTION_SFPD, 0, 0, 0},
 // Rumah sakit SF
	{490, 1, 3, 200.0, 35, 0.0,  -2620.9390,604.2369,14.4835,90.4004, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{490, 1, 3, 200.0, 35, 0.0,  -2620.9053,608.5419,14.4845,89.4446, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  -2652.0916,613.4515,14.5280,180.7712, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  -2656.2690,613.4663,14.5280,180.1152, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  -2660.6331,613.4210,14.5286,180.4090, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  -2665.2412,613.4213,14.5294,179.7303, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  -2669.7161,613.3998,14.5294,180.0281, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{487, 1, 3, 200.0, 35, 0.0,  -2727.9565,616.0768,33.4465,271.1170, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
	{563, 1, 3, 200.0, 35, 0.0,  -2727.0525,596.0925,33.9315,272.0081, 0, 0, FRACTION_SFMEDICS, 0, 0, 0},
 // Rumah sakit LV
	{490, 1, 3, 200.0, 35, 0.0,  1615.9755,1849.8185,10.8517,180.1745, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{490, 1, 3, 200.0, 35, 0.0,  1611.7042,1849.7883,10.8523,179.3450, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  1607.5468,1849.3075,10.8954,180.8827, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  1603.1580,1849.2318,10.8953,180.8129, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  1599.1040,1849.2091,10.8948,181.1062, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  1594.8430,1849.1715,10.8952,179.6478, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{416, 1, 3, 200.0, 35, 0.0,  1590.5770,1849.1683,10.8956,180.7225, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{487, 1, 3, 200.0, 35, 0.0,  1598.4999,1801.6680,30.6182,0.2395, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
	{563, 1, 3, 200.0, 35, 0.0,  1616.7786,1801.6367,31.1095,4.1015, 0, 0, FRACTION_LVMEDICS, 0, 0, 0},
 //LVPD
    {598, 0, 1, 200.0, 35, 0.0, 2268.9678,2443.6958,10.5668,359.5409, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2273.5706,2443.7290,10.5665,0.6987, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2277.9482,2443.7490,10.5654,359.8027, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2282.1309,2443.7957,10.5660,359.7104, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2282.5002,2476.4595,10.5663,181.3129, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2277.6665,2476.5178,10.5670,180.8092, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2273.6030,2476.5684,10.5669,180.3357, 0, 0, FRACTION_LVPD, 0, 0, 0},
 	{598, 0, 1, 200.0, 35, 0.0, 2268.8853,2476.6331,10.5663,179.7468, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2269.2004,2459.8330,10.5683,0.1298, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2273.3623,2459.5422,10.5661,178.7547, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2278.0513,2459.7075,10.5667,359.0662, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2281.9307,2459.4504,10.5672,180.7914, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{599, 0, 1, 200.0, 35, 0.0, 2290.6970,2443.7861,11.0110,1.2899, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{599, 0, 1, 200.0, 35, 0.0, 2260.5859,2476.3032,11.0123,180.0692, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{497, 0, 1, 200.0, 35, 0.0, 2348.60009766,2466.10009766,38.90000153,0.00000000, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{497, 0, 1, 200.0, 35, 0.0, 2336.89990234,2466.10009766,38.90000153,0.00000000, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2290.30004883,2421.39990234,10.69999981,268.00000000, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2297.50000000,2421.30004883,10.69999981,267.99499512, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2274.89990234,2421.50000000,10.69999981,268.00000000, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2282.30004883,2421.50000000,10.69999981,267.99499512, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{598, 0, 1, 200.0, 35, 0.0, 2305.69995117,2421.00000000,10.69999981,267.99499512, 0, 0, FRACTION_LVPD, 0, 0, 0},
	{427, 0, 1, 200.0, 35, 0.0, 2290.9106,2477.1133,10.9520,180.0082, 0, 0, FRACTION_LVPD, 0, 0, 0},
 //FBI
	{415, 0, 0, 200.0, 0, 0.000000, -290.626007, 1530.150024, 75.124397, 129.636993, 0, 0, FRACTION_FBI, 0, 0, 0},
	{415, 0, 0, 200.0, 0, 0.000000, -287.569000, 1526.239990, 75.138702, 130.934997, 0, 0, FRACTION_FBI, 0, 0, 0},
	{490, 0, 0, 200.0, 0, 0.000000, -314.769989, 1514.949951, 75.497703, 359.998992, 0, 0, FRACTION_FBI, 0, 0, 0},
	{490, 0, 0, 200.0, 0, 0.000000, -317.906005, 1514.920043, 75.497596, 359.704986, 0, 0, FRACTION_FBI, 0, 0, 0},
	{490, 0, 0, 200.0, 0, 0.000000, -320.989990, 1514.989990, 75.497398, 359.733001, 0, 0, FRACTION_FBI, 0, 0, 0},
	{490, 0, 0, 200.0, 0, 0.000000, -324.131011, 1515.020019, 75.497299, 0.738600, 0, 0, FRACTION_FBI, 0, 0, 0},
	{490, 0, 0, 200.0, 0, 0.000000, -327.269012, 1514.910034, 75.497200, 359.562011, 0, 0, FRACTION_FBI, 0, 0, 0},
	{490, 0, 0, 200.0, 0, 0.000000, -330.398986, 1514.910034, 75.497001, 0.713199, 0, 0, FRACTION_FBI, 0, 0, 0},
	{482, 0, 0, 200.0, 0, 0.000000, -336.640014, 1514.900024, 75.482398, 359.998992, 0, 0, FRACTION_FBI, 0, 0, 0},
	{482, 0, 0, 200.0, 0, 0.000000, -339.835998, 1514.979980, 75.482299, 359.996002, 0, 0, FRACTION_FBI, 0, 0, 0},
	{497, 0, 0, 200.0, 0, 0.000000, -293.760986, 1561.709960, 84.106697, 133.328994, 0, 0, FRACTION_FBI, 0, 0, 0},
	{497, 0, 0, 200.0, 0, 0.000000, -285.180999, 1551.880004, 84.106697, 134.080001, 0, 0, FRACTION_FBI, 0, 0, 0},
	{497, 0, 0, 200.0, 0, 0.000000, -276.529998, 1542.790039, 84.228401, 133.589004, 0, 0, FRACTION_FBI, 0, 0, 0},
 //NE
	{470, 0, 0, 200.0, 0, 0.000000, 184.447998, 1920.280029, 17.881999, 181.283996, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.000000, 180.977996, 1920.339965, 17.900899, 182.171005, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.000000, 177.492996, 1920.270019, 18.020799, 181.582992, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.000000, 173.292007, 1920.239990, 18.166200, 182.466995, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.000000, 168.880004, 1920.109985, 18.319099, 182.164001, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.000000, 164.981002, 1920.020019, 18.451900, 180.981994, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.000000, 204.759994, 1861.979980, 13.120400, 270.768005, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{579, 61, 61, 200.0, 0, 0.0, 222.136993, 1854.630004, 12.915599, 1.329499, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{579, 61, 61, 200.0, 0, 0.0, 213.651000, 1853.989990, 12.914400, 5.993299, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{433, 0, 0, 200.0, 0, 0.0, 274.514007, 1950.680053, 18.170999, 275.643005, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{433, 0, 0, 200.0, 0, 0.0, 274.130004, 1959.050048, 18.191900, 272.352996, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{433, 0, 0, 200.0, 0, 0.0, 274.660003, 1983.449951, 18.189399, 274.266998, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
	{433, 0, 0, 200.0, 0, 0.0, 274.638000, 1992.109985, 18.065700, 273.089996, 0, 0, FRACTION_ARMY_LS, 0, 0, 1200},
 //Angkatan Laut
    {470, 0, 0, 200.0, 0, 0.0, -1282.2758,426.1552,7.1272,91.2826, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot(Angkatan Laut)
	{470, 0, 0, 200.0, 0, 0.0, -1282.0228,416.5728,7.1300,88.9537, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot(Angkatan Laut)
	{470, 0, 0, 200.0, 0, 0.0, -1282.3760,407.8681,7.1289,90.3275, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot(Angkatan Laut)
	{470, 0, 0, 200.0, 0, 0.0, -1281.8813,398.7265,7.1265,90.4130, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot(Angkatan Laut)
	{433, 0, 0, 200.0, 0, 0.0, -1321.4465,404.2765,7.5128,271.5941, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // truk(Angkatan Laut)
	{433, 0, 0, 200.0, 0, 0.0, -1321.3226,410.6346,7.5119,269.9040, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // truk(Angkatan Laut)
	{417, 0, 0, 200.0, 0, 0.0, -1264.1891,446.4185,7.3094,0.2892, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // helikopter(angkatan laut)
	{417, 0, 0, 200.0, 0, 0.0, -1248.1200,446.2982,7.3126,0.6944, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // helikopter levitan2(angkatan laut)
	{500, 0, 0, 200.0, 0, 0.0, -1263.8109,478.0906,7.2833,180.0294, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // Angkatan Laut Mesa
	{500, 0, 0, 200.0, 0, 0.0, -1260.7073,478.1063,7.2858,180.8296, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // Angkatan Laut Mesa
	{470, 0, 0, 200.0, 0, 0.0, -1267.4349,477.6823,7.1728,178.0209, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot
	{520, 0, 0, 200.0, 0, 0.0, -1290.9150,493.8162,18.9576,317.3234, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // hydraVMP
	{520, 0, 0, 200.0, 0, 0.0, -1269.9690,495.2777,18.9576,328.8508, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // hydraVMP
	{520, 0, 0, 200.0, 0, 0.0, -1331.5674,507.6514,18.9576,269.2120, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // hydraVMP
	{520, 0, 0, 200.0, 0, 0.0, -1416.9124,494.0882,18.9540,313.0526, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // hydraVMP
	{425, 0, 0, 200.0, 0, 0.0, -1458.0352,501.4379,18.8631,268.1383, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // pemburu helikopter(Angkatan Laut)
	{470, 0, 0, 200.0, 0, 0.0, -1232.0264,456.9897,7.1794,89.0938, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot
	{470, 0, 0, 200.0, 0, 0.0, -1231.1023,453.7322,7.2581,90.4854, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // patriot
	{472, 0, 0, 200.0, 0, 0.0, -1447.6935,498.7005,-0.1071,90.5322, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // 472
	{472, 0, 0, 200.0, 0, 0.0, -1448.5394,491.7691,-0.1175,90.1567, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // 472
	{430, 0, 0, 200.0, 0, 0.0, -1438.8505,509.7895,-0.1351,88.6650, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // 430
	{430, 0, 0, 200.0, 0, 0.0, -1440.4913,504.8315,-0.2183,89.0999, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // 430+
	{487, 0, 0, 200.0, 0, 0.0, -1304.4575,493.3211,18.4273,0.0006, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // 430+
	{487, 0, 0, 200.0, 0, 0.0, -1311.8975,493.4265,18.4265,0.0005, 0, 0, FRACTION_ARMY_SF, 0, 0, 1200}, // 430+
 //Angkatan udara
	{500, 0, 0, 200.0, 0, 0.0, 243.8090, 2471.7800, 16.697, 0.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{500, 0, 0, 200.0, 0, 0.0, 239.716, 2471.8239, 16.704, 0.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{500, 0, 0, 200.0, 0, 0.0, 235.534, 2471.8190, 16.704, 0.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{500, 0, 0, 200.0, 0, 0.0, 394.4370, 2548.1298, 16.757, 90.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{500, 0, 0, 200.0, 0, 0.0, 394.2900, 2543.7719, 16.763, 90.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.0, 386.5979, 2535.7309, 16.919, 0.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.0, 381.6310, 2535.6989, 16.919, 0.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.0, 376.6440, 2535.6479, 16.956, 0.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{433, 0, 0, 200.0, 0, 0.0, 284.185, 2465.8081, 17.047, 90.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{433, 0, 0, 200.0, 0, 0.0, 284.215, 2459.6440, 17.054, 90.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.0, 152.1130, 2475.3930, 16.864, 270.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.0, 172.933, 2475.4599, 16.864, 270.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{470, 0, 0, 200.0, 0, 0.0, 183.5030, 2475.2299, 16.864, 270.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{520, 0, 0, 200.0, 0, 0.0, 290.866, 2540.0061, 17.74, 180.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{520, 0, 0, 200.0, 0, 0.0, 325.6820, 2538.3659, 17.727, 180.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{519, 0, 0, 200.0, 0, 0.0, 418.9339, 2515.7680, 17.484, 90.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
	{519, 0, 0, 200.0, 0, 0.0, 418.7189, 2490.5920, 17.484, 90.0, 0, 0, FRACTION_ARMY_LV, 0, 0, 1200},
 //Rumah sakit
    {416, 1, 3, 200.0, 0, 0.0, 1179.6815,-1339.4069,13.9670,270.1565, 0, 0, FRACTION_LSMEDICS, 0, 0, 600},
	{416, 1, 3, 200.0, 0, 0.0, 1178.5190,-1308.4353,13.9800,269.8205, 0, 0, FRACTION_LSMEDICS, 0, 0, 600},
	{416, 1, 3, 200.0, 0, 0.0, 1190.2303,-1359.5320,13.6227,359.3351, 0, 0, FRACTION_LSMEDICS, 0, 0, 600},
	{416, 1, 3, 200.0, 0, 0.0, 1190.3696,-1372.1367,13.5990,0.0185, 0, 0, FRACTION_LSMEDICS, 0, 0, 600},
	{487, 1, 3, 200.0, 0, 0.0, 1153.9170,-1296.1907,31.6705,180.6735, 0, 0, FRACTION_LSMEDICS, 0, 0, 600},
	{563, 1, 3, 200.0, 0, 0.0, 1166.9578,-1300.0178,32.2427,181.1912, 0, 0, FRACTION_LSMEDICS, 0, 0, 600},
 //Balai Kota
	{579, 1, 1, 200.0, 100, 0.0,1405.8013,-1785.2794,13.4800,90.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
	{579, 1, 1, 200.0, 100, 0.0,1405.7518,-1789.8433,13.4797,90.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
	{579, 1, 1, 200.0, 100, 0.0,1405.7668,-1794.6936,13.4773,90.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
	{579, 1, 1, 200.0, 100, 0.0,1405.6868,-1799.8503,13.4788,90.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
	{409, 1, 1, 200.0, 100, 0.0,1404.6141,-1780.1371,13.3469,90.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
	{487, 1, 1, 200.0, 100, 0.0,1416.6410,-1800.3428,33.5894,270.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
	{487, 1, 1, 200.0, 100, 0.0,1416.7505,-1789.0027,33.6797,270.0, 0, 0,FRACTION_MAYOR, 0, 0, 0},
 //Radio
	{488, 53, 53, 200.0, 100, 0.0,1648.8434,-1680.4919,21.5795,270.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
	{582, 53, 53, 200.0, 100, 0.0,1671.4011,-1698.7537,20.5368,90.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
	{582, 53, 53, 100.0, 100, 0.0,1671.3578,-1702.4292,20.5428,90.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
	{582, 53, 53, 200.0, 100, 0.0,1671.3455,-1706.4269,20.5403,90.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
	{582, 53, 53, 200.0, 100, 0.0,1671.2891,-1710.6156,20.5371,90.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
	{582, 53, 53, 200.0, 100, 0.0,1671.3644,-1715.0544,20.5383,90.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
	{579, 53, 53, 200.0, 100, 0.0,1671.5405,-1719.4758,20.4182,90.0, 0, 0,FRACTION_NEWS, 0, 0, 0},
 // pengendara motor
	{463, 40, 40, 200.0, 100, 0.0, 694.4274,-460.8289,15.9079,269.6203,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 694.3872,-463.9226,15.9095,269.6203,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 694.3482,-466.9103,15.9111,269.6203,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 694.3090,-469.9930,15.9126,269.6203,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 694.2693,-473.1908,15.9142,269.6203,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 708.1906,-470.8434,15.9116,89.9300,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 708.2133,-467.6444,15.9132,89.9300,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 708.2357,-464.4474,15.9147,89.9300,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 708.2575,-461.2444,15.9161,89.9300,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 708.2788,-458.2424,15.9176,89.9300,0, 0, 7, 0, 0, 0},
	{459, 40, 40, 200.0, 100, 0.0, 668.4117,-471.0425,15.9078,91.0158,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 668.3735,-467.7676,15.9095,91.0158,0, 0, 7, 0, 0, 0},
	{463, 40, 40, 200.0, 100, 0.0, 668.3366,-464.5807,15.9110,91.0158,0, 0, 7, 0, 0, 0},
	{568, 40, 40, 200.0, 100, 0.0, 668.3027,-461.5888,15.9125,91.0158,0, 0, 7, 0, 0, 0},
	{586, 40, 40, 200.0, 100, 0.0, 668.2628,-458.2840,15.9140,91.0158,0, 0, 7, 0, 0, 0},
	//Yakuza
	{579, 3, 3, 200.0, 100, 0.0,2630.7834,1807.7238,10.7526,89.5313, 0, 0, FRACTION_YAKUZA, 0, 0, 0},
	{579, 3, 3, 200.0, 100, 0.0,2630.7686,1801.1835,10.7558,89.0413, 0, 0, FRACTION_YAKUZA, 0, 0, 0},
	{579, 3, 3, 200.0, 100, 0.0,2630.8608,1794.8230,10.7499,89.5684, 0, 0, FRACTION_YAKUZA, 0, 0, 0},
	{409, 3, 3, 200.0, 100, 0.0,2627.9001,1838.0070,10.6021,90.3655, 0, 0, FRACTION_YAKUZA, 0, 0, 0},
	{409, 3, 3, 200.0, 100, 0.0,2604.0645,1833.7968,10.6203,269.7775, 0, 0, FRACTION_YAKUZA, 0, 0, 0},
	{415, 3, 3, 200.0, 100, 0.0,2602.9382,1840.1135,10.5919,270.1810, 0, 0, FRACTION_YAKUZA, 0, 0, 0},
	//Columbia
	{579, 6, 6, 200.0, 100, 0.0,982.0189,1723.4951,8.5898,90.6661, 0, 0, FRACTION_COLUMBIA, 0, 0, 0},
	{579, 6, 6, 200.0, 100, 0.0,982.0361,1728.0107,8.5838,89.9980, 0, 0, FRACTION_COLUMBIA, 0, 0, 0},
	{579, 6, 6, 200.0, 100, 0.0,982.0163,1732.9883,8.5857,90.4287, 0, 0, FRACTION_COLUMBIA, 0, 0, 0},
	{409, 6, 6, 200.0, 100, 0.0,957.7682,1711.0698,8.4484,359.7849, 0, 0, FRACTION_COLUMBIA, 0, 0, 0},
	{409, 6, 6, 200.0, 100, 0.0,962.5423,1711.0243,8.4484,359.8010, 0, 0, FRACTION_COLUMBIA, 0, 0, 0},
	{415, 6, 6, 200.0, 100, 0.0,965.0115,1757.7244,8.4203,180.4664, 0, 0, FRACTION_COLUMBIA, 0, 0, 0},
	//Mafia Rusia
	{579, 0, 0, 200.0, 100, 0.0,1471.1655,2814.2603,10.7536,1.6688, 0, 0, FRACTION_RUMAFIA, 0, 0, 0},
	{579, 0, 0, 200.0, 100, 0.0,1467.1979,2814.0554,10.7525,0.8369, 0, 0, FRACTION_RUMAFIA, 0, 0, 0},
	{579, 0, 0, 200.0, 100, 0.0,1463.3711,2814.1030,10.7524,359.9947, 0, 0, FRACTION_RUMAFIA, 0, 0, 0},
	{409, 0, 0, 200.0, 100, 0.0,1472.4093,2773.6350,10.5425,358.5256, 0, 0, FRACTION_RUMAFIA, 0, 0, 0},
	{409, 0, 0, 200.0, 100, 0.0,1479.9250,2845.1060,10.6203,180.1396, 0, 0, FRACTION_RUMAFIA, 0, 0, 0},
	{415, 0, 0, 200.0, 100, 0.0,1485.4734,2793.7449,10.5391,269.4854, 0, 0, FRACTION_RUMAFIA, 0, 0, 0},
 //Vagos
	{412, 6, 6, 200.0, 100, 0.0,2771.7129,-1624.2867,10.6288,359.7936, 0, 0,FRACTION_VAGOS, 0, 0, 0},
	{413, 6, 6, 200.0, 100, 0.0,2783.4490,-1602.0513,10.6931,270.4379, 0, 0,FRACTION_VAGOS, 0, 0, 0},
	{466, 6, 6, 200.0, 100, 0.0,2776.3142,-1624.3052,10.6288,359.7937, 0, 0,FRACTION_VAGOS, 0, 0, 0},
	{474, 6, 6, 200.0, 100, 0.0,2779.1472,-1624.3158,10.6288,359.7937, 0, 0,FRACTION_VAGOS, 0, 0, 0},
	{475, 6, 6, 200.0, 100, 0.0,2770.2471,-1606.2567,10.6247,271.3386, 0, 0,FRACTION_VAGOS, 0, 0, 0},
 //Ballas
	{412, 242, 242, 200.0, 100, 0.0,1999.3058,-1142.0822,25.2848,268.7538, 0, 0,FRACTION_BALLAS, 0, 0, 0},
	{413, 242, 242, 200.0, 100, 0.0,2005.5760,-1129.2053,25.1319,90.2005, 0, 0,FRACTION_BALLAS, 0, 0, 0},
	{466, 242, 242, 200.0, 100, 0.0,2013.6470,-1142.8596,24.9801,269.3301, 0, 0,FRACTION_BALLAS, 0, 0, 0},
	{474, 242, 242, 200.0, 100, 0.0,1991.7986,-1119.4169,26.8909,270.1606, 0, 0,FRACTION_BALLAS, 0, 0, 0},
	{475, 242, 242, 200.0, 100, 0.0,1992.7858,-1130.2555,25.3148,89.7975, 0, 0,FRACTION_BALLAS, 0, 0, 0},
 //Grove
	{412, 86, 86, 200.0, 100, 0.0,2481.9072,-1653.3868,13.2185,88.9954, 0, 0,FRACTION_GROVE, 0, 0, 0},
	{413, 86, 86, 200.0, 100, 0.0,2470.3342,-1666.8761,13.1353,298.0269, 0, 0,FRACTION_GROVE, 0, 0, 0},
	{466, 86, 86, 200.0, 100, 0.0,2471.3022,-1670.6198,13.1605,300.6299, 0, 0,FRACTION_GROVE, 0, 0, 0},
	{474, 86, 86, 200.0, 100, 0.0,2472.9883,-1674.5118,13.1705,303.5992, 0, 0,FRACTION_GROVE, 0, 0, 0},
	{475, 86, 86, 200.0, 100, 0.0,2475.1748,-1677.9551,13.1710,304.7424, 0, 0,FRACTION_GROVE, 0, 0, 0},
 //Aztecas
	{412, 2, 2, 200.0, 100, 0.0,2180.7322,-1811.1013,13.3263,268.6125, 0, 0,FRACTION_AZTEC, 0, 0, 0},
	{413, 2, 2, 200.0, 100, 0.0,2171.6680,-1811.2706,13.3234,266.4658, 0, 0,FRACTION_AZTEC, 0, 0, 0},
	{466, 2, 2, 200.0, 100, 0.0,2190.3081,-1806.5250,13.3276,359.8308, 0, 0,FRACTION_AZTEC, 0, 0, 0},
	{474, 2, 2, 200.0, 100, 0.0,2190.3096,-1797.0596,13.3384,358.6747, 0, 0,FRACTION_AZTEC, 0, 0, 0},
	{475, 2, 2, 200.0, 100, 0.0,2179.8062,-1780.1222,13.1667,0.0585, 0, 0,FRACTION_AZTEC, 0, 0, 0},
 //Rifa
	{412, 53, 53, 200.0, 100, 0.0,2732.2234,-1936.2267,13.3749,87.9128, 0, 0,FRACTION_RIFA, 0, 0, 0},
	{413, 53, 53, 200.0, 100, 0.0,2729.1311,-1972.0330,13.3747,91.0217, 0, 0,FRACTION_RIFA, 0, 0, 0},
	{466, 53, 53, 200.0, 100, 0.0,2728.6475,-1967.9152,13.3783,90.0126, 0, 0,FRACTION_RIFA, 0, 0, 0},
	{474, 53, 53, 200.0, 100, 0.0,2719.4963,-1957.6360,13.2384,358.2563, 0, 0,FRACTION_RIFA, 0, 0, 0},
	{475, 53, 53, 200.0, 100, 0.0,2719.7668,-1944.2588,13.2355,358.5551, 0, 0,FRACTION_RIFA, 0, 0, 0},

	{431, 1, 1, 200.0, 0, 0.000000, 1276.750000, -1804.790039, 13.490300, 89.450996, 0, 0, 2, 1, 500, 0},//orang bus
	{431, 1, 1, 200.0, 0, 0.000000, 1276.699951, -1811.000000, 13.486100, 88.183097, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 0.000000, 1276.479980, -1817.119995, 13.482899, 87.546302, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 0.000000, 1276.839965, -1795.300048, 13.497900, 89.450698, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 2.212599, 1276.380004, -1823.199951, 13.485199, 86.963500, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 0.000000, 1276.260009, -1829.150024, 13.486599, 88.273101, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 0.150968, 1276.199951, -1834.890014, 13.485099, 89.762298, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 0.026744, 1202.550048, -1827.640014, 13.506400, 270.320007, 0, 0, 2, 1, 500, 0},
	{431, 1, 1, 200.0, 0, 0.000000, 1200.859985, -1833.579956, 13.501799, 270.513000, 0, 0, 2, 1, 500, 0},

	//{574, 1, 1, 200.0, 0, 0.000000, 1651.550048, -1089.089965, 23.631399, 91.707496, 0, 0, 3, 1, 500, 0},//pembersih jalan
	{574, 1, 1, 200.0, 0, 0.000000, 1651.670043, -1093.660034, 23.631399, 89.599998, 0, 0, 3, 1, 500, 0},
	{574, 1, 1, 200.0, 0, 0.000000, 1651.670043, -1089.089965, 23.631399, 91.747398, 0, 0, 3, 1, 500, 0},
	{574, 1, 1, 200.0, 0, 0.005233, 1651.670043, -1084.520019, 23.631399, 89.987098, 0, 0, 3, 1, 500, 0},
	{574, 1, 1, 200.0, 0, 0.000000, 1651.660034, -1098.079956, 23.631700, 89.573303, 0, 0, 3, 1, 500, 0},
	{574, 1, 1, 200.0, 0, 0.000000, 1651.670043, -1102.569946, 23.631399, 89.916099, 0, 0, 3, 1, 500, 0},
	{574, 1, 1, 200.0, 0, 0.000000, 1651.719970, -1107.089965, 23.631399, 90.346298, 0, 0, 3, 1, 500, 0},
	{574, 1, 1, 200.0, 0, 3.228100, 1651.849975, -1111.479980, 23.638900, 90.549003, 0, 0, 3, 1, 500, 0},

	{408, 1, 1, 200.0, 0, 0.0, 1675.5586,-1129.4240,24.3616,89.3059, 0, 0, 4, 1, 500, 0},//truk sampah
	{408, 1, 1, 200.0, 0, 0.0, 1675.5060,-1124.9220,24.4573,88.5030, 0, 0, 4, 1, 500, 0},
	{408, 1, 1, 200.0, 0, 0.0, 1675.5111,-1120.2866,24.4501,90.6851, 0, 0, 4, 1, 500, 0},
	{408, 1, 1, 200.0, 0, 0.0, 1675.4736,-1115.8440,24.4523,91.0492, 0, 0, 4, 1, 500, 0},
	{408, 1, 1, 200.0, 0, 0.0, 1675.4645,-1111.3915,24.4537,90.3355, 0, 0, 4, 1, 500, 0},
	{408, 1, 1, 200.0, 0, 0.0, 1675.3450,-1107.0001,24.4550,90.4336, 0, 0, 4, 1, 500, 0},
	{408, 1, 1, 200.0, 0, 0.0, 1675.3301,-1102.5115,24.4536,90.2256, 0, 0, 4, 1, 500, 0},
	{408, 1, 1, 200.0, 0, 0.0, 1675.3529,-1098.1600,24.4561,90.6154, 0, 0, 4, 1, 500, 0},

	{609, 11, 11, 200.0, 0, 0.0, 1696.3124, 692.8275, 11.3083, 90.0, 0, 0, 6, 1, 500, 0},//sopir truk
	{609, 11, 11, 200.0, 0, 0.0, 1696.3124, 696.8275, 11.3083, 90.0, 0, 0, 6, 1, 500, 0},
	{609, 11, 11, 200.0, 0, 0.0, 1696.3124, 702.8275, 11.3083, 90.0, 0, 0, 6, 1, 500, 0},
	{609, 11, 11, 200.0, 0, 0.0, 1696.3124, 708.8275, 11.3083, 90.0, 0, 0, 6, 1, 500, 0},
	{609, 11, 11, 200.0, 0, 0.0, 1696.3124, 711.8275, 11.3083, 90.0, 0, 0, 6, 1, 500, 0},
	{609, 11, 11, 200.0, 0, 0.0, 1696.3124, 716.8275, 11.3083, 90.0, 0, 0, 6, 1, 500, 0},

	{511, 1, 1, 200.0, 0, 0.0, 1951.5671,-2457.8586,13.1025,184.3874, 0, 0, 7, 1, 500, 0},//pilot
	{511, 1, 1, 200.0, 0, 0.0, 1922.6473,-2456.7576,13.5391,182.6345, 0, 0, 7, 1, 500, 0},
	{511, 1, 1, 200.0, 0, 0.0, 1902.7970,-2457.9187,13.5391,182.6345, 0, 0, 7, 1, 500, 0},
	{511, 1, 1, 200.0, 0, 0.0, 1888.2106,-2457.7947,13.5391,175.6785, 0, 0, 7, 1, 500, 0},

	{519, 1, 1, 200.0, 0, 0.0, 2063.7844,-2632.3606,13.5469,0.4043, 0, 0, 7, 1, 500, 0},
	{519, 1, 1, 200.0, 0, 0.0, 2040.4233,-2630.0730,13.5469,0.4043, 0, 0, 7, 1, 500, 0},
	{519, 1, 1, 200.0, 0, 0.0, 2020.3566,-2629.7690,13.5469,0.4043, 0, 0, 7, 1, 500, 0},
	{519, 1, 1, 200.0, 0, 0.0, 1996.7906,-2628.2261,13.5469,358.3363, 0, 0, 7, 1, 500, 0},

    //Pengiriman kontainer
	{578, 1, 1, 200.0, 0, 0.0, 1627.2484,-1035.2855,24.5243,359.9300, 0, 0, 13, 1, 500, 0, 300},
	{578, 1, 1, 200.0, 0, 0.0, 1631.7571,-1035.3687,24.5242,359.9300, 0, 0, 13, 1, 500, 0, 300},
	{578, 1, 1, 200.0, 0, 0.0, 1636.4183,-1035.3202,24.5234,359.9300, 0, 0, 13, 1, 500, 0, 300},
	{578, 1, 1, 200.0, 0, 0.0, 1640.8445,-1035.3333,24.5310,359.9300, 0, 0, 13, 1, 500, 0, 300},
	{578, 1, 1, 200.0, 0, 0.0, 1645.3684,-1035.3335,24.5234,359.9300, 0, 0, 13, 1, 500, 0, 300},
	{578, 1, 1, 200.0, 0, 0.0, 1649.9329,-1035.4230,24.5224,359.9300, 0, 0, 13, 1, 500, 0, 300},

	//Pengiriman pizza
	{448, 6, 6, 200.0, 0, 0.0, 782.6984,-1637.4287,12.9879,267.9999, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.7761,-1633.9124,12.9782,267.7098, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.8561,-1630.3602,12.9679,268.1183, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.8906,-1626.8296,12.9769,270.0975, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.8704,-1623.5549,12.9777,265.6458, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.9505,-1619.9149,12.9780,271.0778, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.6739,-1612.5920,12.9895,268.9999, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.6749,-1608.9772,12.9889,267.9999, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},
	{448, 6, 6, 200.0, 0, 0.0, 782.6926,-1605.5735,12.9911,268.9989, 0, 0, WORK_TYPE_PIZZA, 1, 500, 0, 300},

	//Pengemudi buldoser
	{486, 0, 0, 200.0, 0, 0.0, 556.3248,892.0255,-42.9509,360.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},
	{486, 0, 0, 200.0, 0, 0.0, 564.0276,892.1727,-42.9621,360.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},
	{486, 0, 0, 200.0, 0, 0.0, 571.5279,892.5296,-43.1642,360.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},
	{486, 0, 0, 200.0, 0, 0.0, 577.7482,892.9871,-43.2500,360.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},
	{486, 0, 0, 200.0, 0, 0.0, 584.5238,893.1120,-43.9041,360.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},
	{486, 0, 0, 200.0, 0, 0.0, 561.2993,866.3452,-43.0595,180.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},
	{486, 0, 0, 200.0, 0, 0.0, 568.5980,865.6812,-43.0434,180.0, 0, 0, WORK_TYPE_BULLDOZER, 1, 500, 0, 120},

//	{428, 1, 1, 200.0, 0, 0.0, 1246.5037,-1816.2910,13.4152,165.0186, 0, 0, 5, 1, 500, 0}, //kolektor
	{428,16, 37, 200.0, 0, 0.0,1362.8840,-1653.0486,13.4822,268.8251, 0, 0, 5, 1, 500, 0},
	{428,16, 37, 200.0, 0, 0.0,1362.8951,-1648.4115,13.4767,269.5751, 0, 0, 5, 1, 500, 0},
	{428,16, 37, 200.0, 0, 0.0,1362.8275,-1643.4127,13.4828,270.4417, 0, 0, 5, 1, 500, 0},
	{428,16, 37, 200.0, 0, 0.0,1362.7869,-1638.9740,13.4924,271.0190, 0, 0, 5, 1, 500, 0},
	{428,16, 37, 200.0, 0, 0.0,1362.6338,-1634.1194,13.4960,271.7666, 0, 0, 5, 1, 500, 0},
	//Sekolah mengemudi
	{507, 1, 1, 200.0, 100, 0.0, -2092.9390,-84.4628,34.9935,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2089.6807,-84.4287,34.9939,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2086.0122,-84.3886,34.9943,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2082.5837,-84.3508,34.9947,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2079.1953,-84.3135,34.9951,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2075.6472,-84.2745,34.9955,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2072.1389,-84.2360,34.9959,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2068.5581,-84.4268,34.9963,180.5727, 0, 0, 0, 67, 0, 0},
	{507, 1, 1, 200.0, 100, 0.0, -2064.9597,-84.4162,34.9932,180.5727, 0, 0, 0, 67, 0, 0}
};
new g_player_flood[MAX_PLAYERS][E_ANTI_FLOOD_STRUCT];
new const
	g_flood_default_values[E_ANTI_FLOOD_STRUCT] =
{
	0,
	0
};

stock IsNeonActive(vehicleid)
{
        if(BlinkTimer[vehicleid] == 1) return 1;
        if(SolidNeon[vehicleid] == 1) return 1;
        if(AltFlash[vehicleid] == 1) return 1;
        else return 0;
}
stock IsVehicleValid(v)
{
        if(v==403||v==406||v==407||v==408||v==416||v==417||v==424||v==425||v==430||v==432||v==433||v==435||v==437||v==441||v==443||v==444||v==446||v==447||v==448||v==449||v==450||v==452||v==453||v==454||v==455||v==456||v==457||v==460||v==461||v==462) return 0;
        if(v==463||v==464||v==465||v==468||v==469||v==470||v==471||v==472||v==473||v==476||v==481||v==484||v==485||v==486||v==487||v==488||v==493||v==497||v==500||v==501||v==509||v==510||v==511||v==512||v==513||v==514||v==515||v==519||v==520||v==521) return 0;
        if(v==522||v==523||v==524||v==530||v==532||v==537||v==538||v==539||v==544||v==548||v==553||v==556||v==557||v==563||v==564||v==568||v==569||v==570||v==571||v==572||v==573||v==574||v==577||v==578||v==581||v==582||v==584||v==583||v==586||v==590) return 0;
        if(v==591||v==592||v==593||v==594||v==595||v==601||v==606||v==607||v==608||v==610||v==11) return 0;
        else return 1;
}
stock SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle hood successfully closed.");
	}
	else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle hood successfully opened.");
	}
	return 1;
}
stock SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle trunk successfully closed.");
	}
	else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		SendClientMessage(playerid, COLOR_WHITE, "Vehicle trunk successfully opened.");
	}
	return 1;
}
stock GetClosestCar(playerid, exception = INVALID_VEHICLE_ID) {

	new
	Float: Distance,
	target = -1,
	Float: vPos[3];

	if(!IsPlayerInAnyVehicle(playerid)) GetPlayerPos(playerid, vPos[0], vPos[1], vPos[2]);
	else GetVehiclePos(GetPlayerVehicleID(playerid), vPos[0], vPos[1], vPos[2]);

	for(new v; v < MAX_VEHICLES; v++) if(GetVehicleModel(v) >= 400) {
		if(v != exception && (target < 0 || Distance > GetDistanceToCar(playerid, v, vPos[0], vPos[1], vPos[2]))) {
			target = v;
			Distance = GetDistanceToCar(playerid, v, vPos[0], vPos[1], vPos[2]); // Before the rewrite, we'd be running GetPlayerPos 2000 times...
		}
	}
	return target;
}
stock GetDistanceToCar(playerid, veh, Float: posX = 0.0, Float: posY = 0.0, Float: posZ = 0.0) {

	new
	Float: Floats[2][3];

	if(posX == 0.0 && posY == 0.0 && posZ == 0.0) {
		if(!IsPlayerInAnyVehicle(playerid)) GetPlayerPos(playerid, Floats[0][0], Floats[0][1], Floats[0][2]);
		else GetVehiclePos(GetPlayerVehicleID(playerid), Floats[0][0], Floats[0][1], Floats[0][2]);
	}
	else {
		Floats[0][0] = posX;
		Floats[0][1] = posY;
		Floats[0][2] = posZ;
	}
	GetVehiclePos(veh, Floats[1][0], Floats[1][1], Floats[1][2]);
	return floatround(floatsqroot((Floats[1][0] - Floats[0][0]) * (Floats[1][0] - Floats[0][0]) + (Floats[1][1] - Floats[0][1]) * (Floats[1][1] - Floats[0][1]) + (Floats[1][2] - Floats[0][2]) * (Floats[1][2] - Floats[0][2])));
}
stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
	Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}



// ANTI CHEAT STARTING


//Nex-AC by Nexius v1.9.44 (0.3.7)

#if defined _nex_ac_included
	#endinput
#endif
#define _nex_ac_included

#include <a_samp>

//#define DEBUG

#if !defined FILTERSCRIPT


#if !defined NO_SUSPICION_LOGS
	//#define NO_SUSPICION_LOGS
#endif

#if defined NO_SUSPICION_LOGS
	#pragma unused SUSPICION_1
	#pragma unused SUSPICION_2
#endif

#if !defined _nex_ac_lang_included
	#include <nex-ac_ru.lang>	//Localization
#endif

#define	NEX_AC_VERSION				"1.9.44"

#define AC_SERVER_VERSION			"0.3.7"
#define AC_SERVER_DL_VERSION		"0.3.DL"

#if !defined AC_CONFIG_FILE
	#define AC_CONFIG_FILE				"nex-ac_settings.cfg"
#endif

#if !defined AC_MAX_CLASSES
	#define AC_MAX_CLASSES				320
#endif

#if !defined AC_DEFAULT_COLOR
	#define AC_DEFAULT_COLOR			-1
#endif

#if !defined AC_USE_VENDING_MACHINES
	#define AC_USE_VENDING_MACHINES		true
#endif

#if !defined AC_USE_TUNING_GARAGES
	#define AC_USE_TUNING_GARAGES		true
#endif

#if !defined AC_USE_PICKUP_WEAPONS
	#define AC_USE_PICKUP_WEAPONS		true
#endif

#if !defined AC_USE_AMMUNATIONS
	#define AC_USE_AMMUNATIONS			true
#endif

#if !defined AC_USE_RESTAURANTS
	#define AC_USE_RESTAURANTS			true
#endif

#if !defined AC_USE_PAYNSPRAY
	#define AC_USE_PAYNSPRAY			true
#endif

#if !defined AC_USE_CASINOS
	#define AC_USE_CASINOS				true
#endif

#if !defined AC_USE_QUERY
	#define AC_USE_QUERY				true
#endif

#if !defined AC_MAX_CONNECTS_FROM_IP
	#define AC_MAX_CONNECTS_FROM_IP			999
#endif

#if !defined AC_MAX_RCON_LOGIN_ATTEMPT
	#define AC_MAX_RCON_LOGIN_ATTEMPT		1
#endif

#if !defined AC_MAX_MSGS_REC_DIFF
	#define AC_MAX_MSGS_REC_DIFF			800
#endif

#if !defined AC_MAX_PING
	#define AC_MAX_PING						500
#endif

#if !defined AC_MIN_TIME_RECONNECT
	#define AC_MIN_TIME_RECONNECT			12		//In seconds
#endif

#if !defined AC_SPEEDHACK_VEH_RESET_DELAY
	#define AC_SPEEDHACK_VEH_RESET_DELAY	3		//In seconds
#endif

#if !defined AC_MAX_NOP_WARNINGS
	#define AC_MAX_NOP_WARNINGS				8
#endif

#if !defined AC_MAX_NOP_TIMER_WARNINGS
	#define AC_MAX_NOP_TIMER_WARNINGS		3
#endif

#if !defined AC_MAX_PING_WARNINGS
	#define AC_MAX_PING_WARNINGS			8
#endif

#if !defined AC_MAX_AIR_WARNINGS
	#define AC_MAX_AIR_WARNINGS				3
#endif

#if !defined AC_MAX_AIR_VEH_WARNINGS
	#define AC_MAX_AIR_VEH_WARNINGS			4
#endif

#if !defined AC_MAX_FLYHACK_VEH_WARNINGS
	#define AC_MAX_FLYHACK_VEH_WARNINGS		3
#endif

#if !defined AC_MAX_FLYHACK_BIKE_WARNINGS
	#define AC_MAX_FLYHACK_BIKE_WARNINGS	5
#endif

#if !defined AC_MAX_CARSHOT_WARNINGS
	#define AC_MAX_CARSHOT_WARNINGS			4
#endif

#if !defined AC_MAX_PRO_AIM_WARNINGS
	#define AC_MAX_PRO_AIM_WARNINGS			2
#endif

#if !defined AC_MAX_AFK_GHOST_WARNINGS
	#define AC_MAX_AFK_GHOST_WARNINGS		2
#endif

#if !defined AC_MAX_RAPID_FIRE_WARNINGS
	#define AC_MAX_RAPID_FIRE_WARNINGS		16
#endif

#if !defined AC_MAX_AUTO_C_WARNINGS
	#define AC_MAX_AUTO_C_WARNINGS			8
#endif

#if !defined AC_MAX_GODMODE_WARNINGS
	#define AC_MAX_GODMODE_WARNINGS			2
#endif

#if !defined AC_MAX_GODMODE_VEH_WARNINGS
	#define AC_MAX_GODMODE_VEH_WARNINGS		2
#endif

#if !defined AC_MAX_SILENT_AIM_WARNINGS
	#define AC_MAX_SILENT_AIM_WARNINGS		2
#endif

#if !defined AC_MAX_FAKE_WEAPON_WARNINGS
	#define AC_MAX_FAKE_WEAPON_WARNINGS		2
#endif

#if !defined AC_MAX_FLYHACK_WARNINGS
	#define AC_MAX_FLYHACK_WARNINGS			2
#endif

#if !defined AC_MAX_SPEEDHACK_VEH_WARNINGS
	#define AC_MAX_SPEEDHACK_VEH_WARNINGS	(1 * AC_SPEEDHACK_VEH_RESET_DELAY)
#endif

#if !defined AC_MAX_SPEEDHACK_WARNINGS
	#define AC_MAX_SPEEDHACK_WARNINGS		4
#endif

#if !defined AC_MAX_CJ_RUN_WARNINGS
	#define AC_MAX_CJ_RUN_WARNINGS			3
#endif

#if !defined AC_MAX_MONEY_WARNINGS
	#define AC_MAX_MONEY_WARNINGS			2
#endif

#define ac_fpublic%0(%1) forward%0(%1); public%0(%1)
#define ac_AbsoluteAngle(%0) ((floatround(%0, floatround_floor) % 360) + floatfract(%0))
#define ac_abs(%0) (((%0) < 0) ? (-(%0)) : ((%0)))

//'ac_ACAllow' contains the default settings that will be set if no config file will be found
//Don't change these values if you already have 'scriptfiles\nex-ac_settings.cfg'
static bool:ac_ACAllow[] =
{
	true,	//0 Anti-AirBreak (onfoot)
	true,	//1 Anti-AirBreak (in vehicle)
	true,	//2 Anti-teleport hack (onfoot)
	true,	//3 Anti-teleport hack (in vehicle)
	true,	//4 Anti-teleport hack (into/between vehicles)
	true,	//5 Anti-teleport hack (vehicle to player)
	true,	//6 Anti-teleport hack (pickups)
	true,	//7 Anti-FlyHack (onfoot)
	true,	//8 Anti-FlyHack (in vehicle)
	true,	//9 Anti-SpeedHack (onfoot)
	true,	//10 Anti-SpeedHack (in vehicle)
	true,	//11 Anti-Health hack (in vehicle)
	true,	//12 Anti-Health hack (onfoot)
	true,	//13 Anti-Armour hack
	true,	//14 Anti-Money hack
	true,	//15 Anti-Weapon hack
	true,	//16 Anti-Ammo hack (add)
	true,	//17 Anti-Ammo hack (infinite)
	true,	//18 Anti-Special actions hack
	true,	//19 Anti-GodMode from bullets (onfoot)
	true,	//20 Anti-GodMode from bullets (in vehicle)
	true,	//21 Anti-Invisible hack
	true,	//22 Anti-lagcomp-spoof
	true,	//23 Anti-Tuning hack
	false,	//24 Anti-Parkour mod
	true,	//25 Anti-Quick turn
	true,	//26 Anti-Rapid fire
	true,	//27 Anti-FakeSpawn
	true,	//28 Anti-FakeKill
	true,	//29 Anti-Pro Aim
	true,	//30 Anti-CJ run
	true,	//31 Anti-CarShot
	true,	//32 Anti-CarJack
	false,	//33 Anti-UnFreeze
	true,	//34 Anti-AFK Ghost
	true,	//35 Anti-Full Aiming

	false,	//36 Anti-Fake NPC
	true,	//37 Anti-Reconnect
	true,	//38 Anti-High ping
	true,	//39 Anti-Dialog hack
	true,	//40 Protection from the sandbox
	true,	//41 Protection against an invalid version
	true,	//42 Anti-Rcon hack

	true,	//43 Anti-Tuning crasher
	true,	//44 Anti-Invalid seat crasher
	true,	//45 Anti-Dialog crasher
	true,	//46 Anti-Attached object crasher
	true,	//47 Anti-Weapon Crasher

	true,	//48 Flood protection connects to one slot
	true,	//49 Anti-flood callback functions
	true,	//50 Anti-flood change seat

	true,	//51 Anti-Ddos

	true	//52 Anti-NOP's
},

bool:ac_NOPAllow[] =
{
	true,	//0 Anti-NOP GivePlayerWeapon
	true,	//1 Anti-NOP SetPlayerAmmo
	true,	//2 Anti-NOP SetPlayerInterior
	true,	//3 Anti-NOP SetPlayerHealth
	true,	//4 Anti-NOP SetVehicleHealth
	true,	//5 Anti-NOP SetPlayerArmour
	true,	//6 Anti-NOP SetPlayerSpecialAction
	true,	//7 Anti-NOP PutPlayerInVehicle
	true,	//8 Anti-NOP TogglePlayerSpectating
	true,	//9 Anti-NOP SpawnPlayer
	true,	//10 Anti-NOP SetPlayerPos
	true	//11 Anti-NOP RemovePlayerFromVehicle
};

static const ac_Mtfc[][] =
{
	{150, 5},	//0 OnDialogResponse
	{800, 2},	//1 OnEnterExitModShop
	{250, 5},	//2 OnPlayerClickMap
	{450, 5},	//3 OnPlayerClickPlayer
	{50, 8},	//4 OnPlayerClickTextDraw
	{400, 5},	//5 OnPlayerCommandText
	{50, 8},	//6 OnPlayerEnterVehicle
	{50, 11},	//7 OnPlayerExitVehicle
	{150, 8},	//8 OnPlayerPickUpPickup
	{150, 8},	//9 OnPlayerRequestClass
	{150, 5},	//10 OnPlayerSelectedMenuRow
	{600, 5},	//11 OnPlayerStateChange
	{450, 2},	//12 OnVehicleMod
	{450, 2},	//13 OnVehiclePaintjob
	{450, 2},	//14 OnVehicleRespray
	{300, 1},	//15 OnVehicleDeath
	{450, 3},	//16 OnPlayerText
	{150, 8},	//17 OnPlayerEnterCheckpoint
	{150, 8},	//18 OnPlayerLeaveCheckpoint
	{150, 5},	//19 OnPlayerRequestSpawn
	{150, 5},	//20 OnPlayerExitedMenu
	{150, 8},	//21 OnPlayerEnterRaceCheckpoint
	{150, 8},	//22 OnPlayerLeaveRaceCheckpoint
	{50, 8},	//23 OnPlayerClickPlayerTextDraw
	{51, 9},	//24 OnVehicleDamageStatusUpdate
	{150, 8},	//25 OnVehicleSirenStateChange
	{150, 5},	//26 OnPlayerSelectObject
	{50, 8}		//27 Cross-public
},

ac_wSlot[] =
{
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10,
	10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5,
	4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
},

ac_vType[] =
{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
	0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3, 2, 5, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0,
	1, 5, 5, 5, 0, 0, 0, 0, 5, 2, 0, 5, 3, 3, 0, 0, 1, 0, 0, 0,
	0, 4, 0, 0, 3, 0, 0, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 1, 1, 1, 0, 0, 0, 0, 0, 1,
	1, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
	0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1, 1, 0, 3, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
},

#if AC_USE_PICKUP_WEAPONS
	ac_wModel[] =
	{
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325,
		326, 342, 343, 344, 0, 0, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356,
		372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371
	},

	ac_pAmmo[] =
	{
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 8, 8, 8, 0, 0, 4, 30, 10, 10, 15,
		10, 10, 60, 60, 80, 80, 60, 20, 10, 4, 3,
		100, 500, 5, 1, 500, 500, 36, 1, 1, 1
	},
#endif

#if AC_USE_TUNING_GARAGES
	ac_cPrice[] =
	{
		400, 550, 200, 250, 100, 150, 80, 500, 500, 200, 1000, 220, 250, 100, 400,
		500, 200, 500, 350, 300, 250, 200, 150, 350, 50, 1000, 480, 480, 770, 680, 370,
		370, 170, 120, 790, 150, 500, 690, 190, 390, 500, 390, 1000, 500, 500, 510, 710,
		670, 530, 810, 620, 670, 530, 130, 210, 230, 520, 430, 620, 720, 530, 180, 550, 430,
		830, 850, 750, 250, 200, 550, 450, 550, 450, 1100, 1030, 980, 1560, 1620, 1200,
		1030, 900, 1230, 820, 1560, 1350, 770, 100, 1500, 150, 650, 450, 100, 750,
		350, 450, 350, 1000, 620, 1140, 1000, 940, 780, 830, 3250, 1610, 1540, 780, 780, 780,
		1610, 1540, 0, 0, 3340, 3250, 2130, 2050, 2040, 780, 940, 780, 940, 780, 860,
		780, 1120, 3340, 3250, 3340, 1650, 3380, 3290, 1590, 830, 800, 1500, 1000, 800,
		580, 470, 870, 980, 150, 150, 100, 100, 490, 600, 890, 1000, 1090, 840, 910,
		1200, 1030, 1030, 920, 930, 550, 1050, 1050, 950, 650, 450, 550, 850, 950,
		850, 950, 970, 880, 990, 900, 950, 1000, 900, 1000, 900, 2050, 2150, 2130,
		2050, 2130, 2040, 2150, 2040, 2095, 2175, 2080, 2200, 1200, 1040, 940, 1100
	},
#endif

#if AC_USE_AMMUNATIONS
	ac_AmmuNationInfo[][] =
	{
		{200, 30}, {600, 30}, {1200, 15},
		{600, 15}, {800, 12}, {1000, 10},
		{500, 60}, {2000, 90}, {3500, 120},
		{4500, 150}, {300, 60}
	},

	Float:ac_AmmuNations[][] =
	{
		{296.5541, -38.5138, 1001.5156},
		{295.7008, -80.8109, 1001.5156},
		{290.1963, -109.7721, 1001.5156},
		{312.2592, -166.1385, 999.601}
	},
#endif

#if AC_USE_RESTAURANTS
	Float:ac_Restaurants[][] =
	{
		{374.0, -119.641, 1001.4922},
		{368.789, -6.857, 1001.8516},
		{375.566, -68.222, 1001.5151}
	},
#endif

#if AC_USE_PAYNSPRAY
	Float:ac_PayNSpray[][] =
	{
		{2064.2842, -1831.4736, 13.5469},
		{-2425.7822, 1021.1392, 50.3977},
		{-1420.5195, 2584.2305, 55.8433},
		{487.6401, -1739.9479, 11.1385},
		{1024.8651, -1024.087, 32.1016},
		{-1904.7019, 284.5968, 41.0469},
		{1975.2384, 2162.5088, 11.0703},
		{2393.4456, 1491.5537, 10.5616},
		{720.0854, -455.2807, 16.3359},
		{-99.9417, 1117.9048, 19.7417}
	},
#endif

#if AC_USE_VENDING_MACHINES
	Float:ac_vMachines[][] =
	{
		{-862.82, 1536.6, 21.98},
		{2271.72, -76.46, 25.96},
		{1277.83, 372.51, 18.95},
		{662.42, -552.16, 15.71},
		{201.01, -107.61, 0.89},
		{-253.74, 2597.95, 62.24},
		{-253.74, 2599.75, 62.24},
		{-76.03, 1227.99, 19.12},
		{-14.7, 1175.35, 18.95},
		{-1455.11, 2591.66, 55.23},
		{2352.17, -1357.15, 23.77},
		{2325.97, -1645.13, 14.21},
		{2139.51, -1161.48, 23.35},
		{2153.23, -1016.14, 62.23},
		{1928.73, -1772.44, 12.94},
		{1154.72, -1460.89, 15.15},
		{2480.85, -1959.27, 12.96},
		{2060.11, -1897.64, 12.92},
		{1729.78, -1943.04, 12.94},
		{1634.1, -2237.53, 12.89},
		{1789.21, -1369.26, 15.16},
		{-2229.18, 286.41, 34.7},
		{2319.99, 2532.85, 10.21},
		{2845.72, 1295.04, 10.78},
		{2503.14, 1243.69, 10.21},
		{2647.69, 1129.66, 10.21},
		{-2420.21, 984.57, 44.29},
		{-2420.17, 985.94, 44.29},
		{2085.77, 2071.35, 10.45},
		{1398.84, 2222.6, 10.42},
		{1659.46, 1722.85, 10.21},
		{1520.14, 1055.26, 10.0},
		{-1980.78, 142.66, 27.07},
		{-2118.96, -423.64, 34.72},
		{-2118.61, -422.41, 34.72},
		{-2097.27, -398.33, 34.72},
		{-2092.08, -490.05, 34.72},
		{-2063.27, -490.05, 34.72},
		{-2005.64, -490.05, 34.72},
		{-2034.46, -490.05, 34.72},
		{-2068.56, -398.33, 34.72},
		{-2039.85, -398.33, 34.72},
		{-2011.14, -398.33, 34.72},
		{-1350.11, 492.28, 10.58},
		{-1350.11, 493.85, 10.58},
		{2222.36, 1602.64, 1000.06},
		{2222.2, 1606.77, 1000.05},
		{2155.9, 1606.77, 1000.05},
		{2155.84, 1607.87, 1000.06},
		{2209.9, 1607.19, 1000.05},
		{2202.45, 1617.0, 1000.06},
		{2209.24, 1621.21, 1000.06},
		{2576.7, -1284.43, 1061.09},
		{330.67, 178.5, 1020.07},
		{331.92, 178.5, 1020.07},
		{350.9, 206.08, 1008.47},
		{361.56, 158.61, 1008.47},
		{371.59, 178.45, 1020.07},
		{374.89, 188.97, 1008.47},
		{-19.03, -57.83, 1003.63},
		{-36.14, -57.87, 1003.63},
		{316.87, -140.35, 998.58},
		{2225.2, -1153.42, 1025.9},
		{-15.1, -140.22, 1003.63},
		{-16.53, -140.29, 1003.63},
		{-35.72, -140.22, 1003.63},
		{373.82, -178.14, 1000.73},
		{379.03, -178.88, 1000.73},
		{495.96, -24.32, 1000.73},
		{500.56, -1.36, 1000.73},
		{501.82, -1.42, 1000.73},
		{-33.87, -186.76, 1003.63},
		{-32.44, -186.69, 1003.63},
		{-16.11, -91.64, 1003.63},
		{-17.54, -91.71, 1003.63}
	},
#endif

#if AC_USE_CASINOS
	Float:ac_Casinos[][] =
	{
		{2241.2878, 1617.1624, 1006.1797, 2.0},
		{2240.9736, 1604.6592, 1006.1797, 6.0},
		{2242.5427, 1592.8726, 1006.1836, 6.0},
		{2230.2124, 1592.1426, 1006.1832, 6.0},
		{2230.4717, 1604.484, 1006.186, 6.0},
		{2230.3298, 1616.9272, 1006.1799, 3.0},
		{2251.9407, 1586.1736, 1006.186, 1.0},
		{2218.6785, 1587.3448, 1006.1749, 1.0},
		{2219.2773, 1591.7467, 1006.1867, 1.0},
		{2218.5408, 1589.3229, 1006.184, 1.0},
		{2218.6477, 1593.6279, 1006.1797, 1.0},
		{2221.926, 1603.8285, 1006.1797, 1.0},
		{2218.5095, 1603.8385, 1006.1797, 1.0},
		{2219.9597, 1603.9216, 1006.1797, 1.0},
		{2216.3054, 1603.7996, 1006.1819, 1.0},
		{2218.731, 1619.8046, 1006.1794, 1.0},
		{2218.9407, 1617.8413, 1006.1821, 1.0},
		{2218.668, 1615.4681, 1006.1797, 1.0},
		{2218.6418, 1613.2629, 1006.1797, 1.0},
		{2252.4272, 1589.8412, 1006.1797, 5.0},
		{2252.4229, 1596.6169, 1006.1797, 5.0},
		{2255.1565, 1608.8784, 1006.186, 1.0},
		{2254.8496, 1610.8605, 1006.1797, 1.0},
		{2255.2917, 1612.9167, 1006.1797, 1.0},
		{2255.033, 1614.8892, 1006.1797, 1.0},
		{2255.1213, 1616.8284, 1006.1797, 1.0},
		{2255.2161, 1618.8005, 1006.1797, 1.0},
		{2268.5281, 1606.4894, 1006.1797, 1.0},
		{2270.4922, 1606.8539, 1006.1797, 1.0},
		{2272.5693, 1606.4473, 1006.1797, 1.0},
		{2274.5391, 1607.0122, 1006.1797, 1.0},
		{2271.8447, 1586.1633, 1006.1797, 1.0},
		{2261.4844, 1586.1724, 1006.1797, 1.0},
		{2257.4507, 1589.6555, 1006.1797, 5.0},
		{2267.8994, 1589.8672, 1006.1797, 5.0},
		{2262.8486, 1590.026, 1006.1797, 5.0},
		{2272.6458, 1589.7704, 1006.1797, 5.0},
		{2272.6533, 1596.5682, 1006.1797, 5.0},
		{2270.4895, 1596.4606, 1006.1797, 5.0},
		{2265.4441, 1596.4299, 1006.1797, 5.0},
		{2260.0308, 1596.7987, 1006.1797, 5.0},
		{2254.9907, 1596.241, 1006.1797, 5.0},
		{1956.9524, 988.2533, 992.4688, 2.0},
		{1961.6155, 993.0375, 992.4688, 2.0},
		{1963.7998, 998.4406, 992.4745, 2.0},
		{1936.2885, 987.1995, 992.4745, 2.0},
		{1944.9768, 986.3937, 992.4688, 2.0},
		{1940.7397, 990.9521, 992.4609, 2.0},
		{1940.0966, 1005.8996, 992.4688, 6.0},
		{1938.8785, 1014.1768, 992.4688, 6.0},
		{1938.8811, 1021.4434, 992.4688, 6.0},
		{1966.5975, 1006.6469, 992.4745, 6.0},
		{1966.5979, 1014.1024, 992.4688, 6.0},
		{1939.8351, 1029.912, 992.4688, 6.0},
		{1956.854, 1047.3718, 992.4688, 6.0},
		{1961.356, 1042.8112, 992.4688, 6.0},
		{1963.811, 1037.1263, 992.4745, 6.0},
		{1961.733, 1025.8929, 992.4688, 10.0},
		{1961.708, 1010.3194, 992.4688, 10.0},
		{1966.5989, 1029.7954, 992.4745, 6.0},
		{1961.4139, 1017.8281, 992.4688, 10.0},
		{1966.5985, 1021.7686, 992.4688, 6.0},
		{1128.7106, -1.9779, 1000.6797, 1.0},
		{1125.2388, 1.61, 1000.6797, 1.0},
		{1125.1249, -5.0489, 1000.6797, 1.0},
		{1127.4139, 3.0199, 1000.6797, 1.0},
		{1135.0634, -3.8695, 1000.6797, 1.0},
		{1135.0861, 0.6107, 1000.6797, 1.0},
		{1132.8943, -1.7139, 1000.6797, 1.0},
		{1125.3727, 3.0315, 1000.6797, 1.0},
		{1119.0272, -1.4916, 1000.6924, 1.0}
	},
#endif

ac_MaxPassengers[] =
{
	0x10331113, 0x11311131, 0x11331313, 0x80133301, 0x1381F110,
	0x10311103, 0x10001F10, 0x11113311, 0x13113311, 0x31101100,
	0x30002301, 0x11031311, 0x11111331, 0x10013111, 0x01131100,
	0x11111110, 0x11100031, 0x11130221, 0x33113311, 0x11111101,
	0x33101133, 0x10100550, 0x03133111, 0xFF11113F, 0x13330111,
	0xFF131111, 0x0000FF3F
},

ac_vMods[] =
{
	0x033C2700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x021A27FA, 0x00000000, 0x00FFFE00,
	0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023B2785, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02BC4703, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03BA278A, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x028E078A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02310744, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x0228073A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02BD4701, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023A2780, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x0228077A, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x027A27CA, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x0282278A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x023E07C0, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x03703730, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x031D2775, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02BE4788, 0x00000000, 0x00FFFE00,
	0x00000007, 0x0003C000, 0x00000000, 0x02010771, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029A0FCE, 0x00000000, 0x00FFFE00, 0x00000007, 0x0000C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x03382700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x023F8795, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029F078C, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x029627EA, 0x00000000, 0x00FFFE00,
	0x00000007, 0x0003C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x0236C782, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029E1FCA, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0xFC000437, 0x00000000, 0x021C0000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x03FE6007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00001B87, 0x00000001, 0x01E00000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x039E07D2, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x023CC700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00030000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x038E07D6, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x023D0709, 0x00000000, 0x00FFFE00, 0x00000007, 0x0000C000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x029E1F8A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x029C077A, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000, 0x02BD076C, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0xFFFFFE00, 0x00000007, 0x00000000, 0x000001F8,
	0x02000700, 0x00000000, 0x00FFFFFE, 0x00000007, 0xC0000000, 0x00002007, 0xFE000700, 0x00000003, 0x00FFFE00,
	0x00000007, 0x00003C00, 0x00000600, 0xCE000700, 0xFF800000, 0x00FFFE01, 0x00000007, 0x3C000000, 0x00000000,
	0x02000700, 0x000003FC, 0x00FFFE00, 0x00000007, 0x003C0000, 0x00001800, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x007FE000, 0x00FFFE00, 0x00000007, 0x03C00000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000047, 0x0000003E, 0x3C000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00001C00, 0x00FFFE00,
	0x0000000F, 0x00000000, 0x0003C000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x000003C0, 0xC0000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x029607C2, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x03FFE7CF, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x031727F1, 0x00000000, 0x00FFFE00, 0x00000007, 0x00030000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x025627F0, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x039E07C2, 0x00000000, 0x00FFFE00, 0x00000007, 0x0003C000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000,
	0x02000700, 0x00000000, 0x00FFFE00, 0x00000007, 0x00000000, 0x00000000, 0x02000700, 0x00000000, 0x00FFFE00,
	0x00000007, 0x00000000, 0x00000000
};

static stock const Float:ac_wRange[] =
{
	25.0, 25.0, 25.0, 30.0, 25.0, 35.0,
	25.0, 35.0, 40.0, 40.0, 25.0, 55.0,
	50.0, 50.0, 50.0, 4.0, 65.0
};

enum acInfo
{
	Float:acPosX,
	Float:acPosY,
	Float:acPosZ,
	Float:acDropJpX,
	Float:acDropJpY,
	Float:acDropJpZ,
	Float:acSpawnPosX,
	Float:acSpawnPosY,
	Float:acSpawnPosZ,
	Float:acSetVehHealth,
	Float:acLastPosX,
	Float:acLastPosY,
	Float:acSetPosX,
	Float:acSetPosY,
	Float:acSetPosZ,
	acSpeed,
	acHealth,
	acArmour,
	acMoney,
	acLastShot,
	acLastWeapon,
	acEnterVeh,
	acKickVeh,
	acVeh,
	acSeat,
	acDialog,
	acNextDialog,
	acInt,
	acAnim,
	acDmgRes,
	acSpecAct,
	acNextSpecAct,
	acLastSpecAct,
	acLastPickup,
	acReloadTick,
	acShotTick,
	acSpawnTick,
	acTimerTick,
	acSetPosTick,
	acUpdateTick,
	acEnterVehTick,
	acSpawnWeapon1,
	acSpawnWeapon2,
	acSpawnWeapon3,
	acSpawnAmmo1,
	acSpawnAmmo2,
	acSpawnAmmo3,
	acSpawnRes,
	acIssuerID,
	acTimerID,
	acKickTimerID,
	acParachute,
	acIntRet,
	acKicked,
	acIp[16],
	acSet[13],
	acGtc[18],
	acWeapon[13],
	acAmmo[13],
	acSetWeapon[13],
	acGiveAmmo[13],
	acGtcSetWeapon[13],
	acGtcGiveAmmo[13],
	acNOPCount[12],
	acCheatCount[21],
	acCall[sizeof ac_Mtfc],
	acFloodCount[sizeof ac_Mtfc],
	bool:acNOPAllow[sizeof ac_NOPAllow],
	bool:acACAllow[sizeof ac_ACAllow],
	bool:acStuntBonus,
	bool:acModShop,
	bool:acUnFrozen,
	bool:acOnline,
	bool:acDeathRes,
	bool:acVehDmgRes,
	bool:acSpawned,
	bool:acDead,
	bool:acTpToZ,
	bool:acIntEnterExits,
	bool:acSpec
}

enum acVehInfo
{
	Float:acVelX,
	Float:acVelY,
	Float:acVelZ,
	Float:acPosX,
	Float:acPosY,
	Float:acPosZ,
	Float:acSpawnPosX,
	Float:acSpawnPosY,
	Float:acSpawnPosZ,
	Float:acSpawnZAngle,
	Float:acPosDiff,
	Float:acZAngle,
	Float:acHealth,
	acLastSpeed,
	acSpeedDiff,
	acDriver,
	acInt,
	acPaintJob,
	bool:acSpawned
}

enum acPickInfo
{
	Float:acPosX,
	Float:acPosY,
	Float:acPosZ,
	acType,
	acWeapon
}

static
	Float:ac_ClassPos[AC_MAX_CLASSES][3],
	ac_ClassWeapon[AC_MAX_CLASSES][3][2],

	ac_sInfo[6],

	ACInfo[MAX_PLAYERS][acInfo],
	ACVehInfo[MAX_VEHICLES][acVehInfo],
	ACPickInfo[MAX_PICKUPS][acPickInfo],

	bool:ac_IntEnterExits = true,
	bool:ac_StuntBonus = true,
	bool:ac_LagCompMode,
	#if !AC_USE_QUERY
		bool:ac_QueryEnable,
	#endif
	bool:ac_RconEnable,
	bool:ac_PedAnims;

static stock bool:ac_VehFriendlyFire;

ac_fpublic ac_AddStaticVehicle(vehicleid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle)
{
	ACVehInfo[vehicleid][acInt] =
	ACVehInfo[vehicleid][acLastSpeed] =
	ACVehInfo[vehicleid][acSpeedDiff] = 0;
	ACVehInfo[vehicleid][acPaintJob] = 3;
	ACVehInfo[vehicleid][acSpawned] = true;
	ACVehInfo[vehicleid][acHealth] = 1000.0;
	ACVehInfo[vehicleid][acPosDiff] =
	ACVehInfo[vehicleid][acVelX] =
	ACVehInfo[vehicleid][acVelY] =
	ACVehInfo[vehicleid][acVelZ] = 0.0;
	ACVehInfo[vehicleid][acSpawnPosX] =
	ACVehInfo[vehicleid][acPosX] = spawn_x;
	ACVehInfo[vehicleid][acSpawnPosY] =
	ACVehInfo[vehicleid][acPosY] = spawn_y;
	ACVehInfo[vehicleid][acSpawnPosZ] =
	ACVehInfo[vehicleid][acPosZ] = spawn_z;
	ACVehInfo[vehicleid][acSpawnZAngle] =
	ACVehInfo[vehicleid][acZAngle] = z_angle;
	ACVehInfo[vehicleid][acDriver] = INVALID_PLAYER_ID;
	return 1;
}

ac_fpublic ac_CreateVehicle(vehicleid, ac_vehicletype, Float:x, Float:y, Float:z, Float:rotation)
{
	ACVehInfo[vehicleid][acInt] =
	ACVehInfo[vehicleid][acLastSpeed] =
	ACVehInfo[vehicleid][acSpeedDiff] = 0;
	ACVehInfo[vehicleid][acPaintJob] = 3;
	ACVehInfo[vehicleid][acHealth] = 1000.0;
	ACVehInfo[vehicleid][acPosDiff] =
	ACVehInfo[vehicleid][acVelX] =
	ACVehInfo[vehicleid][acVelY] =
	ACVehInfo[vehicleid][acVelZ] = 0.0;
	ACVehInfo[vehicleid][acSpawnPosX] =
	ACVehInfo[vehicleid][acPosX] = x;
	ACVehInfo[vehicleid][acSpawnPosY] =
	ACVehInfo[vehicleid][acPosY] = y;
	ACVehInfo[vehicleid][acSpawnPosZ] =
	ACVehInfo[vehicleid][acPosZ] = z;
	ACVehInfo[vehicleid][acSpawnZAngle] =
	ACVehInfo[vehicleid][acZAngle] = rotation;
	if(!(569 <= ac_vehicletype <= 570)) ACVehInfo[vehicleid][acSpawned] = true;
	ACVehInfo[vehicleid][acDriver] = INVALID_PLAYER_ID;
	return 1;
}

ac_fpublic ac_AddPlayerClass(ac_classid, Float:ac_spawn_x, Float:ac_spawn_y, Float:ac_spawn_z, ac_weapon1, ac_weapon1_ammo, ac_weapon2, ac_weapon2_ammo, ac_weapon3, ac_weapon3_ammo)
{
	if(0 <= ac_classid < AC_MAX_CLASSES)
	{
		#undef AC_MAX_CLASSES
		ac_ClassPos[ac_classid][0] = ac_spawn_x;
		ac_ClassPos[ac_classid][1] = ac_spawn_y;
		ac_ClassPos[ac_classid][2] = ac_spawn_z;
		ac_ClassWeapon[ac_classid][0][0] = ac_weapon1;
		ac_ClassWeapon[ac_classid][0][1] = ac_weapon1_ammo;
		ac_ClassWeapon[ac_classid][1][0] = ac_weapon2;
		ac_ClassWeapon[ac_classid][1][1] = ac_weapon2_ammo;
		ac_ClassWeapon[ac_classid][2][0] = ac_weapon3;
		ac_ClassWeapon[ac_classid][2][1] = ac_weapon3_ammo;
	}
	return 1;
}

ac_fpublic ac_SetSpawnInfo(playerid, ac_team, ac_skin, Float:ac_x, Float:ac_y, Float:ac_z, Float:ac_rotation, ac_weapon1, ac_weapon1_ammo, ac_weapon2, ac_weapon2_ammo, ac_weapon3, ac_weapon3_ammo)
{
	if(!SetSpawnInfo(playerid, ac_team, ac_skin, ac_x, ac_y, ac_z, ac_rotation, ac_weapon1, ac_weapon1_ammo, ac_weapon2, ac_weapon2_ammo, ac_weapon3, ac_weapon3_ammo)) return 0;
	ACInfo[playerid][acSpawnPosX] = ac_x;
	ACInfo[playerid][acSpawnPosY] = ac_y;
	ACInfo[playerid][acSpawnPosZ] = ac_z;
	ACInfo[playerid][acSpawnWeapon1] = ac_weapon1;
	ACInfo[playerid][acSpawnAmmo1] = ac_weapon1_ammo;
	ACInfo[playerid][acSpawnWeapon2] = ac_weapon2;
	ACInfo[playerid][acSpawnAmmo2] = ac_weapon2_ammo;
	ACInfo[playerid][acSpawnWeapon3] = ac_weapon3;
	ACInfo[playerid][acSpawnAmmo3] = ac_weapon3_ammo;
	return 1;
}

ac_fpublic ac_AddStaticPickup(pickupid, ac_model, ac_type, Float:ac_X, Float:ac_Y, Float:ac_Z)
{
	#if AC_USE_PICKUP_WEAPONS
		ACPickInfo[pickupid][acWeapon] = 0;
		switch(ac_type)
		{
			case 2, 3, 15, 22:
			{
				switch(ac_model)
				{
					case 370: ACPickInfo[pickupid][acType] = 2;
					case 1240: ACPickInfo[pickupid][acType] = 3;
					case 1242: ACPickInfo[pickupid][acType] = 4;
					case 321..326, 331, 333..339, 341..353, 355..369, 371, 372:
					{
						for(new ac_i = 46; ac_i >= 0; --ac_i)
						{
							if(ac_wModel[ac_i] == ac_model)
							{
								ACPickInfo[pickupid][acType] = 1;
								ACPickInfo[pickupid][acWeapon] = ac_i;
								break;
							}
						}
					}
				}
			}
		}
	#endif
	ACPickInfo[pickupid][acPosX] = ac_X;
	ACPickInfo[pickupid][acPosY] = ac_Y;
	ACPickInfo[pickupid][acPosZ] = ac_Z;
	return 1;
}

ac_fpublic ac_CreatePickup(pickupid, ac_model, ac_type, Float:ac_X, Float:ac_Y, Float:ac_Z)
{
	#if AC_USE_PICKUP_WEAPONS
		ACPickInfo[pickupid][acWeapon] = 0;
		switch(ac_type)
		{
			case 2, 3, 15, 22:
			{
				switch(ac_model)
				{
					case 370: ACPickInfo[pickupid][acType] = 2;
					case 1240: ACPickInfo[pickupid][acType] = 3;
					case 1242: ACPickInfo[pickupid][acType] = 4;
					case 321..326, 331, 333..339, 341..353, 355..369, 371, 372:
					{
						for(new ac_i = 46; ac_i >= 0; --ac_i)
						{
							if(ac_wModel[ac_i] == ac_model)
							{
								ACPickInfo[pickupid][acType] = 1;
								ACPickInfo[pickupid][acWeapon] = ac_i;
								break;
							}
						}
					}
				}
			}
		}
	#endif
	ACPickInfo[pickupid][acPosX] = ac_X;
	ACPickInfo[pickupid][acPosY] = ac_Y;
	ACPickInfo[pickupid][acPosZ] = ac_Z;
	return 1;
}

#if AC_USE_PICKUP_WEAPONS\
	&& defined Streamer_SetIntData
	#if defined STREAMER_ENABLE_TAGS
		ac_fpublic ac_CreateDynamicPickup(STREAMER_TAG_PICKUP:pickupid, ac_modelid, ac_type)
	#else
		ac_fpublic ac_CreateDynamicPickup(pickupid, ac_modelid, ac_type)
	#endif
	{
		Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 0);
		switch(ac_type)
		{
			case 2, 3, 15, 22:
			{
				switch(ac_modelid)
				{
					case 370: Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 2);
					case 1240: Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 3);
					case 1242: Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, 4);
					case 321..326, 331, 333..339, 341..353, 355..369, 371, 372:
					{
						for(new ac_i = 46; ac_i >= 0; --ac_i)
						{
							if(ac_wModel[ac_i] == ac_modelid)
							{
								Streamer_SetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID, ac_i + 100);
								break;
							}
						}
					}
				}
			}
		}
		return 1;
	}
#endif

#if defined Streamer_UpdateEx
	stock ac_Streamer_UpdateEx(playerid, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, type = -1, compensatedtime = -1, freezeplayer = 1)
	{
		if(!Streamer_UpdateEx(playerid, x, y, z, worldid, interiorid, type, compensatedtime, freezeplayer)) return 0;
		if(compensatedtime >= 0)
		{
			ACInfo[playerid][acSet][8] = 4;
			ACInfo[playerid][acNOPCount][10] = 0;
			ACInfo[playerid][acSetPosX] = x;
			ACInfo[playerid][acSetPosY] = y;
			ACInfo[playerid][acSetPosZ] = z;
			ACInfo[playerid][acSetPosTick] =
			ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
		}
		return 1;
	}

	#if defined _ALS_Streamer_UpdateEx
		#undef Streamer_UpdateEx
	#else
		#define _ALS_Streamer_UpdateEx
	#endif
	#define Streamer_UpdateEx ac_Streamer_UpdateEx
#endif

stock ac_GetPlayerVersion(playerid, version[], len)
{
	new ac_ret = GetPlayerVersion(playerid, version, len);
	for(new ac_i = ac_ret - 1; ac_i >= 0; --ac_i)
	{
		if(version[ac_i] == '%')
		{
			strdel(version, ac_i, ac_i + 1);
			ac_ret--;
		}
	}
	return ac_ret;
}

#if defined _ALS_GetPlayerVersion
	#undef GetPlayerVersion
#else
	#define _ALS_GetPlayerVersion
#endif
#define GetPlayerVersion ac_GetPlayerVersion

stock ac_GetPlayerFacingAngle(playerid, &Float:ang)
{
	if(!GetPlayerFacingAngle(playerid, ang)) return 0;
	if(ang != ang) ang = 0.0;
	ang = ac_AbsoluteAngle(ang);
	return 1;
}

#if defined _ALS_GetPlayerFacingAngle
	#undef GetPlayerFacingAngle
#else
	#define _ALS_GetPlayerFacingAngle
#endif
#define GetPlayerFacingAngle ac_GetPlayerFacingAngle

stock ac_GetVehicleZAngle(vehicleid, &Float:z_angle)
{
	if(!GetVehicleZAngle(vehicleid, z_angle)) return 0;
	if(z_angle != z_angle) z_angle = 0.0;
	z_angle = ac_AbsoluteAngle(z_angle);
	#undef ac_AbsoluteAngle
	return 1;
}

#if defined _ALS_GetVehicleZAngle
	#undef GetVehicleZAngle
#else
	#define _ALS_GetVehicleZAngle
#endif
#define GetVehicleZAngle ac_GetVehicleZAngle

ac_fpublic ac_DestroyVehicle(vehicleid)
{
	if(!DestroyVehicle(vehicleid)) return 0;
	ACVehInfo[vehicleid][acSpawned] = false;
	return 1;
}

ac_fpublic ac_DestroyPickup(pickupid)
{
	if(!DestroyPickup(pickupid)) return 0;
	ACPickInfo[pickupid][acType] = 0;
	return 1;
}

ac_fpublic ac_DisableInteriorEnterExits()
{
	ac_IntEnterExits = false;
	return DisableInteriorEnterExits();
}

ac_fpublic ac_UsePlayerPedAnims()
{
	ac_PedAnims = true;
	return UsePlayerPedAnims();
}

#if defined EnableVehicleFriendlyFire
	ac_fpublic ac_EnableVehicleFriendlyFire()
	{
		ac_VehFriendlyFire = true;
		return EnableVehicleFriendlyFire();
	}
#endif

ac_fpublic ac_EnableStuntBonusForAll(enable)
{
	ac_StuntBonus = !!enable;
	#if defined foreach
		foreach(new ac_i : Player) ACInfo[ac_i][acStuntBonus] = ac_StuntBonus;
	#else
		#if defined GetPlayerPoolSize
			for(new ac_i = GetPlayerPoolSize(); ac_i >= 0; --ac_i)
		#else
			for(new ac_i = MAX_PLAYERS - 1; ac_i >= 0; --ac_i)
		#endif
		{
			if(IsPlayerConnected(ac_i)) ACInfo[ac_i][acStuntBonus] = ac_StuntBonus;
		}
	#endif
	return EnableStuntBonusForAll(enable);
}

ac_fpublic ac_EnableStuntBonusForPlayer(playerid, enable)
{
	if(!EnableStuntBonusForPlayer(playerid, enable)) return 0;
	ACInfo[playerid][acStuntBonus] = !!enable;
	return 1;
}

ac_fpublic ac_ShowPlayerDialog(playerid, ac_dialogid)
{
	ACInfo[playerid][acDialog] = ac_dialogid;
	return 1;
}

ac_fpublic ac_fs_ShowPlayerDialog(playerid, ac_dialogid)
{
	ACInfo[playerid][acNextDialog] = ac_dialogid;
	return 1;
}

ac_fpublic ac_TogglePlayerControllable(playerid, toggle)
{
	if(!TogglePlayerControllable(playerid, toggle)) return 0;
	ACInfo[playerid][acUnFrozen] = !!toggle;
	return 1;
}

ac_fpublic ac_TogglePlayerSpectating(playerid, toggle)
{
	if(!TogglePlayerSpectating(playerid, toggle)) return 0;
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || ACInfo[playerid][acSet][6] != -1)
	{
		if(!toggle)
		{
			if(ACInfo[playerid][acDead]) ACInfo[playerid][acSet][7] = 4;
			else
			{
				ACInfo[playerid][acSet][3] =
				ACInfo[playerid][acSet][4] =
				ACInfo[playerid][acSet][6] =
				ACInfo[playerid][acSet][8] =
				ACInfo[playerid][acSet][9] =
				ACInfo[playerid][acNextSpecAct] = -1;
				for(new ac_i = 12; ac_i >= 0; --ac_i)
				{
					ACInfo[playerid][acSetWeapon][ac_i] = -1;
					ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
				}
				ACInfo[playerid][acTpToZ] = false;
				ACInfo[playerid][acUnFrozen] = true;
				ACInfo[playerid][acSet][7] = 1;
			}
			ACInfo[playerid][acSpawnRes]++;
			ACInfo[playerid][acSpec] = false;
			ACInfo[playerid][acSpawnTick] = ACInfo[playerid][acNOPCount][9] = 0;
			ACInfo[playerid][acGtc][13] = GetTickCount() + 2650;
		}
	}
	else if(toggle)
	{
		ACInfo[playerid][acSet][6] = 1;
		ACInfo[playerid][acNOPCount][8] = 0;
		ACInfo[playerid][acGtc][12] = GetTickCount() + 2650;
	}
	return 1;
}

ac_fpublic ac_SpawnPlayer(playerid)
{
	if(!SpawnPlayer(playerid)) return 0;
	if(ACInfo[playerid][acDead]) ACInfo[playerid][acSet][7] = 5;
	else
	{
		ACInfo[playerid][acSet][3] =
		ACInfo[playerid][acSet][4] =
		ACInfo[playerid][acSet][8] =
		ACInfo[playerid][acSet][9] =
		ACInfo[playerid][acNextSpecAct] = -1;
		for(new ac_i = 12; ac_i >= 0; --ac_i)
		{
			ACInfo[playerid][acSetWeapon][ac_i] = -1;
			ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
		}
		ACInfo[playerid][acTpToZ] = false;
		ACInfo[playerid][acUnFrozen] = true;
		ACInfo[playerid][acSet][7] = 2;
	}
	ACInfo[playerid][acSpawnRes]++;
	ACInfo[playerid][acSpawnTick] = ACInfo[playerid][acNOPCount][9] = 0;
	ACInfo[playerid][acGtc][13] = GetTickCount() + 2650;
	return 1;
}

ac_fpublic ac_SetPlayerHealth(playerid, Float:ac_health)
{
	if(!SetPlayerHealth(playerid, ac_health)) return 0;
	if(ac_health < 0.0) ac_health = 0.0;
	ACInfo[playerid][acNOPCount][3] = 0;
	ACInfo[playerid][acSet][1] = floatround(ac_health, floatround_tozero);
	ACInfo[playerid][acGtc][3] = GetTickCount() + 2650;
	return 1;
}

ac_fpublic ac_SetPlayerArmour(playerid, Float:ac_armour)
{
	if(!SetPlayerArmour(playerid, ac_armour)) return 0;
	if(ac_armour < 0.0) ac_armour = 0.0;
	ACInfo[playerid][acNOPCount][5] = 0;
	ACInfo[playerid][acSet][2] = floatround(ac_armour, floatround_tozero);
	ACInfo[playerid][acGtc][5] = GetTickCount() + 2650;
	return 1;
}

ac_fpublic ac_GivePlayerWeapon(playerid, ac_weaponid, ac_ammo)
{
	if(0 <= ac_weaponid <= 18 || 22 <= ac_weaponid <= 46)
	{
		new ac_s = ac_wSlot[ac_weaponid];
		ACInfo[playerid][acNOPCount][0] = ACInfo[playerid][acNOPCount][1] = 0;
		if(16 <= ac_weaponid <= 18 || 22 <= ac_weaponid <= 43)
		{
			if(3 <= ac_s <= 5 || (ACInfo[playerid][acSetWeapon][ac_s] == -1
			? ACInfo[playerid][acWeapon][ac_s] : ACInfo[playerid][acSetWeapon][ac_s]) == ac_weaponid)
			{
				ACInfo[playerid][acGiveAmmo][ac_s] =
				(ACInfo[playerid][acGiveAmmo][ac_s] == -65535 ? ACInfo[playerid][acAmmo][ac_s]
				: ACInfo[playerid][acGiveAmmo][ac_s]) + ac_ammo;
			}
			else ACInfo[playerid][acGiveAmmo][ac_s] = ac_ammo;
			if(ACInfo[playerid][acGiveAmmo][ac_s] < -32768) ac_ammo = ACInfo[playerid][acGiveAmmo][ac_s] = -32768;
			else if(ACInfo[playerid][acGiveAmmo][ac_s] > 32767) ac_ammo = ACInfo[playerid][acGiveAmmo][ac_s] = 32767;
			ACInfo[playerid][acSetWeapon][ac_s] = ACInfo[playerid][acSet][3] = ac_weaponid;
			ACInfo[playerid][acReloadTick] = 0;
		}
		else
		{
			ACInfo[playerid][acGiveAmmo][ac_s] = -65535;
			ACInfo[playerid][acSetWeapon][ac_s] = ACInfo[playerid][acSet][3] = ac_weaponid;
		}
		ACInfo[playerid][acGtcGiveAmmo][ac_s] =
		ACInfo[playerid][acGtcSetWeapon][ac_s] = ACInfo[playerid][acGtc][2] = GetTickCount() + 2650;
	}
	return GivePlayerWeapon(playerid, ac_weaponid, ac_ammo);
}

ac_fpublic ac_SetPlayerAmmo(playerid, ac_weaponslot, ac_ammo)
{
	if(ac_ammo < -32768) ac_ammo = -32768;
	else if(ac_ammo > 32767) ac_ammo = 32767;
	if(16 <= ac_weaponslot <= 43)
	{
		new ac_s = ac_wSlot[ac_weaponslot];
		if(ACInfo[playerid][acWeapon][ac_s] > 0 || ACInfo[playerid][acSetWeapon][ac_s] > 0)
		{
			ACInfo[playerid][acNOPCount][1] = 0;
			ACInfo[playerid][acGiveAmmo][ac_s] = ac_ammo;
			ACInfo[playerid][acGtcGiveAmmo][ac_s] = GetTickCount() + 2650;
		}
	}
	return SetPlayerAmmo(playerid, ac_weaponslot, ac_ammo);
}

ac_fpublic ac_SetPlayerArmedWeapon(playerid, ac_weaponid)
{
	if(!SetPlayerArmedWeapon(playerid, ac_weaponid)) return 0;
	if(0 <= ac_weaponid <= 18 || 22 <= ac_weaponid <= 46)
	{
		new ac_s = ac_wSlot[ac_weaponid];
		if((ac_weaponid == ACInfo[playerid][acWeapon][ac_s] || ac_weaponid == ACInfo[playerid][acSetWeapon][ac_s]) &&
		(ACInfo[playerid][acAmmo][ac_s] != 0 || ACInfo[playerid][acGiveAmmo][ac_s] != 0))
		{
			ACInfo[playerid][acNOPCount][0] = 0;
			ACInfo[playerid][acSet][3] = ac_weaponid;
			ACInfo[playerid][acGtc][2] = GetTickCount() + 2650;
		}
	}
	return 1;
}

ac_fpublic ac_ResetPlayerWeapons(playerid)
{
	if(!ResetPlayerWeapons(playerid)) return 0;
	for(new ac_i = 12; ac_i >= 0; --ac_i)
	{
		ACInfo[playerid][acWeapon][ac_i] = ACInfo[playerid][acAmmo][ac_i] = 0;
		ACInfo[playerid][acSetWeapon][ac_i] = -1;
		ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
	}
	ACInfo[playerid][acSet][3] = -1;
	ACInfo[playerid][acGtc][7] = GetTickCount() + 2650;
	return 1;
}

ac_fpublic ac_GivePlayerMoney(playerid, ac_money)
{
	if(!GivePlayerMoney(playerid, ac_money)) return 0;
	ACInfo[playerid][acNOPCount][11] = AC_MAX_MONEY_WARNINGS;
	ACInfo[playerid][acMoney] += ac_money;
	#undef AC_MAX_MONEY_WARNINGS
	return 1;
}

ac_fpublic ac_ResetPlayerMoney(playerid)
{
	if(!ResetPlayerMoney(playerid)) return 0;
	ACInfo[playerid][acNOPCount][11] = 0;
	ACInfo[playerid][acMoney] = 0;
	return 1;
}

static orig_GetPlayerMoney(playerid) return GetPlayerMoney(playerid);

ac_fpublic ac_SetPlayerSpecialAction(playerid, ac_actionid)
{
	if(!SetPlayerSpecialAction(playerid, ac_actionid)) return 0;
	if(ac_actionid == SPECIAL_ACTION_USEJETPACK || SPECIAL_ACTION_CUFFED <= ac_actionid <= 25 ||
	(ac_actionid == SPECIAL_ACTION_USECELLPHONE || ac_actionid == 68 || SPECIAL_ACTION_DANCE1 <= ac_actionid <= SPECIAL_ACTION_DANCE4) && ACInfo[playerid][acVeh] == 0 ||
	ac_actionid == SPECIAL_ACTION_STOPUSECELLPHONE && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_USECELLPHONE ||
	(ac_actionid == SPECIAL_ACTION_HANDSUP || SPECIAL_ACTION_DRINK_BEER <= ac_actionid <= SPECIAL_ACTION_DRINK_SPRUNK) && ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_ENTER_VEHICLE && ACInfo[playerid][acVeh] == 0 ||
	ac_actionid == SPECIAL_ACTION_NONE && ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_DUCK &&
	ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_ENTER_VEHICLE && ACInfo[playerid][acSpecAct] != SPECIAL_ACTION_HANDSUP)
	{
		ACInfo[playerid][acNOPCount][6] = 0;
		if((ac_actionid == 68 || SPECIAL_ACTION_HANDSUP <= ac_actionid <= SPECIAL_ACTION_USECELLPHONE ||
		SPECIAL_ACTION_DRINK_BEER <= ac_actionid <= 25) && SPECIAL_ACTION_DANCE1 <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_DANCE4 ||
		SPECIAL_ACTION_DRINK_BEER <= ac_actionid <= 25 && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_DUCK ||
		(ac_actionid == SPECIAL_ACTION_NONE || SPECIAL_ACTION_CUFFED <= ac_actionid <= 25) && ACInfo[playerid][acVeh] ||
		SPECIAL_ACTION_CUFFED <= ac_actionid <= 25 && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_ENTER_VEHICLE) ACInfo[playerid][acNextSpecAct] = ac_actionid;
		else
		{
			if(ac_actionid == SPECIAL_ACTION_STOPUSECELLPHONE) ac_actionid = SPECIAL_ACTION_NONE;
			else if(ac_actionid == SPECIAL_ACTION_USEJETPACK || ac_actionid == SPECIAL_ACTION_HANDSUP ||
			ac_actionid == 68 || SPECIAL_ACTION_DANCE1 <= ac_actionid <= SPECIAL_ACTION_DANCE4 ||
			SPECIAL_ACTION_DRINK_BEER <= ac_actionid <= SPECIAL_ACTION_DRINK_SPRUNK) ACInfo[playerid][acNextSpecAct] = ACInfo[playerid][acSpecAct];
			else ACInfo[playerid][acNextSpecAct] = -1;
			ACInfo[playerid][acSet][4] = ac_actionid;
			ACInfo[playerid][acGtc][6] = GetTickCount() + 3250;
		}
	}
	return 1;
}

ac_fpublic ac_SetPlayerInterior(playerid, ac_interiorid)
{
	if(!SetPlayerInterior(playerid, ac_interiorid)) return 0;
	ACInfo[playerid][acNOPCount][2] = 0;
	ACInfo[playerid][acSet][0] = ac_interiorid % 256;
	ACInfo[playerid][acGtc][0] = GetTickCount() + 3250;
	return 1;
}

ac_fpublic ac_SetPlayerPos(playerid, Float:ac_x, Float:ac_y, Float:ac_z)
{
	if(!SetPlayerPos(playerid, ac_x, ac_y, ac_z)) return 0;
	ACInfo[playerid][acSet][8] = 1;
	ACInfo[playerid][acNOPCount][10] = 0;
	ACInfo[playerid][acSetPosX] = ac_x;
	ACInfo[playerid][acSetPosY] = ac_y;
	ACInfo[playerid][acSetPosZ] = ac_z;
	ACInfo[playerid][acSetPosTick] =
	ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
	return 1;
}

ac_fpublic ac_SetPlayerPosFindZ(playerid, Float:ac_x, Float:ac_y, Float:ac_z)
{
	if(!SetPlayerPosFindZ(playerid, ac_x, ac_y, ac_z)) return 0;
	ACInfo[playerid][acSet][8] = 2;
	ACInfo[playerid][acTpToZ] = true;
	ACInfo[playerid][acNOPCount][10] = 0;
	ACInfo[playerid][acSetPosX] = ac_x;
	ACInfo[playerid][acSetPosY] = ac_y;
	ACInfo[playerid][acSetPosTick] =
	ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
	return 1;
}

ac_fpublic ac_SetPlayerVelocity(playerid, Float:ac_X, Float:ac_Y, Float:ac_Z)
{
	if(!SetPlayerVelocity(playerid, ac_X, ac_Y, ac_Z)) return 0;
	ACInfo[playerid][acSpeed] = ac_GetSpeed(ac_X, ac_Y, ac_Z);
	ACInfo[playerid][acGtc][10] = GetTickCount() + 1650;
	return 1;
}

ac_fpublic ac_PutPlayerInVehicle(playerid, ac_vehicleid, ac_seatid)
{
	if(!PutPlayerInVehicle(playerid, ac_vehicleid, ac_seatid)) return 0;
	if(!(SPECIAL_ACTION_DANCE1 <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_DANCE4) &&
	!(SPECIAL_ACTION_DRINK_BEER <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_DRINK_SPRUNK) &&
	GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(ac_vehicleid))
	{
		new ac_model = GetVehicleModel(ac_vehicleid);
		ACInfo[playerid][acNOPCount][7] = 0;
		ACInfo[playerid][acSet][9] = ac_vehicleid;
		if(ac_model == 431 || ac_model == 437 || ac_IsVehicleSeatOccupied(ac_vehicleid, ac_seatid) ||
		ac_seatid > ac_GetMaxPassengers(ac_model)) ACInfo[playerid][acSet][5] = -1;
		else ACInfo[playerid][acSet][5] = ac_seatid;
		ACInfo[playerid][acGtc][1] = GetTickCount() + 2650;
	}
	return 1;
}

ac_fpublic ac_RemovePlayerFromVehicle(playerid)
{
	if(!RemovePlayerFromVehicle(playerid)) return 0;
	ACInfo[playerid][acSet][11] = 1;
	ACInfo[playerid][acGtc][8] = GetTickCount() + 4250;
	return 1;
}

ac_fpublic ac_SetVehiclePos(vehicleid, Float:ac_x, Float:ac_y, Float:ac_z)
{
	if(!SetVehiclePos(vehicleid, ac_x, ac_y, ac_z)) return 0;
	new ac_driver = ACVehInfo[vehicleid][acDriver];
	if(ac_driver != INVALID_PLAYER_ID)
	{
		ACInfo[ac_driver][acSet][8] = 3;
		ACInfo[ac_driver][acNOPCount][10] = 0;
		ACInfo[ac_driver][acSetPosX] = ac_x;
		ACInfo[ac_driver][acSetPosY] = ac_y;
		ACInfo[ac_driver][acSetPosZ] = ac_z;
		ACInfo[ac_driver][acSetPosTick] =
		ACInfo[ac_driver][acGtc][11] = GetTickCount() + 3250;
	}
	return 1;
}

ac_fpublic ac_SetVehicleVelocity(vehicleid, Float:ac_X, Float:ac_Y, Float:ac_Z)
{
	if(!SetVehicleVelocity(vehicleid, ac_X, ac_Y, ac_Z)) return 0;
	new ac_driver = ACVehInfo[vehicleid][acDriver];
	if(ac_driver != INVALID_PLAYER_ID)
	{
		ACVehInfo[vehicleid][acVelX] = ac_X;
		ACVehInfo[vehicleid][acVelY] = ac_Y;
		ACVehInfo[vehicleid][acVelZ] = ac_Z;
		ACInfo[ac_driver][acGtc][9] = GetTickCount() + 1650;
	}
	return 1;
}

ac_fpublic ac_SetVehicleAngularVelocity(vehicleid, Float:ac_X, Float:ac_Y, Float:ac_Z)
{
	if(!SetVehicleAngularVelocity(vehicleid, ac_X, ac_Y, ac_Z)) return 0;
	new ac_driver = ACVehInfo[vehicleid][acDriver];
	if(ac_driver != INVALID_PLAYER_ID)
	{
		ACVehInfo[vehicleid][acVelX] = ac_X;
		ACVehInfo[vehicleid][acVelY] = ac_Y;
		ACVehInfo[vehicleid][acVelZ] = ac_Z;
		ACInfo[ac_driver][acGtc][9] = GetTickCount() + 1650;
	}
	return 1;
}

ac_fpublic ac_LinkVehicleToInterior(vehicleid, ac_interiorid)
{
	if(!LinkVehicleToInterior(vehicleid, ac_interiorid)) return 0;
	ACVehInfo[vehicleid][acInt] = ac_interiorid % 256;
	return 1;
}

ac_fpublic ac_ChangeVehiclePaintjob(vehicleid, ac_paintjobid)
{
	if(GetVehicleModel(vehicleid) > 0) ACVehInfo[vehicleid][acPaintJob] = ac_paintjobid;
	return ChangeVehiclePaintjob(vehicleid, ac_paintjobid);
}

ac_fpublic ac_SetVehicleHealth(vehicleid, Float:ac_health)
{
	if(!SetVehicleHealth(vehicleid, ac_health)) return 0;
	new ac_driver = ACVehInfo[vehicleid][acDriver];
	if(ac_driver != INVALID_PLAYER_ID)
	{
		ACInfo[ac_driver][acNOPCount][4] = 0;
		ACInfo[ac_driver][acSetVehHealth] = ac_health;
		ACInfo[ac_driver][acGtc][4] = GetTickCount() + 2650;
	}
	else ACVehInfo[vehicleid][acHealth] = ac_health;
	return 1;
}

ac_fpublic ac_RepairVehicle(vehicleid)
{
	if(!RepairVehicle(vehicleid)) return 0;
	new ac_driver = ACVehInfo[vehicleid][acDriver];
	if(ac_driver != INVALID_PLAYER_ID)
	{
		ACInfo[ac_driver][acNOPCount][4] = 0;
		ACInfo[ac_driver][acSetVehHealth] = 1000.0;
		ACInfo[ac_driver][acGtc][4] = GetTickCount() + 2650;
	}
	else ACVehInfo[vehicleid][acHealth] = 1000.0;
	return 1;
}

ac_fpublic ac_SetVehicleToRespawn(vehicleid)
{
	new ac_driver = ACVehInfo[vehicleid][acDriver];
	if(ac_driver != INVALID_PLAYER_ID) ACInfo[ac_driver][acGtc][9] = GetTickCount() + 1650;
	return SetVehicleToRespawn(vehicleid);
}

ac_fpublic ac_EnableAntiCheat(code, enable)
{
	if(!(0 <= code < sizeof ac_ACAllow)) return 0;
	if(code == 42)
	{
		if(enable)
		{
			if(!ac_ACAllow[code])
			{
				#if !AC_USE_QUERY
					ac_QueryEnable = !!GetServerVarAsBool("query");
				#endif
				ac_RconEnable = !!GetServerVarAsBool("rcon");
			}
			#if !AC_USE_QUERY
				SendRconCommand("query 0");
			#endif
			SendRconCommand("rcon 0");
		}
		else
		{
			static ac_strtmp[9];
			#if !AC_USE_QUERY
				format(ac_strtmp, sizeof ac_strtmp, "query %b", ac_QueryEnable);
				SendRconCommand(ac_strtmp);
			#endif
			format(ac_strtmp, sizeof ac_strtmp, "rcon %b", ac_RconEnable);
			SendRconCommand(ac_strtmp);
		}
	}
	ac_ACAllow[code] = !!enable;
	if(enable)
	{
		#if defined foreach
			foreach(new ac_i : Player)
		#else
			#if defined GetPlayerPoolSize
				for(new ac_i = GetPlayerPoolSize(); ac_i >= 0; --ac_i)
			#else
				for(new ac_i = MAX_PLAYERS - 1; ac_i >= 0; --ac_i)
			#endif
			{
				if(IsPlayerConnected(ac_i))
		#endif
		{
			ACInfo[ac_i][acACAllow][code] = ac_ACAllow[code];
			switch(code)
			{
				case 7: ACInfo[ac_i][acCheatCount][15] = 0;
				case 8: ACInfo[ac_i][acCheatCount][3] = 0;
				case 9: ACInfo[ac_i][acCheatCount][17] = 0;
				case 10: ACInfo[ac_i][acCheatCount][16] = ACInfo[ac_i][acCheatCount][20] = 0;
				case 15: ACInfo[ac_i][acCheatCount][10] = 0;
				case 17: ACInfo[ac_i][acCheatCount][7] = 0;
				case 19: ACInfo[ac_i][acCheatCount][9] = 0;
				case 20: ACInfo[ac_i][acCheatCount][11] = 0;
				case 23: ACInfo[ac_i][acCheatCount][12] = 0;
				case 26: ACInfo[ac_i][acCheatCount][14] = ACInfo[ac_i][acCheatCount][8] = 0;
				case 29: ACInfo[ac_i][acCheatCount][13] = ACInfo[ac_i][acCheatCount][6] = 0;
				case 30: ACInfo[ac_i][acCheatCount][19] = 0;
				case 31: ACInfo[ac_i][acCheatCount][4] = 0;
				case 34: ACInfo[ac_i][acCheatCount][5] = 0;
				case 38: ACInfo[ac_i][acCheatCount][0] = 0;
				case 47: ACInfo[ac_i][acCheatCount][18] = 0;
			}
		}
		#if !defined foreach
			}
		#endif
	}
	else
	{
		#if defined foreach
			foreach(new ac_i : Player) ACInfo[ac_i][acACAllow][code] = ac_ACAllow[code];
		#else
			#if defined GetPlayerPoolSize
				for(new ac_i = GetPlayerPoolSize(); ac_i >= 0; --ac_i)
			#else
				for(new ac_i = MAX_PLAYERS - 1; ac_i >= 0; --ac_i)
			#endif
			{
				if(IsPlayerConnected(ac_i)) ACInfo[ac_i][acACAllow][code] = ac_ACAllow[code];
			}
		#endif
	}
	return 1;
}

ac_fpublic ac_EnableAntiNOP(nopcode, enable)
{
	if(!(0 <= nopcode < sizeof ac_NOPAllow)) return 0;
	ac_NOPAllow[nopcode] = !!enable;
	#if defined foreach
		foreach(new ac_i : Player) ACInfo[ac_i][acNOPAllow][nopcode] = ac_NOPAllow[nopcode];
	#else
		#if defined GetPlayerPoolSize
			for(new ac_i = GetPlayerPoolSize(); ac_i >= 0; --ac_i)
		#else
			for(new ac_i = MAX_PLAYERS - 1; ac_i >= 0; --ac_i)
		#endif
		{
			if(IsPlayerConnected(ac_i)) ACInfo[ac_i][acNOPAllow][nopcode] = ac_NOPAllow[nopcode];
		}
	#endif
	return 1;
}

ac_fpublic ac_EnableAntiCheatForPlayer(playerid, code, enable)
{
	if(!(0 <= code < sizeof ac_ACAllow)) return 0;
	ACInfo[playerid][acACAllow][code] = !!enable;
	if(enable)
	{
		switch(code)
		{
			case 7: ACInfo[playerid][acCheatCount][15] = 0;
			case 8: ACInfo[playerid][acCheatCount][3] = 0;
			case 9: ACInfo[playerid][acCheatCount][17] = 0;
			case 10: ACInfo[playerid][acCheatCount][16] = ACInfo[playerid][acCheatCount][20] = 0;
			case 15: ACInfo[playerid][acCheatCount][10] = 0;
			case 17: ACInfo[playerid][acCheatCount][7] = 0;
			case 19: ACInfo[playerid][acCheatCount][9] = 0;
			case 20: ACInfo[playerid][acCheatCount][11] = 0;
			case 23: ACInfo[playerid][acCheatCount][12] = 0;
			case 26: ACInfo[playerid][acCheatCount][14] = ACInfo[playerid][acCheatCount][8] = 0;
			case 29: ACInfo[playerid][acCheatCount][13] = ACInfo[playerid][acCheatCount][6] = 0;
			case 30: ACInfo[playerid][acCheatCount][19] = 0;
			case 31: ACInfo[playerid][acCheatCount][4] = 0;
			case 34: ACInfo[playerid][acCheatCount][5] = 0;
			case 38: ACInfo[playerid][acCheatCount][0] = 0;
			case 47: ACInfo[playerid][acCheatCount][18] = 0;
		}
	}
	return 1;
}

ac_fpublic ac_EnableAntiNOPForPlayer(playerid, nopcode, enable)
{
	if(!(0 <= nopcode < sizeof ac_NOPAllow)) return 0;
	ACInfo[playerid][acNOPAllow][nopcode] = !!enable;
	return 1;
}

ac_fpublic ac_IsAntiCheatEnabled(code)
{
	if(!(0 <= code < sizeof ac_ACAllow)) return 0;
	return ac_ACAllow[code];
}

ac_fpublic ac_IsAntiNOPEnabled(nopcode)
{
	if(!(0 <= nopcode < sizeof ac_NOPAllow)) return 0;
	return ac_NOPAllow[nopcode];
}

ac_fpublic ac_IsAntiCheatEnabledForPlayer(playerid, code)
{
	if(!(0 <= code < sizeof ac_ACAllow)) return 0;
	return ACInfo[playerid][acACAllow][code];
}

ac_fpublic ac_IsAntiNOPEnabledForPlayer(playerid, nopcode)
{
	if(!(0 <= nopcode < sizeof ac_NOPAllow)) return 0;
	return ACInfo[playerid][acNOPAllow][nopcode];
}

ac_fpublic ac_AntiCheatGetSpeed(playerid) return ACInfo[playerid][acSpeed];

ac_fpublic ac_AntiCheatGetAnimationIndex(playerid) return ACInfo[playerid][acAnim];

ac_fpublic ac_AntiCheatGetDialog(playerid) return ACInfo[playerid][acDialog];

ac_fpublic ac_AntiCheatGetMoney(playerid) return ACInfo[playerid][acMoney];

ac_fpublic ac_AntiCheatGetEnterVehicle(playerid) return ACInfo[playerid][acEnterVeh];

ac_fpublic ac_AntiCheatGetVehicleID(playerid) return ACInfo[playerid][acVeh];

ac_fpublic ac_AntiCheatGetWeapon(playerid) return ACInfo[playerid][acLastWeapon];

ac_fpublic ac_AntiCheatGetVehicleSeat(playerid) return ACInfo[playerid][acSeat];

ac_fpublic ac_AntiCheatGetSpecialAction(playerid) return ACInfo[playerid][acSpecAct];

ac_fpublic ac_AntiCheatGetLastSpecialActio(playerid) return ACInfo[playerid][acLastSpecAct];

ac_fpublic ac_AntiCheatGetLastShotWeapon(playerid) return ACInfo[playerid][acLastShot];

ac_fpublic ac_AntiCheatGetLastPickup(playerid) return ACInfo[playerid][acLastPickup];

ac_fpublic ac_AntiCheatGetLastUpdateTime(playerid) return ACInfo[playerid][acUpdateTick];

ac_fpublic ac_AntiCheatGetLastReloadTime(playerid) return ACInfo[playerid][acReloadTick];

ac_fpublic ac_AntiCheatGetLastEnteredVehTi(playerid) return ACInfo[playerid][acEnterVehTick];

ac_fpublic ac_AntiCheatGetLastShotTime(playerid) return ACInfo[playerid][acShotTick];

ac_fpublic ac_AntiCheatGetLastSpawnTime(playerid) return ACInfo[playerid][acSpawnTick];

ac_fpublic ac_AntiCheatIntEnterExitsIsEnab(playerid) return ACInfo[playerid][acIntEnterExits];

ac_fpublic ac_AntiCheatStuntBonusIsEnabled(playerid) return ACInfo[playerid][acStuntBonus];

ac_fpublic ac_AntiCheatIsInModShop(playerid) return ACInfo[playerid][acModShop];

ac_fpublic ac_AntiCheatIsFrozen(playerid) return !ACInfo[playerid][acUnFrozen];

ac_fpublic ac_AntiCheatIsDead(playerid) return ACInfo[playerid][acDead];

ac_fpublic ac_AntiCheatIsConnected(playerid) return ACInfo[playerid][acOnline];

ac_fpublic ac_AntiCheatKickWithDesync(playerid, code)
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gpp = GetPlayerPing(playerid) + 150;
	#if defined SetPlayerTimerEx_
		ACInfo[playerid][acKickTimerID] = SetPlayerTimerEx_(playerid, "ac_KickTimer", 0, (ac_gpp > AC_MAX_PING ? AC_MAX_PING : ac_gpp), 1, "i", playerid);
	#else
		ACInfo[playerid][acKickTimerID] = SetTimerEx("ac_KickTimer", (ac_gpp > AC_MAX_PING ? AC_MAX_PING : ac_gpp), false, "i", playerid);
	#endif
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(code == 4) ACInfo[playerid][acKickVeh] = GetPlayerVehicleID(playerid);
		ACInfo[playerid][acKicked] = 2;
	}
	else ACInfo[playerid][acKicked] = 1;
	return 1;
}

ac_fpublic ac_AntiCheatIsKickedWithDecync(playerid) return ACInfo[playerid][acKicked];

ac_fpublic ac_AntiCheatGetNextDialog(playerid) return ACInfo[playerid][acNextDialog];

ac_fpublic ac_AntiCheatGetVehicleDriver(vehicleid) return ACVehInfo[vehicleid][acDriver];

ac_fpublic ac_AntiCheatGetVehicleInterior(vehicleid) return ACVehInfo[vehicleid][acInt];

ac_fpublic ac_AntiCheatGetVehiclePaintjob(vehicleid) return ACVehInfo[vehicleid][acPaintJob];

#endif

stock acc_AddStaticVehicle(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2)
{
	new ac_vehicleid = AddStaticVehicle(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2);
	if(ac_vehicleid != INVALID_VEHICLE_ID)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("ac_AddStaticVehicle", "iffff", ac_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#else
			ac_AddStaticVehicle(ac_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#endif
	}
	return ac_vehicleid;
}

#if defined _ALS_AddStaticVehicle
	#undef AddStaticVehicle
#else
	#define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle acc_AddStaticVehicle

#if defined OnVehicleSirenStateChange
	stock acc_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay, addsiren = 0)
	{
		new ac_vehicleid = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay, addsiren);
#else
	stock acc_AddStaticVehicleEx(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, color1, color2, respawn_delay)
	{
		new ac_vehicleid = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, z_angle, color1, color2, respawn_delay);
#endif
	if(ac_vehicleid != INVALID_VEHICLE_ID)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("ac_AddStaticVehicle", "iffff", ac_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#else
			ac_AddStaticVehicle(ac_vehicleid, spawn_x, spawn_y, spawn_z, z_angle);
		#endif
	}
	return ac_vehicleid;
}

#if defined _ALS_AddStaticVehicleEx
	#undef AddStaticVehicleEx
#else
	#define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx acc_AddStaticVehicleEx

#if defined OnVehicleSirenStateChange
	stock acc_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay, addsiren = 0)
	{
		new ac_vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay, addsiren);
#else
	stock acc_CreateVehicle(vehicletype, Float:x, Float:y, Float:z, Float:rotation, color1, color2, respawn_delay)
	{
		new ac_vehicleid = CreateVehicle(vehicletype, x, y, z, rotation, color1, color2, respawn_delay);
#endif
	if(ac_vehicleid != INVALID_VEHICLE_ID)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("ac_CreateVehicle", "iiffff", ac_vehicleid, vehicletype, x, y, z, rotation);
		#else
			ac_CreateVehicle(ac_vehicleid, vehicletype, x, y, z, rotation);
		#endif
	}
	return ac_vehicleid;
}

#if defined _ALS_CreateVehicle
	#undef CreateVehicle
#else
	#define _ALS_CreateVehicle
#endif
#define CreateVehicle acc_CreateVehicle

stock acc_AddPlayerClass(modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	new ac_classid = AddPlayerClass(modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#if defined FILTERSCRIPT
		CallRemoteFunction("ac_AddPlayerClass", "ifffiiiiii", ac_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#else
		ac_AddPlayerClass(ac_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#endif
	return ac_classid;
}

#if defined _ALS_AddPlayerClass
	#undef AddPlayerClass
#else
	#define _ALS_AddPlayerClass
#endif
#define AddPlayerClass acc_AddPlayerClass

stock acc_AddPlayerClassEx(teamid, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	new ac_classid = AddPlayerClassEx(teamid, modelid, spawn_x, spawn_y, spawn_z, z_angle, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#if defined FILTERSCRIPT
		CallRemoteFunction("ac_AddPlayerClass", "ifffiiiiii", ac_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#else
		ac_AddPlayerClass(ac_classid, spawn_x, spawn_y, spawn_z, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#endif
	return ac_classid;
}

#if defined _ALS_AddPlayerClassEx
	#undef AddPlayerClassEx
#else
	#define _ALS_AddPlayerClassEx
#endif
#define AddPlayerClassEx acc_AddPlayerClassEx

stock acc_SetSpawnInfo(playerid, team, skin, Float:x, Float:y, Float:z, Float:rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetSpawnInfo", "iiiffffiiiiii", playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#else
		return ac_SetSpawnInfo(playerid, team, skin, x, y, z, rotation, weapon1, weapon1_ammo, weapon2, weapon2_ammo, weapon3, weapon3_ammo);
	#endif
}

#if defined _ALS_SetSpawnInfo
	#undef SetSpawnInfo
#else
	#define _ALS_SetSpawnInfo
#endif
#define SetSpawnInfo acc_SetSpawnInfo

stock acc_AddStaticPickup(model, type, Float:X, Float:Y, Float:Z, virtualworld = 0)
{
	new ac_pickupid = CreatePickup(model, type, X, Y, Z, virtualworld);
	if(ac_pickupid != -1)
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("ac_AddStaticPickup", "iiifff", ac_pickupid, model, type, X, Y, Z);
		#else
			return ac_AddStaticPickup(ac_pickupid, model, type, X, Y, Z);
		#endif
	}
	return 0;
}

#if defined _ALS_AddStaticPickup
	#undef AddStaticPickup
#else
	#define _ALS_AddStaticPickup
#endif
#define AddStaticPickup acc_AddStaticPickup

stock acc_CreatePickup(model, type, Float:X, Float:Y, Float:Z, virtualworld = 0)
{
	new ac_pickupid = CreatePickup(model, type, X, Y, Z, virtualworld);
	if(ac_pickupid != -1)
	{
		#if defined FILTERSCRIPT
			CallRemoteFunction("ac_CreatePickup", "iiifff", ac_pickupid, model, type, X, Y, Z);
		#else
			ac_CreatePickup(ac_pickupid, model, type, X, Y, Z);
		#endif
	}
	return ac_pickupid;
}

#if defined _ALS_CreatePickup
	#undef CreatePickup
#else
	#define _ALS_CreatePickup
#endif
#define CreatePickup acc_CreatePickup

#if defined CreateDynamicPickup
	#if defined STREAMER_ENABLE_TAGS
		stock STREAMER_TAG_PICKUP:acc_CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0, STREAMER_TAG_AREA:areaid = STREAMER_TAG_AREA:-1, priority = 0)
		{
			new STREAMER_TAG_PICKUP:ac_pickupid = CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid, playerid, streamdistance, areaid, priority);
	#else
		stock acc_CreateDynamicPickup(modelid, type, Float:x, Float:y, Float:z, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0, areaid = -1, priority = 0)
		{
			new ac_pickupid = CreateDynamicPickup(modelid, type, x, y, z, worldid, interiorid, playerid, streamdistance, areaid, priority);
	#endif
		if(_:ac_pickupid > 0)
		{
			#if defined FILTERSCRIPT
				CallRemoteFunction("ac_CreateDynamicPickup", "iii", ac_pickupid, modelid, type);
			#else
				#if AC_USE_PICKUP_WEAPONS
					ac_CreateDynamicPickup(ac_pickupid, modelid, type);
				#endif
			#endif
		}
		return ac_pickupid;
	}

	#if defined _ALS_CreateDynamicPickup
		#undef CreateDynamicPickup
	#else
		#define _ALS_CreateDynamicPickup
	#endif
	#define CreateDynamicPickup acc_CreateDynamicPickup
#endif

#if defined CreateDynamicPickupEx
	#if defined STREAMER_ENABLE_TAGS
		stock STREAMER_TAG_PICKUP:acc_CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = 200.0, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const STREAMER_TAG_AREA:areas[] = { STREAMER_TAG_AREA:-1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)
		{
			new STREAMER_TAG_PICKUP:ac_pickupid = CreateDynamicPickupEx(modelid, type, x, y, z, streamdistance, worlds, interiors, players, areas, priority, maxworlds, maxinteriors, maxplayers, maxareas);
	#else
			stock acc_CreateDynamicPickupEx(modelid, type, Float:x, Float:y, Float:z, Float:streamdistance = 200.0, const worlds[] = { -1 }, const interiors[] = { -1 }, const players[] = { -1 }, const areas[] = { -1 }, priority = 0, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players, maxareas = sizeof areas)
		{
			new ac_pickupid = CreateDynamicPickupEx(modelid, type, x, y, z, streamdistance, worlds, interiors, players, areas, priority, maxworlds, maxinteriors, maxplayers, maxareas);
	#endif
		if(_:ac_pickupid > 0)
		{
			#if defined FILTERSCRIPT
				CallRemoteFunction("ac_CreateDynamicPickup", "iii", ac_pickupid, modelid, type);
			#else
				#if AC_USE_PICKUP_WEAPONS
					ac_CreateDynamicPickup(ac_pickupid, modelid, type);
				#endif
			#endif
		}
		return ac_pickupid;
	}

	#if defined _ALS_CreateDynamicPickupEx
		#undef CreateDynamicPickupEx
	#else
		#define _ALS_CreateDynamicPickupEx
	#endif
	#define CreateDynamicPickupEx acc_CreateDynamicPickupEx
#endif

stock acc_DestroyVehicle(vehicleid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_DestroyVehicle", "i", vehicleid);
	#else
		return ac_DestroyVehicle(vehicleid);
	#endif
}

#if defined _ALS_DestroyVehicle
	#undef DestroyVehicle
#else
	#define _ALS_DestroyVehicle
#endif
#define DestroyVehicle acc_DestroyVehicle

stock acc_DestroyPickup(pickup)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_DestroyPickup", "i", pickup);
	#else
		return ac_DestroyPickup(pickup);
	#endif
}

#if defined _ALS_DestroyPickup
	#undef DestroyPickup
#else
	#define _ALS_DestroyPickup
#endif
#define DestroyPickup acc_DestroyPickup

stock acc_DisableInteriorEnterExits()
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_DisableInteriorEnterExits", "");
	#else
		return ac_DisableInteriorEnterExits();
	#endif
}

#if defined _ALS_DisableInteriorEnterExits
	#undef DisableInteriorEnterExits
#else
	#define _ALS_DisableInteriorEnterExits
#endif
#define DisableInteriorEnterExits acc_DisableInteriorEnterExits

stock acc_UsePlayerPedAnims()
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_UsePlayerPedAnims", "");
	#else
		return ac_UsePlayerPedAnims();
	#endif
}

#if defined _ALS_UsePlayerPedAnims
	#undef UsePlayerPedAnims
#else
	#define _ALS_UsePlayerPedAnims
#endif
#define UsePlayerPedAnims acc_UsePlayerPedAnims

#if defined EnableVehicleFriendlyFire
	stock acc_EnableVehicleFriendlyFire()
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("ac_EnableVehicleFriendlyFire", "");
		#else
			return ac_EnableVehicleFriendlyFire();
		#endif
	}

	#if defined _ALS_EnableVehicleFriendlyFire
		#undef EnableVehicleFriendlyFire
	#else
		#define _ALS_EnableVehicleFriendlyFire
	#endif
	#define EnableVehicleFriendlyFire acc_EnableVehicleFriendlyFire
#endif

stock acc_EnableStuntBonusForAll(enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_EnableStuntBonusForAll", "i", enable);
	#else
		return ac_EnableStuntBonusForAll(enable);
	#endif
}

#if defined _ALS_EnableStuntBonusForAll
	#undef EnableStuntBonusForAll
#else
	#define _ALS_EnableStuntBonusForAll
#endif
#define EnableStuntBonusForAll acc_EnableStuntBonusForAll

stock acc_EnableStuntBonusForPlayer(playerid, enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_EnableStuntBonusForPlayer", "ii", playerid, enable);
	#else
		return ac_EnableStuntBonusForPlayer(playerid, enable);
	#endif
}

#if defined _ALS_EnableStuntBonusForPlayer
	#undef EnableStuntBonusForPlayer
#else
	#define _ALS_EnableStuntBonusForPlayer
#endif
#define EnableStuntBonusForPlayer acc_EnableStuntBonusForPlayer

#if defined _inc_y_dialog || defined _INC_y_dialog
	stock ac_Dialog_Show(playerid, style, string:title[], string:caption[], string:button1[], string:button2[] = "", dialog = -1)
	{
		if(!(0 <= playerid < MAX_PLAYERS))
		{
			#if defined FILTERSCRIPT
				CallRemoteFunction("ac_fs_ShowPlayerDialog", "id", playerid, dialog);
			#else
				ac_ShowPlayerDialog(playerid, dialog);
			#endif
		}
		return Dialog_Show(playerid, style, title, caption, button1, button2, dialog);
	}

	#if defined _ALS_Dialog_Show
		#undef Dialog_Show
	#else
		#define _ALS_Dialog_Show
	#endif
	#define Dialog_Show ac_Dialog_Show
#endif

stock acc_ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	if(ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2))
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("ac_fs_ShowPlayerDialog", "id", playerid, dialogid);
		#else
			return ac_ShowPlayerDialog(playerid, dialogid);
		#endif
	}
	return 0;
}

#if defined _ALS_ShowPlayerDialog
	#undef ShowPlayerDialog
#else
	#define _ALS_ShowPlayerDialog
#endif
#define ShowPlayerDialog acc_ShowPlayerDialog

stock acc_TogglePlayerControllable(playerid, toggle)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_TogglePlayerControllable", "ii", playerid, toggle);
	#else
		return ac_TogglePlayerControllable(playerid, toggle);
	#endif
}

#if defined _ALS_TogglePlayerControllable
	#undef TogglePlayerControllable
#else
	#define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable acc_TogglePlayerControllable

stock acc_TogglePlayerSpectating(playerid, toggle)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_TogglePlayerSpectating", "ii", playerid, toggle);
	#else
		return ac_TogglePlayerSpectating(playerid, toggle);
	#endif
}

#if defined _ALS_TogglePlayerSpectating
	#undef TogglePlayerSpectating
#else
	#define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating acc_TogglePlayerSpectating

stock acc_SpawnPlayer(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SpawnPlayer", "i", playerid);
	#else
		return ac_SpawnPlayer(playerid);
	#endif
}

#if defined _ALS_SpawnPlayer
	#undef SpawnPlayer
#else
	#define _ALS_SpawnPlayer
#endif
#define SpawnPlayer acc_SpawnPlayer

stock acc_SetPlayerHealth(playerid, Float:health)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerHealth", "if", playerid, health);
	#else
		return ac_SetPlayerHealth(playerid, health);
	#endif
}

#if defined _ALS_SetPlayerHealth
	#undef SetPlayerHealth
#else
	#define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth acc_SetPlayerHealth

stock acc_SetPlayerArmour(playerid, Float:armour)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerArmour", "if", playerid, armour);
	#else
		return ac_SetPlayerArmour(playerid, armour);
	#endif
}

#if defined _ALS_SetPlayerArmour
	#undef SetPlayerArmour
#else
	#define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour acc_SetPlayerArmour

stock acc_GivePlayerWeapon(playerid, weaponid, ammo)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_GivePlayerWeapon", "iid", playerid, weaponid, ammo);
	#else
		return ac_GivePlayerWeapon(playerid, weaponid, ammo);
	#endif
}

#if defined _ALS_GivePlayerWeapon
	#undef GivePlayerWeapon
#else
	#define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon acc_GivePlayerWeapon

stock acc_SetPlayerAmmo(playerid, weaponslot, ammo)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerAmmo", "iid", playerid, weaponslot, ammo);
	#else
		return ac_SetPlayerAmmo(playerid, weaponslot, ammo);
	#endif
}

#if defined _ALS_SetPlayerAmmo
	#undef SetPlayerAmmo
#else
	#define _ALS_SetPlayerAmmo
#endif
#define SetPlayerAmmo acc_SetPlayerAmmo

stock acc_SetPlayerArmedWeapon(playerid, weaponid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerArmedWeapon", "ii", playerid, weaponid);
	#else
		return ac_SetPlayerArmedWeapon(playerid, weaponid);
	#endif
}

#if defined _ALS_SetPlayerArmedWeapon
	#undef SetPlayerArmedWeapon
#else
	#define _ALS_SetPlayerArmedWeapon
#endif
#define SetPlayerArmedWeapon acc_SetPlayerArmedWeapon

stock acc_ResetPlayerWeapons(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_ResetPlayerWeapons", "i", playerid);
	#else
		return ac_ResetPlayerWeapons(playerid);
	#endif
}

#if defined _ALS_ResetPlayerWeapons
	#undef ResetPlayerWeapons
#else
	#define _ALS_ResetPlayerWeapons
#endif
#define ResetPlayerWeapons acc_ResetPlayerWeapons

stock acc_GivePlayerMoney(playerid, money)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_GivePlayerMoney", "id", playerid, money);
	#else
		return ac_GivePlayerMoney(playerid, money);
	#endif
}

#if defined _ALS_GivePlayerMoney
	#undef GivePlayerMoney
#else
	#define _ALS_GivePlayerMoney
#endif
#define GivePlayerMoney acc_GivePlayerMoney

stock acc_ResetPlayerMoney(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_ResetPlayerMoney", "i", playerid);
	#else
		return ac_ResetPlayerMoney(playerid);
	#endif
}

#if defined _ALS_ResetPlayerMoney
	#undef ResetPlayerMoney
#else
	#define _ALS_ResetPlayerMoney
#endif
#define ResetPlayerMoney acc_ResetPlayerMoney

stock acc_GetPlayerMoney(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetMoney", "i", playerid);
	#else
		return ac_AntiCheatGetMoney(playerid);
	#endif
}

#if defined _ALS_GetPlayerMoney
	#undef GetPlayerMoney
#else
	#define _ALS_GetPlayerMoney
#endif
#define GetPlayerMoney acc_GetPlayerMoney

stock acc_SetPlayerSpecialAction(playerid, actionid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerSpecialAction", "ii", playerid, actionid);
	#else
		return ac_SetPlayerSpecialAction(playerid, actionid);
	#endif
}

#if defined _ALS_SetPlayerSpecialAction
	#undef SetPlayerSpecialAction
#else
	#define _ALS_SetPlayerSpecialAction
#endif
#define SetPlayerSpecialAction acc_SetPlayerSpecialAction

stock acc_SetPlayerInterior(playerid, interiorid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerInterior", "ii", playerid, interiorid);
	#else
		return ac_SetPlayerInterior(playerid, interiorid);
	#endif
}

#if defined _ALS_SetPlayerInterior
	#undef SetPlayerInterior
#else
	#define _ALS_SetPlayerInterior
#endif
#define SetPlayerInterior acc_SetPlayerInterior

stock acc_SetPlayerPos(playerid, Float:x, Float:y, Float:z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerPos", "ifff", playerid, x, y, z);
	#else
		return ac_SetPlayerPos(playerid, x, y, z);
	#endif
}

#if defined _ALS_SetPlayerPos
	#undef SetPlayerPos
#else
	#define _ALS_SetPlayerPos
#endif
#define SetPlayerPos acc_SetPlayerPos

stock acc_SetPlayerPosFindZ(playerid, Float:x, Float:y, Float:z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerPosFindZ", "ifff", playerid, x, y, z);
	#else
		return ac_SetPlayerPosFindZ(playerid, x, y, z);
	#endif
}

#if defined _ALS_SetPlayerPosFindZ
	#undef SetPlayerPosFindZ
#else
	#define _ALS_SetPlayerPosFindZ
#endif
#define SetPlayerPosFindZ acc_SetPlayerPosFindZ

stock acc_SetPlayerVelocity(playerid, Float:X, Float:Y, Float:Z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetPlayerVelocity", "ifff", playerid, X, Y, Z);
	#else
		return ac_SetPlayerVelocity(playerid, X, Y, Z);
	#endif
}

#if defined _ALS_SetPlayerVelocity
	#undef SetPlayerVelocity
#else
	#define _ALS_SetPlayerVelocity
#endif
#define SetPlayerVelocity acc_SetPlayerVelocity

stock acc_PutPlayerInVehicle(playerid, vehicleid, seatid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_PutPlayerInVehicle", "iii", playerid, vehicleid, seatid);
	#else
		return ac_PutPlayerInVehicle(playerid, vehicleid, seatid);
	#endif
}

#if defined _ALS_PutPlayerInVehicle
	#undef PutPlayerInVehicle
#else
	#define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle acc_PutPlayerInVehicle

stock acc_RemovePlayerFromVehicle(playerid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_RemovePlayerFromVehicle", "i", playerid);
	#else
		return ac_RemovePlayerFromVehicle(playerid);
	#endif
}

#if defined _ALS_RemovePlayerFromVehicle
	#undef RemovePlayerFromVehicle
#else
	#define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle acc_RemovePlayerFromVehicle

stock acc_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetVehiclePos", "ifff", vehicleid, x, y, z);
	#else
		return ac_SetVehiclePos(vehicleid, x, y, z);
	#endif
}

#if defined _ALS_SetVehiclePos
	#undef SetVehiclePos
#else
	#define _ALS_SetVehiclePos
#endif
#define SetVehiclePos acc_SetVehiclePos

stock acc_SetVehicleVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetVehicleVelocity", "ifff", vehicleid, X, Y, Z);
	#else
		return ac_SetVehicleVelocity(vehicleid, X, Y, Z);
	#endif
}

#if defined _ALS_SetVehicleVelocity
	#undef SetVehicleVelocity
#else
	#define _ALS_SetVehicleVelocity
#endif
#define SetVehicleVelocity acc_SetVehicleVelocity

stock acc_SetVehicleAngularVelocity(vehicleid, Float:X, Float:Y, Float:Z)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetVehicleAngularVelocity", "ifff", vehicleid, X, Y, Z);
	#else
		return ac_SetVehicleAngularVelocity(vehicleid, X, Y, Z);
	#endif
}

#if defined _ALS_SetVehicleAngularVelocity
	#undef SetVehicleAngularVelocity
#else
	#define _ALS_SetVehicleAngularVelocity
#endif
#define SetVehicleAngularVelocity acc_SetVehicleAngularVelocity

stock acc_LinkVehicleToInterior(vehicleid, interiorid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_LinkVehicleToInterior", "ii", vehicleid, interiorid);
	#else
		return ac_LinkVehicleToInterior(vehicleid, interiorid);
	#endif
}

#if defined _ALS_LinkVehicleToInterior
	#undef LinkVehicleToInterior
#else
	#define _ALS_LinkVehicleToInterior
#endif
#define LinkVehicleToInterior acc_LinkVehicleToInterior

stock acc_ChangeVehiclePaintjob(vehicleid, paintjobid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_ChangeVehiclePaintjob", "ii", vehicleid, paintjobid);
	#else
		return ac_ChangeVehiclePaintjob(vehicleid, paintjobid);
	#endif
}

#if defined _ALS_ChangeVehiclePaintjob
	#undef ChangeVehiclePaintjob
#else
	#define _ALS_ChangeVehiclePaintjob
#endif
#define ChangeVehiclePaintjob acc_ChangeVehiclePaintjob

stock acc_SetVehicleHealth(vehicleid, Float:health)
{
	if(health < 0.0) health = 0.0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_SetVehicleHealth", "if", vehicleid, health);
	#else
		return ac_SetVehicleHealth(vehicleid, health);
	#endif
}

#if defined _ALS_SetVehicleHealth
	#undef SetVehicleHealth
#else
	#define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth acc_SetVehicleHealth

stock acc_RepairVehicle(vehicleid)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_RepairVehicle", "i", vehicleid);
	#else
		return ac_RepairVehicle(vehicleid);
	#endif
}

#if defined _ALS_RepairVehicle
	#undef RepairVehicle
#else
	#define _ALS_RepairVehicle
#endif
#define RepairVehicle acc_RepairVehicle

stock acc_SetVehicleToRespawn(vehicleid)
{
	if(GetVehicleModel(vehicleid) > 0)
	{
		#if defined FILTERSCRIPT
			return CallRemoteFunction("ac_SetVehicleToRespawn", "i", vehicleid);
		#else
			return ac_SetVehicleToRespawn(vehicleid);
		#endif
	}
	return 0;
}

#if defined _ALS_SetVehicleToRespawn
	#undef SetVehicleToRespawn
#else
	#define _ALS_SetVehicleToRespawn
#endif
#define SetVehicleToRespawn acc_SetVehicleToRespawn

stock EnableAntiCheat(code, enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_EnableAntiCheat", "ii", code, enable);
	#else
		return ac_EnableAntiCheat(code, enable);
	#endif
}

stock EnableAntiNOP(nopcode, enable)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_EnableAntiNOP", "ii", nopcode, enable);
	#else
		return ac_EnableAntiNOP(nopcode, enable);
	#endif
}

stock EnableAntiCheatForPlayer(playerid, code, enable)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_EnableAntiCheatForPlayer", "iii", playerid, code, enable);
	#else
		return ac_EnableAntiCheatForPlayer(playerid, code, enable);
	#endif
}

stock EnableAntiNOPForPlayer(playerid, nopcode, enable)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_EnableAntiNOPForPlayer", "iii", playerid, nopcode, enable);
	#else
		return ac_EnableAntiNOPForPlayer(playerid, nopcode, enable);
	#endif
}

stock IsAntiCheatEnabled(code)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_IsAntiCheatEnabled", "i", code);
	#else
		return ac_IsAntiCheatEnabled(code);
	#endif
}

stock IsAntiNOPEnabled(nopcode)
{
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_IsAntiNOPEnabled", "i", nopcode);
	#else
		return ac_IsAntiNOPEnabled(nopcode);
	#endif
}

stock IsAntiCheatEnabledForPlayer(playerid, code)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_IsAntiCheatEnabledForPlayer", "ii", playerid, code);
	#else
		return ac_IsAntiCheatEnabledForPlayer(playerid, code);
	#endif
}

stock IsAntiNOPEnabledForPlayer(playerid, nopcode)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_IsAntiNOPEnabledForPlayer", "ii", playerid, nopcode);
	#else
		return ac_IsAntiNOPEnabledForPlayer(playerid, nopcode);
	#endif
}

stock AntiCheatGetSpeed(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetSpeed", "i", playerid);
	#else
		return ac_AntiCheatGetSpeed(playerid);
	#endif
}

stock AntiCheatGetAnimationIndex(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetAnimationIndex", "i", playerid);
	#else
		return ac_AntiCheatGetAnimationIndex(playerid);
	#endif
}

stock AntiCheatGetDialog(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetDialog", "i", playerid);
	#else
		return ac_AntiCheatGetDialog(playerid);
	#endif
}

stock AntiCheatGetMoney(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetMoney", "i", playerid);
	#else
		return ac_AntiCheatGetMoney(playerid);
	#endif
}

stock AntiCheatGetClass(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetClass", "i", playerid);
	#else
		return ac_AntiCheatGetClass(playerid);
	#endif
}

stock AntiCheatGetEnterVehicle(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetEnterVehicle", "i", playerid);
	#else
		return ac_AntiCheatGetEnterVehicle(playerid);
	#endif
}

stock AntiCheatGetVehicleID(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetVehicleID", "i", playerid);
	#else
		return ac_AntiCheatGetVehicleID(playerid);
	#endif
}

stock AntiCheatGetWeapon(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetWeapon", "i", playerid);
	#else
		return ac_AntiCheatGetWeapon(playerid);
	#endif
}

stock AntiCheatGetVehicleSeat(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetVehicleSeat", "i", playerid);
	#else
		return ac_AntiCheatGetVehicleSeat(playerid);
	#endif
}

stock AntiCheatGetSpecialAction(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetSpecialAction", "i", playerid);
	#else
		return ac_AntiCheatGetSpecialAction(playerid);
	#endif
}

stock AntiCheatGetLastSpecialAction(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastSpecialActio", "i", playerid);
	#else
		return ac_AntiCheatGetLastSpecialActio(playerid);
	#endif
}

stock AntiCheatGetLastShotWeapon(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastShotWeapon", "i", playerid);
	#else
		return ac_AntiCheatGetLastShotWeapon(playerid);
	#endif
}

stock AntiCheatGetLastPickup(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastPickup", "i", playerid);
	#else
		return ac_AntiCheatGetLastPickup(playerid);
	#endif
}

stock AntiCheatGetLastUpdateTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastUpdateTime", "i", playerid);
	#else
		return ac_AntiCheatGetLastUpdateTime(playerid);
	#endif
}

stock AntiCheatGetLastReloadTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastReloadTime", "i", playerid);
	#else
		return ac_AntiCheatGetLastReloadTime(playerid);
	#endif
}

stock AntiCheatGetLastEnteredVehTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastEnteredVehTi", "i", playerid);
	#else
		return ac_AntiCheatGetLastEnteredVehTi(playerid);
	#endif
}

stock AntiCheatGetLastShotTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastShotTime", "i", playerid);
	#else
		return ac_AntiCheatGetLastShotTime(playerid);
	#endif
}

stock AntiCheatGetLastSpawnTime(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetLastSpawnTime", "i", playerid);
	#else
		return ac_AntiCheatGetLastSpawnTime(playerid);
	#endif
}

stock AntiCheatIntEnterExitsIsEnabled(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatIntEnterExitsIsEnab", "i", playerid);
	#else
		return ac_AntiCheatIntEnterExitsIsEnab(playerid);
	#endif
}

stock AntiCheatStuntBonusIsEnabled(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatStuntBonusIsEnabled", "i", playerid);
	#else
		return ac_AntiCheatStuntBonusIsEnabled(playerid);
	#endif
}

stock AntiCheatIsInModShop(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatIsInModShop", "i", playerid);
	#else
		return ac_AntiCheatIsInModShop(playerid);
	#endif
}

stock AntiCheatIsFrozen(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatIsFrozen", "i", playerid);
	#else
		return ac_AntiCheatIsFrozen(playerid);
	#endif
}

stock AntiCheatIsDead(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatIsDead", "i", playerid);
	#else
		return ac_AntiCheatIsDead(playerid);
	#endif
}

stock AntiCheatIsConnected(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatIsConnected", "i", playerid);
	#else
		return ac_AntiCheatIsConnected(playerid);
	#endif
}

stock AntiCheatKickWithDesync(playerid, code)
{
	if(!IsPlayerConnected(playerid)) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatKickWithDesync", "ii", playerid, code);
	#else
		return ac_AntiCheatKickWithDesync(playerid, code);
	#endif
}

stock AntiCheatIsKickedWithDecync(playerid)
{
	if(!IsPlayerConnected(playerid)) return 3;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatIsKickedWithDecync", "i", playerid);
	#else
		return ac_AntiCheatIsKickedWithDecync(playerid);
	#endif
}

stock AntiCheatGetVehicleDriver(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return INVALID_PLAYER_ID;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetVehicleDriver", "i", vehicleid);
	#else
		return ac_AntiCheatGetVehicleDriver(vehicleid);
	#endif
}

stock AntiCheatGetVehicleInterior(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetVehicleInterior", "i", vehicleid);
	#else
		return ac_AntiCheatGetVehicleInterior(vehicleid);
	#endif
}

stock AntiCheatGetVehiclePaintjob(vehicleid)
{
	if(GetVehicleModel(vehicleid) <= 0) return 3;
	#if defined FILTERSCRIPT
		return CallRemoteFunction("ac_AntiCheatGetVehiclePaintjob", "i", vehicleid);
	#else
		return ac_AntiCheatGetVehiclePaintjob(vehicleid);
	#endif
}

#if defined _inc_y_hooks || defined _INC_y_hooks
	DEFINE_HOOK_REPLACEMENT(SirenState, Siren);
	DEFINE_HOOK_REPLACEMENT(Vehicle, Veh);
#endif

#if defined FILTERSCRIPT

static fs_AntiCheatGetNextDialog(playerid)
{
	if(!IsPlayerConnected(playerid)) return -1;
	return CallRemoteFunction("ac_AntiCheatGetNextDialog", "i", playerid);
}

static fs_AntiCheatSetDialog(playerid, dialogid)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	return CallRemoteFunction("ac_ShowPlayerDialog", "id", playerid, dialogid);
}

static fs_AntiCheatSetNextDialog(playerid, dialogid)
{
	if(!(0 <= playerid < MAX_PLAYERS)) return 0;
	return CallRemoteFunction("ac_fs_ShowPlayerDialog", "id", playerid, dialogid);
}

#else

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnGameModeInit()
#else
	public OnGameModeInit()
#endif
{
	if(!ac_LoadCfg()) printf(CFG_OPENING_ERROR, AC_CONFIG_FILE);
	if(ac_ACAllow[42])
	{
		#if !AC_USE_QUERY
			ac_QueryEnable = !!GetServerVarAsBool("query");
			SendRconCommand("query 0");
		#endif
		#undef AC_USE_QUERY
		ac_RconEnable = !!GetServerVarAsBool("rcon");
		SendRconCommand("rcon 0");
	}
	#if AC_MAX_CONNECTS_FROM_IP > 1
		ac_ACAllow[37] = false;
	#endif
	ac_LagCompMode = !!GetServerVarAsInt("lagcompmode");
	print(" ");
	print("--------------------------------------");
	print(LOADED_MSG_1);
	printf(LOADED_MSG_2, NEX_AC_VERSION);
	print(LOADED_MSG_3);
	print("--------------------------------------\n");
	new ac_a = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnGameModeInit
		ac_a = ac_OnGameModeInit();
	#endif
	static ac_strtmp[10];
	GetServerVarAsString("version", ac_strtmp, sizeof ac_strtmp);
	if(strfind(ac_strtmp, AC_SERVER_VERSION) == -1 && strfind(ac_strtmp, AC_SERVER_DL_VERSION) == -1) print(VERSION_WARNING);
	#undef AC_SERVER_DL_VERSION
	#undef AC_SERVER_VERSION
	return ac_a;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnGameModeInit
		#undef OnGameModeInit
	#else
		#define _ALS_OnGameModeInit
	#endif
	#define OnGameModeInit ac_OnGameModeInit
	#if defined ac_OnGameModeInit
		forward ac_OnGameModeInit();
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnGameModeExit()
#else
	public OnGameModeExit()
#endif
{
	new ac_a = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnGameModeExit
		ac_a = ac_OnGameModeExit();
	#endif
	print(" ");
	print("--------------------------------------");
	print(STATS_STRING_1);
	print(STATS_STRING_2);
	printf(STATS_STRING_3, ac_sInfo[0]);
	printf(STATS_STRING_4, ac_sInfo[1]);
	printf(STATS_STRING_5, ac_sInfo[2]);
	printf(STATS_STRING_6, ac_sInfo[3]);
	printf(STATS_STRING_7, ac_sInfo[4]);
	printf(STATS_STRING_8, ac_sInfo[5]);
	print("--------------------------------------\n");
	return ac_a;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnGameModeExit
		#undef OnGameModeExit
	#else
		#define _ALS_OnGameModeExit
	#endif
	#define OnGameModeExit ac_OnGameModeExit
	#if defined ac_OnGameModeExit
		forward ac_OnGameModeExit();
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerConnect(playerid)
#else
	public OnPlayerConnect(playerid)
#endif
{
	ACInfo[playerid][acVeh] =
	ACInfo[playerid][acKicked] =
	ACInfo[playerid][acKickVeh] = 0;
	GetPlayerIp(playerid, ACInfo[playerid][acIp], 16);
	if(IsPlayerNPC(playerid))
	{
		if(ac_ACAllow[36] && strcmp(ACInfo[playerid][acIp], "127.0.0.1")) ac_KickWithCode(playerid, "", 0, 36);
		ACInfo[playerid][acTimerID] = 0;
	}
	else
	{
		if(ac_ACAllow[48] && ACInfo[playerid][acOnline]) ac_KickWithCode(playerid, "", 0, 48, 1);
		if(ac_ACAllow[41])
		{
			static ac_ver[24];
			GetPlayerVersion(playerid, ac_ver, sizeof ac_ver);
			if(!strcmp(ac_ver, "unknown", true))
			{
				#if defined DEBUG
					printf(DEBUG_CODE_2, playerid, ac_ver);
				#endif
				ac_KickWithCode(playerid, "", 0, 41);
			}
		}
		new ac_i = AC_MAX_CONNECTS_FROM_IP;
		if(ac_ACAllow[40])
		{
			#if defined foreach
				foreach(new ac_j : Player)
				{
					if(ac_j != playerid && !IsPlayerNPC(ac_j) && !strcmp(ACInfo[playerid][acIp], ACInfo[ac_j][acIp], false))
			#else
				#if defined GetPlayerPoolSize
					for(new ac_j = GetPlayerPoolSize(); ac_j >= 0; --ac_j)
				#else
					for(new ac_j = MAX_PLAYERS - 1; ac_j >= 0; --ac_j)
				#endif
				{
					if(ac_j != playerid && IsPlayerConnected(ac_j) && !IsPlayerNPC(ac_j) &&
					!strcmp(ACInfo[playerid][acIp], ACInfo[ac_j][acIp], false))
			#endif
				{
					ac_i--;
					if(ac_i < 1)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_3, playerid, AC_MAX_CONNECTS_FROM_IP);
						#endif
						#undef AC_MAX_CONNECTS_FROM_IP
						ac_KickWithCode(playerid, "", 0, 40);
						break;
					}
				}
			}
		}
		ACInfo[playerid][acSpec] =
		ACInfo[playerid][acSpawned] =
		ACInfo[playerid][acDeathRes] = false;
		ACInfo[playerid][acDead] = true;
		ACInfo[playerid][acIntEnterExits] = ac_IntEnterExits;
		ACInfo[playerid][acStuntBonus] = ac_StuntBonus;
		ACInfo[playerid][acCheatCount][0] =
		ACInfo[playerid][acLastWeapon] =
		ACInfo[playerid][acSpawnRes] =
		ACInfo[playerid][acMoney] =
		ACInfo[playerid][acAnim] =
		ACInfo[playerid][acInt] = 0;
		ACInfo[playerid][acSet][12] =
		ACInfo[playerid][acSet][10] =
		ACInfo[playerid][acSet][0] =
		ACInfo[playerid][acNextDialog] =
		ACInfo[playerid][acDialog] = -1;
		for(ac_i = 12; ac_i >= 0; --ac_i)
		{
			ACInfo[playerid][acSetWeapon][ac_i] = -1;
			ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
		}
		for(ac_i = 27; ac_i >= 0; --ac_i) ACInfo[playerid][acFloodCount][ac_i] = 0;
		ACInfo[playerid][acDropJpX] = ACInfo[playerid][acDropJpY] = ACInfo[playerid][acDropJpZ] = 25000.0;
		memcpy(ACInfo[playerid][acNOPAllow], ac_NOPAllow, 0, sizeof(ac_NOPAllow) * 4, sizeof ac_NOPAllow);
		memcpy(ACInfo[playerid][acACAllow], ac_ACAllow, 0, sizeof(ac_ACAllow) * 4, sizeof ac_ACAllow);
		ACInfo[playerid][acTimerTick] = GetTickCount();
		#if defined SetPlayerTimerEx_
			ACInfo[playerid][acTimerID] = SetPlayerTimerEx_(playerid, "ac_Timer", 0, 1000, 1, "i", playerid);
		#else
			ACInfo[playerid][acTimerID] = SetTimerEx("ac_Timer", 1000, false, "i", playerid);
		#endif
	}
	ACInfo[playerid][acOnline] = true;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerConnect
		return ac_OnPlayerConnect(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerConnect
		#undef OnPlayerConnect
	#else
		#define _ALS_OnPlayerConnect
	#endif
	#define OnPlayerConnect ac_OnPlayerConnect
	#if defined ac_OnPlayerConnect
		forward ac_OnPlayerConnect(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerDisconnect(playerid, reason)
#else
	public OnPlayerDisconnect(playerid, reason)
#endif
{
	if(!IsPlayerNPC(playerid))
	{
		#if defined KillPlayerTimer
			KillPlayerTimer(ACInfo[playerid][acTimerID]);
		#else
			KillTimer(ACInfo[playerid][acTimerID]);
		#endif
		#if defined BlockIpAddress
			if(ACInfo[playerid][acACAllow][37]) BlockIpAddress(ACInfo[playerid][acIp],
			(AC_MIN_TIME_RECONNECT * 1000) - (reason > 0 ? 0 : GetServerVarAsInt("playertimeout")));
		#endif
		#undef AC_MIN_TIME_RECONNECT
	}
	#if defined KillPlayerTimer
		KillPlayerTimer(ACInfo[playerid][acKickTimerID]);
	#else
		KillTimer(ACInfo[playerid][acKickTimerID]);
	#endif
	new ac_vehid = ACInfo[playerid][acKickVeh];
	if(ac_vehid > 0)
	{
		if(ACVehInfo[ac_vehid][acDriver] == playerid) ACVehInfo[ac_vehid][acDriver] = INVALID_PLAYER_ID;
		if(ACInfo[playerid][acKicked] == 2)
		{
			LinkVehicleToInterior(ac_vehid, ACVehInfo[ac_vehid][acInt]);
			SetVehicleZAngle(ac_vehid, ACVehInfo[ac_vehid][acZAngle]);
			SetVehiclePos(ac_vehid, ACVehInfo[ac_vehid][acPosX], ACVehInfo[ac_vehid][acPosY], ACVehInfo[ac_vehid][acPosZ]);
			SetVehicleHealth(ac_vehid, ACVehInfo[ac_vehid][acHealth]);
			ChangeVehiclePaintjob(ac_vehid, ACVehInfo[ac_vehid][acPaintJob]);
		}
	}
	if((ac_vehid = ACInfo[playerid][acVeh]) > 0)
	{
		if(ACVehInfo[ac_vehid][acDriver] == playerid) ACVehInfo[ac_vehid][acDriver] = INVALID_PLAYER_ID;
		if(ACInfo[playerid][acKicked] == 2)
		{
			LinkVehicleToInterior(ac_vehid, ACVehInfo[ac_vehid][acInt]);
			SetVehicleZAngle(ac_vehid, ACVehInfo[ac_vehid][acZAngle]);
			SetVehiclePos(ac_vehid, ACVehInfo[ac_vehid][acPosX], ACVehInfo[ac_vehid][acPosY], ACVehInfo[ac_vehid][acPosZ]);
			SetVehicleHealth(ac_vehid, ACVehInfo[ac_vehid][acHealth]);
			ChangeVehiclePaintjob(ac_vehid, ACVehInfo[ac_vehid][acPaintJob]);
		}
	}
	ACInfo[playerid][acOnline] = false;
	if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acKicked] = 3;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerDisconnect
		return ac_OnPlayerDisconnect(playerid, reason);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerDisconnect
		#undef OnPlayerDisconnect
	#else
		#define _ALS_OnPlayerDisconnect
	#endif
	#define OnPlayerDisconnect ac_OnPlayerDisconnect
	#if defined ac_OnPlayerDisconnect
		forward ac_OnPlayerDisconnect(playerid, reason);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerSpawn(playerid)
#else
	public OnPlayerSpawn(playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_i, ac_gtc = GetTickCount();
		if(ACInfo[playerid][acSpec] && ACInfo[playerid][acSet][7] < 2)
		{
			ACInfo[playerid][acSet][3] =
			ACInfo[playerid][acSet][4] =
			ACInfo[playerid][acSet][8] =
			ACInfo[playerid][acSet][9] = -1;
			ACInfo[playerid][acSpec] = false;
		}
		else
		{
			if(ACInfo[playerid][acACAllow][27] &&
			(ACInfo[playerid][acSpawnRes] < 1 || ac_gtc < ACInfo[playerid][acSpawnTick] + 1000))
			{
				#if defined DEBUG
					printf("[Nex-AC debug] Spawn res: %d, Respawn time: %d",
					ACInfo[playerid][acSpawnRes], ac_gtc - ACInfo[playerid][acSpawnTick]);
				#endif
				ac_KickWithCode(playerid, "", 0, 27);
				#if defined OnCheatDetected
					ACInfo[playerid][acSpawnRes] = 1;
				#endif
			}
			if(ACInfo[playerid][acSpawnRes] > 0) ACInfo[playerid][acSpawnRes]--;
			if(!(1 <= ACInfo[playerid][acSet][7] <= 2))
			{
				for(ac_i = 11; ac_i >= 0; --ac_i) ACInfo[playerid][acSet][ac_i] = -1;
				SetPlayerHealth(playerid, 100.0);
				SetPlayerArmour(playerid, 0.0);
				SetPlayerInterior(playerid, 0);
			}
		}
		if(!(1 <= ACInfo[playerid][acSet][7] <= 2))
		{
			for(ac_i = 12; ac_i >= 0; --ac_i)
			{
				ACInfo[playerid][acSetWeapon][ac_i] = -1;
				ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
			}
			ACInfo[playerid][acNextSpecAct] = -1;
			ACInfo[playerid][acUnFrozen] = true;
			ACInfo[playerid][acTpToZ] = false;
		}
		for(ac_i = 12; ac_i >= 0; --ac_i) ACInfo[playerid][acWeapon][ac_i] = ACInfo[playerid][acAmmo][ac_i] = 0;
		ACInfo[playerid][acModShop] =
		ACInfo[playerid][acDead] = false;
		ACInfo[playerid][acSpawned] = true;
		ACInfo[playerid][acLastPickup] =
		ACInfo[playerid][acSet][7] =
		ACInfo[playerid][acSeat] = -1;
		ACInfo[playerid][acCheatCount][5] =
		ACInfo[playerid][acCheatCount][6] =
		ACInfo[playerid][acCheatCount][7] =
		ACInfo[playerid][acCheatCount][8] =
		ACInfo[playerid][acCheatCount][9] =
		ACInfo[playerid][acCheatCount][13] =
		ACInfo[playerid][acCheatCount][14] =
		ACInfo[playerid][acCheatCount][16] =
		ACInfo[playerid][acCheatCount][18] =
		ACInfo[playerid][acCheatCount][20] =
		ACInfo[playerid][acLastSpecAct] =
		ACInfo[playerid][acLastWeapon] =
		ACInfo[playerid][acParachute] =
		ACInfo[playerid][acEnterVeh] =
		ACInfo[playerid][acLastShot] =
		ACInfo[playerid][acKickVeh] =
		ACInfo[playerid][acSpecAct] =
		ACInfo[playerid][acDmgRes] =
		ACInfo[playerid][acIntRet] =
		ACInfo[playerid][acSpeed] =
		ACInfo[playerid][acVeh] = 0;
		ACInfo[playerid][acSetPosTick] =
		ACInfo[playerid][acGtc][7] = ac_gtc + 2650;
		ACInfo[playerid][acIssuerID] = INVALID_PLAYER_ID;
		if(1 <= ACInfo[playerid][acSpawnWeapon1] <= 46)
		{
			ac_i = ac_wSlot[ACInfo[playerid][acSpawnWeapon1]];
			ACInfo[playerid][acWeapon][ac_i] = ACInfo[playerid][acSpawnWeapon1];
			ACInfo[playerid][acAmmo][ac_i] = ACInfo[playerid][acSpawnAmmo1];
		}
		if(1 <= ACInfo[playerid][acSpawnWeapon2] <= 46)
		{
			ac_i = ac_wSlot[ACInfo[playerid][acSpawnWeapon2]];
			ACInfo[playerid][acWeapon][ac_i] = ACInfo[playerid][acSpawnWeapon2];
			ACInfo[playerid][acAmmo][ac_i] = ACInfo[playerid][acSpawnAmmo2];
		}
		if(1 <= ACInfo[playerid][acSpawnWeapon3] <= 46)
		{
			ac_i = ac_wSlot[ACInfo[playerid][acSpawnWeapon3]];
			ACInfo[playerid][acWeapon][ac_i] = ACInfo[playerid][acSpawnWeapon3];
			ACInfo[playerid][acAmmo][ac_i] = ACInfo[playerid][acSpawnAmmo3];
		}
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerSpawn
		return ac_OnPlayerSpawn(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerSpawn
		#undef OnPlayerSpawn
	#else
		#define _ALS_OnPlayerSpawn
	#endif
	#define OnPlayerSpawn ac_OnPlayerSpawn
	#if defined ac_OnPlayerSpawn
		forward ac_OnPlayerSpawn(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerDeath(playerid, killerid, reason)
#else
	public OnPlayerDeath(playerid, killerid, reason)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(ACInfo[playerid][acACAllow][28] &&
	(ACInfo[playerid][acDead] || !ACInfo[playerid][acDeathRes] &&
	reason != 255 && (reason != WEAPON_COLLISION || killerid != INVALID_PLAYER_ID) ||
	ACInfo[playerid][acIssuerID] != killerid && killerid != INVALID_PLAYER_ID))
	{
		#if defined DEBUG
			printf("[Nex-AC debug] Is dead: %d, death res: %d, last issuerid: %d, killerid: %d, reason: %d",
			ACInfo[playerid][acDead], ACInfo[playerid][acDeathRes], ACInfo[playerid][acIssuerID], killerid, reason);
		#endif
		ac_KickWithCode(playerid, "", 0, 28);
	}
	ACInfo[playerid][acDead] = true;
	ACInfo[playerid][acDeathRes] = false;
	if(ACInfo[playerid][acSpawnRes] < 1) ACInfo[playerid][acSpawnTick] = GetTickCount();
	ACInfo[playerid][acSpawnRes] = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerDeath
		return ac_OnPlayerDeath(playerid, killerid, reason);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerDeath
		#undef OnPlayerDeath
	#else
		#define _ALS_OnPlayerDeath
	#endif
	#define OnPlayerDeath ac_OnPlayerDeath
	#if defined ac_OnPlayerDeath
		forward ac_OnPlayerDeath(playerid, killerid, reason);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	#if defined OnPlayerWeaponShot
		hook OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
	#else
		hook OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
	#endif
#else
	#if defined OnPlayerWeaponShot
		public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
	#else
		public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
	#endif
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	#if defined OnPlayerWeaponShot
		if(ACInfo[playerid][acACAllow][47] && !(3 <= bodypart <= 9))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Issuerid: %d, amount: %f, weaponid: %d, bodypart: %d", issuerid, amount, weaponid, bodypart);
			#endif
			ac_KickWithCode(playerid, "", 0, 47, 4);
			return 1;
		}
	#endif
	if(!ACInfo[playerid][acDead])
	{
		ACInfo[playerid][acDeathRes] = true;
		if(issuerid != INVALID_PLAYER_ID) ACInfo[playerid][acIssuerID] = issuerid;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerTakeDamage
		#if defined OnPlayerWeaponShot
			return ac_OnPlayerTakeDamage(playerid, issuerid, amount, weaponid, bodypart);
		#else
			return ac_OnPlayerTakeDamage(playerid, issuerid, amount, weaponid);
		#endif
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerTakeDamage
		#undef OnPlayerTakeDamage
	#else
		#define _ALS_OnPlayerTakeDamage
	#endif
	#define OnPlayerTakeDamage ac_OnPlayerTakeDamage
	#if defined ac_OnPlayerTakeDamage
		#if defined OnPlayerWeaponShot
			forward ac_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart);
		#else
			forward ac_OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid);
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	#if defined OnPlayerWeaponShot
		hook OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
	#else
		hook OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
	#endif
#else
	#if defined OnPlayerWeaponShot
		public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
	#else
		public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
	#endif
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	#if defined OnPlayerWeaponShot
		if(ACInfo[playerid][acACAllow][47] && (!(0 <= damagedid < MAX_PLAYERS) || !(3 <= bodypart <= 9)))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Damagedid: %d, amount: %f, weaponid: %d, bodypart: %d", damagedid, amount, weaponid, bodypart);
			#endif
			ac_KickWithCode(playerid, "", 0, 47, 3);
			return 1;
		}
	#else
		if(ACInfo[playerid][acACAllow][47] && !(0 <= damagedid < MAX_PLAYERS))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Damagedid: %d, amount: %f, weaponid: %d", damagedid, amount, weaponid);
			#endif
			ac_KickWithCode(playerid, "", 0, 47, 3);
			return 1;
		}
	#endif
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerGiveDamage
		#if defined OnPlayerWeaponShot
			return ac_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid, bodypart);
		#else
			return ac_OnPlayerGiveDamage(playerid, damagedid, amount, weaponid);
		#endif
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerGiveDamage
		#undef OnPlayerGiveDamage
	#else
		#define _ALS_OnPlayerGiveDamage
	#endif
	#define OnPlayerGiveDamage ac_OnPlayerGiveDamage
	#if defined ac_OnPlayerGiveDamage
		#if defined OnPlayerWeaponShot
			forward ac_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart);
		#else
			forward ac_OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid);
		#endif
	#endif
#endif

#endif

#if defined FILTERSCRIPT

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
#else
	public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
#endif
{
	if(dialogid != AntiCheatGetDialog(playerid))
	{
		new ac_nd = fs_AntiCheatGetNextDialog(playerid);
		if(dialogid == ac_nd) fs_AntiCheatSetDialog(playerid, ac_nd);
	}
	fs_AntiCheatSetNextDialog(playerid, -1);
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_fs_OnDialogResponse
		return ac_fs_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnDialogResponse
		#undef OnDialogResponse
	#else
		#define _ALS_OnDialogResponse
	#endif
	#define OnDialogResponse ac_fs_OnDialogResponse
	#if defined ac_fs_OnDialogResponse
		forward ac_fs_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
	#endif
#endif

#else

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
#else
	public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_i = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_i < ACInfo[playerid][acCall][0] + ac_Mtfc[0][0]) ac_FloodDetect(playerid, 0);
		else if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][0] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	if(ACInfo[playerid][acACAllow][39] && (dialogid != ACInfo[playerid][acDialog] || listitem < -1))
	{
		#if defined DEBUG
			printf("[Nex-AC debug] AC dialog: %d, dialogid: %d, listitem: %d, playerid: %d",
			ACInfo[playerid][acDialog], dialogid, listitem, playerid);
		#endif
		ac_KickWithCode(playerid, "", 0, 39);
		return 1;
	}
	ACInfo[playerid][acDialog] = -1;
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][0] = ac_i;
	if(ACInfo[playerid][acACAllow][45])
	{
		for(ac_i = strlen(inputtext) - 1; ac_i >= 0; --ac_i)
		{
			if(inputtext[ac_i] == '%') strdel(inputtext, ac_i, ac_i + 1);
		}
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnDialogResponse
		return ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnDialogResponse
		#undef OnDialogResponse
	#else
		#define _ALS_OnDialogResponse
	#endif
	#define OnDialogResponse ac_OnDialogResponse
	#if defined ac_OnDialogResponse
		forward ac_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnEnterExitModShop(playerid, enterexit, interiorid)
#else
	public OnEnterExitModShop(playerid, enterexit, interiorid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if !AC_USE_TUNING_GARAGES
		if(ACInfo[playerid][acACAllow][23]) ac_KickWithCode(playerid, "", 0, 23, 1);
	#else
		if(ACInfo[playerid][acACAllow][23] &&
		(!(0 <= enterexit <= 1) || !(0 <= interiorid <= 3))) ac_KickWithCode(playerid, "", 0, 23, 7);
	#endif
	new ac_i = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_i < ACInfo[playerid][acCall][1] + ac_Mtfc[1][0]) ac_FloodDetect(playerid, 1);
		else if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][1] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acModShop] = !!enterexit;
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][1] = ac_i;
	ACInfo[playerid][acSetPosTick] = ACInfo[playerid][acGtc][11] = ac_i + 3250;
	new ac_vehid = ACInfo[playerid][acVeh];
	if(ACInfo[playerid][acKicked] < 1)
	{
		ac_i = interiorid % 256;
		ACVehInfo[ac_vehid][acInt] = ac_i;
		#if defined foreach
			foreach(new ac_j : Player)
			{
				if(ACInfo[ac_j][acVeh] == ac_vehid) ACInfo[ac_j][acInt] = ac_i;
			}
		#else
			#if defined GetPlayerPoolSize
				for(new ac_j = GetPlayerPoolSize(); ac_j >= 0; --ac_j)
			#else
				for(new ac_j = MAX_PLAYERS - 1; ac_j >= 0; --ac_j)
			#endif
			{
				if(IsPlayerInVehicle(ac_j, ac_vehid)) ACInfo[ac_j][acInt] = ac_i;
			}
		#endif
	}
	else
	{
		#if defined foreach
			foreach(new ac_j : Player)
			{
				if(ACInfo[ac_j][acVeh] == ac_vehid)
				{
					if(ACInfo[ac_j][acUnFrozen]) ACInfo[ac_j][acIntRet] = 2;
					else ACInfo[ac_j][acIntRet] = 1;
				}
			}
		#else
			#if defined GetPlayerPoolSize
				for(new ac_j = GetPlayerPoolSize(); ac_j >= 0; --ac_j)
			#else
				for(new ac_j = MAX_PLAYERS - 1; ac_j >= 0; --ac_j)
			#endif
			{
				if(IsPlayerInVehicle(ac_j, ac_vehid))
				{
					if(ACInfo[ac_j][acUnFrozen]) ACInfo[ac_j][acIntRet] = 2;
					else ACInfo[ac_j][acIntRet] = 1;
				}
			}
		#endif
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnEnterExitModShop
		return ac_OnEnterExitModShop(playerid, enterexit, interiorid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnEnterExitModShop
		#undef OnEnterExitModShop
	#else
		#define _ALS_OnEnterExitModShop
	#endif
	#define OnEnterExitModShop ac_OnEnterExitModShop
	#if defined ac_OnEnterExitModShop
		forward ac_OnEnterExitModShop(playerid, enterexit, interiorid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
#else
	public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	if(ACInfo[playerid][acIntRet] > 0)
	{
		SetPlayerInterior(playerid, ACInfo[playerid][acInt]);
		if(ACInfo[playerid][acIntRet] == 2) TogglePlayerControllable(playerid, 1);
		ACInfo[playerid][acIntRet] = 0;
	}
	else if(newinteriorid != ACInfo[playerid][acSet][0])
	{
		if(ACInfo[playerid][acSet][0] == -1)
		{
			new ac_vehid = GetPlayerVehicleID(playerid);
			if(ac_vehid > 0)
			{
				if(ACInfo[playerid][acACAllow][3] && newinteriorid != ACInfo[playerid][acInt])
				{
					#if defined DEBUG
						printf("[Nex-AC debug] AC interior: %d, acInt (last): %d, newinteriorid: %d, oldinteriorid: %d, veh: %d",
						ACInfo[playerid][acSet][0], ACInfo[playerid][acInt], newinteriorid, oldinteriorid, ac_vehid);
					#endif
					ac_KickWithCode(playerid, "", 0, 3, 1);
				}
			}
			else if(ACInfo[playerid][acIntEnterExits])
			{
				GetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
				ACInfo[playerid][acSetPosTick] = ACInfo[playerid][acGtc][11] = GetTickCount() + 3250;
				ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
				ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
			}
			else if(ACInfo[playerid][acACAllow][2] && newinteriorid != ACInfo[playerid][acInt])
			{
				#if defined DEBUG
					printf("[Nex-AC debug] AC interior: %d, acInt (last): %d, newinteriorid: %d, oldinteriorid: %d",
					ACInfo[playerid][acSet][0], ACInfo[playerid][acInt], newinteriorid, oldinteriorid);
				#endif
				ac_KickWithCode(playerid, "", 0, 2, 1);
			}
		}
	}
	else ACInfo[playerid][acSet][0] = -1;
	if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acInt] = newinteriorid % 256;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerInteriorChange
		return ac_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerInteriorChange
		#undef OnPlayerInteriorChange
	#else
		#define _ALS_OnPlayerInteriorChange
	#endif
	#define OnPlayerInteriorChange ac_OnPlayerInteriorChange
	#if defined ac_OnPlayerInteriorChange
		forward ac_OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnRconLoginAttempt(ip[], password[], success)
#else
	public OnRconLoginAttempt(ip[], password[], success)
#endif
{
	static ac_ipTables[MAX_PLAYERS][2], ac_ipIndex;
	new ac_i, ac_currentIp = ac_IpToInt(ip);
	for(; ac_i < ac_ipIndex && ac_i < sizeof ac_ipTables; ++ac_i)
	{
		if(ac_ipTables[ac_i][0] == ac_currentIp)
		{
			if(success) ac_ipTables[ac_i][1] = 0;
			else if(ac_ACAllow[42])
			{
				if(++ac_ipTables[ac_i][1] > AC_MAX_RCON_LOGIN_ATTEMPT)
				{
					#if defined DEBUG
						printf(DEBUG_CODE_4, ip, password);
					#endif
					ac_ipTables[ac_i][1] = 0;
					ac_KickWithCode(INVALID_PLAYER_ID, ip, 1, 42, 1);
				}
				#if defined OnCheatWarning
					else OnCheatWarning(INVALID_PLAYER_ID, ip, 1, 42, 1, ac_ipTables[ac_i][1]);
				#endif
			}
			ac_i = -1;
			break;
		}
	}
	if(ac_i != -1 && !success)
	{
		ac_ipTables[ac_ipIndex][0] = ac_currentIp;
		if(ac_ACAllow[42])
		{
			if(++ac_ipTables[ac_ipIndex][1] > AC_MAX_RCON_LOGIN_ATTEMPT)
			{
				#undef AC_MAX_RCON_LOGIN_ATTEMPT
				#if defined DEBUG
					printf(DEBUG_CODE_4, ip, password, ac_ipTables[ac_ipIndex][1]);
				#endif
				ac_ipTables[ac_ipIndex][1] = 0;
				ac_KickWithCode(INVALID_PLAYER_ID, ip, 1, 42, 2);
			}
			#if defined OnCheatWarning
				else OnCheatWarning(INVALID_PLAYER_ID, ip, 1, 42, 2, ac_ipTables[ac_ipIndex][1]);
			#endif
		}
		if(++ac_ipIndex >= sizeof ac_ipTables) ac_ipIndex = 0;
		ac_ipTables[ac_ipIndex][1] = 0;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnRconLoginAttempt
		return ac_OnRconLoginAttempt(ip, password, success);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnRconLoginAttempt
		#undef OnRconLoginAttempt
	#else
		#define _ALS_OnRconLoginAttempt
	#endif
	#define OnRconLoginAttempt ac_OnRconLoginAttempt
	#if defined ac_OnRconLoginAttempt
		forward ac_OnRconLoginAttempt(ip[], password[], success);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerUpdate(playerid)
#else
	public OnPlayerUpdate(playerid)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount(), ac_gpp;
	if(!IsPlayerNPC(playerid))
	{
		new ac_w, ac_sa = GetPlayerState(playerid);
		if(ac_sa != PLAYER_STATE_SPECTATING && (ac_w = GetPlayerWeapon(playerid)) != -1)
		{
			ac_gpp = GetPlayerPing(playerid);
			new ac_a = GetPlayerAmmo(playerid), ac_s = ac_wSlot[ac_w];
			if(ACInfo[playerid][acSet][3] != -1)
			{
				if(ACInfo[playerid][acSet][3] == ac_w)
				{
					ACInfo[playerid][acSet][3] =
					ACInfo[playerid][acSetWeapon][ac_s] = -1;
					ACInfo[playerid][acWeapon][ac_s] = ac_w;
				}
				else if(ACInfo[playerid][acGiveAmmo][ac_wSlot[ACInfo[playerid][acSet][3]]] == 0 ||
				ac_wSlot[ACInfo[playerid][acSet][3]] != ac_s && ac_gtc > ACInfo[playerid][acGtc][2] + ac_gpp) ACInfo[playerid][acSet][3] = -1;
				else if(!(PLAYER_STATE_DRIVER <= ac_sa <= PLAYER_STATE_PASSENGER) && ac_gtc > ACInfo[playerid][acGtc][2] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][0])
					{
						if(++ACInfo[playerid][acNOPCount][0] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerArmedWeapon");
								printf("[Nex-AC debug] AC weapon: %d, weaponid: %d", ACInfo[playerid][acSet][3], ac_w);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 1);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSetWeapon][ac_s] = ACInfo[playerid][acSet][3] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 1);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 1, ACInfo[playerid][acNOPCount][0]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][0] > AC_MAX_NOP_WARNINGS)
					{
						ACInfo[playerid][acSetWeapon][ac_s] =
						ACInfo[playerid][acSet][3] = -1;
					}
				}
			}
			if(ACInfo[playerid][acGiveAmmo][ac_s] != -65535)
			{
				if(ACInfo[playerid][acGiveAmmo][ac_s] == ac_a ||
				ACInfo[playerid][acGiveAmmo][ac_s] > ac_a && ac_gtc > ACInfo[playerid][acGtcGiveAmmo][ac_s] + ac_gpp)
				{
					ACInfo[playerid][acGiveAmmo][ac_s] = -65535;
					ACInfo[playerid][acAmmo][ac_s] = ac_a;
				}
				else if(ac_gtc > ACInfo[playerid][acGtcGiveAmmo][ac_s] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][1])
					{
						if(++ACInfo[playerid][acNOPCount][1] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerAmmo");
								printf("[Nex-AC debug] AC ammo: %d, ammo: %d, weaponid: %d",
								ACInfo[playerid][acGiveAmmo][ac_s], ac_a, ac_w);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 2);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acGiveAmmo][ac_s] = -65535;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 2);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 2, ACInfo[playerid][acNOPCount][1]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][1] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acGiveAmmo][ac_s] = -65535;
				}
			}
			#if AC_USE_AMMUNATIONS || AC_USE_TUNING_GARAGES
				new ac_money = orig_GetPlayerMoney(playerid);
			#endif
			#if AC_USE_AMMUNATIONS
				if(ACInfo[playerid][acSet][10] != -1)
				{
					if(ac_money < ACInfo[playerid][acMoney] &&
					ACInfo[playerid][acSet][10] <= ACInfo[playerid][acMoney] - ac_money) ACInfo[playerid][acSet][10] = -1;
					else if(ac_gtc > ACInfo[playerid][acGtc][15] + ac_gpp)
					{
						if(ACInfo[playerid][acACAllow][15])
						{
							if(++ACInfo[playerid][acCheatCount][10] > AC_MAX_NOP_WARNINGS)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Money: %d, old money: %d, price: %d",
									ac_money, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][10]);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 15, 3);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acSet][10] = -1;
								#else
									return ac_KickWithCode(playerid, "", 0, 15, 3);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 15, 3, ACInfo[playerid][acCheatCount][10]);
							#endif
						}
						else if(++ACInfo[playerid][acCheatCount][10] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][10] = -1;
					}
				}
			#endif
			new ac_i = GetPlayerInterior(playerid), Float:ac_pX, Float:ac_pY, Float:ac_pZ, Float:ac_tmp;
			GetPlayerPos(playerid, ac_pX, ac_pY, ac_pZ);
			if(ACInfo[playerid][acLastWeapon] != ac_w)
			{
				if(ACInfo[playerid][acWeapon][ac_s] != ac_w && ac_gtc > ACInfo[playerid][acGtc][7] + ac_gpp)
				{
					#if AC_USE_PICKUP_WEAPONS
						#if defined Streamer_GetDistanceToItem\
							&& defined Streamer_GetIntData
						if(ACInfo[playerid][acLastPickup] > MAX_PICKUPS) Streamer_GetDistanceToItem(ac_pX, ac_pY, ac_pZ, STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, ac_tmp);
						if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS && ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == ac_w &&
						ac_a <= (3 <= ac_s <= 5 ? ACInfo[playerid][acAmmo][ac_s] + ac_pAmmo[ac_w] : ac_pAmmo[ac_w]) &&
						IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
						ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]) ||
						ACInfo[playerid][acLastPickup] > MAX_PICKUPS &&
						Streamer_GetIntData(STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, E_STREAMER_EXTRA_ID) == ac_w + 100 &&
						ac_a <= (3 <= ac_s <= 5 ? ACInfo[playerid][acAmmo][ac_s] + ac_pAmmo[ac_w] : ac_pAmmo[ac_w]) && ac_tmp <= 15.0)
						#else
						if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS && ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == ac_w &&
						ac_a <= (3 <= ac_s <= 5 ? ACInfo[playerid][acAmmo][ac_s] + ac_pAmmo[ac_w] : ac_pAmmo[ac_w]) &&
						IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
						ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]))
						#endif
						{
							ACInfo[playerid][acWeapon][ac_s] = ac_w;
							ACInfo[playerid][acAmmo][ac_s] = ac_a;
						}
						else
						{
					#endif
						#if AC_USE_AMMUNATIONS
							if(22 <= ac_w <= 32 && ac_InAmmuNation(playerid, ac_i))
							{
								ACInfo[playerid][acCheatCount][10] = 0;
								if(ACInfo[playerid][acSet][10] != -1) ACInfo[playerid][acSet][10] += ac_AmmuNationInfo[ac_w - 22][0];
								else ACInfo[playerid][acSet][10] = ac_AmmuNationInfo[ac_w - 22][0];
								if(3 <= ac_s <= 5) ACInfo[playerid][acAmmo][ac_s] += ac_AmmuNationInfo[ac_w - 22][1];
								else ACInfo[playerid][acAmmo][ac_s] = ac_AmmuNationInfo[ac_w - 22][1];
								ACInfo[playerid][acWeapon][ac_s] = ac_w;
								ACInfo[playerid][acGtc][15] = ac_gtc + 2650;
							}
							else
							{
						#endif
							if(ac_w == 40 || ac_w == 46 && ACInfo[playerid][acVeh] > 0 && ACInfo[playerid][acParachute] > 0)
							{
								ACInfo[playerid][acWeapon][ac_s] = ac_w;
								ACInfo[playerid][acAmmo][ac_s] = ac_a;
								ACInfo[playerid][acParachute] = 0;
							}
							else if(ACInfo[playerid][acACAllow][15] && ACInfo[playerid][acSetWeapon][ac_s] == -1)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] AC weaponid: %d, AC ammo: %d, weaponid: %d, ammo: %d",
									ACInfo[playerid][acWeapon][ac_s], ACInfo[playerid][acAmmo][ac_s], ac_w, ac_a);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 15, 1);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acWeapon][ac_s] = ac_w;
									ACInfo[playerid][acAmmo][ac_s] = ac_a;
								#else
									return ac_KickWithCode(playerid, "", 0, 15, 1);
								#endif
							}
						#if AC_USE_AMMUNATIONS
							}
						#endif
					#if AC_USE_PICKUP_WEAPONS
						}
					#endif
				}
			}
			else if(ACInfo[playerid][acAmmo][ac_s] != ac_a)
			{
				switch(ac_w)
				{
					case 16..18, 35..37, 39, 41..43:
					{
						if(ac_sa != PLAYER_STATE_DRIVER && ac_gtc > ACInfo[playerid][acGtc][7] + ac_gpp)
						{
							if(ACInfo[playerid][acACAllow][16] &&
							(ACInfo[playerid][acAmmo][ac_s] == 0 || ac_a > ACInfo[playerid][acAmmo][ac_s] ||
							ac_a < 0 < ACInfo[playerid][acAmmo][ac_s]))
							{
								#if defined DEBUG
									printf("[Nex-AC debug] AC ammo: %d, ammo: %d, weaponid: %d",
									ACInfo[playerid][acAmmo][ac_s], ac_a, ac_w);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 16, 1);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 16, 1);
								#endif
							}
							ACInfo[playerid][acAmmo][ac_s] = ac_a;
						}
					}
				}
			}
			GetPlayerHealth(playerid, ac_tmp);
			new ac_health = floatround(ac_tmp, floatround_tozero);
			if(ACInfo[playerid][acSet][1] != -1)
			{
				if(ACInfo[playerid][acSet][1] > 255)
				{
					ac_health += 256 * (((ACInfo[playerid][acSet][1] - (ACInfo[playerid][acSet][1] % 256)) / 256) - 1);
					if(ACInfo[playerid][acSet][1] > ac_health + 255) ac_health += 256;
				}
				if(ACInfo[playerid][acSet][1] == ac_health || ACInfo[playerid][acDmgRes] ||
				ACInfo[playerid][acSet][1] > ac_health && ac_gtc > ACInfo[playerid][acGtc][3] + ac_gpp)
				{
					ACInfo[playerid][acSet][1] = -1;
					ACInfo[playerid][acDmgRes] = 0;
				}
				else if(ac_gtc > ACInfo[playerid][acGtc][3] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][3])
					{
						if(++ACInfo[playerid][acNOPCount][3] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerHealth");
								printf("[Nex-AC debug] AC health: %d, health: %d", ACInfo[playerid][acSet][1], ac_health);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 3);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][1] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 3);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 3, ACInfo[playerid][acNOPCount][3]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][3] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][1] = -1;
				}
			}
			else if(ACInfo[playerid][acACAllow][12])
			{
				if(ACInfo[playerid][acHealth] > 255)
				{
					ac_health += 256 * (((ACInfo[playerid][acHealth] - (ACInfo[playerid][acHealth] % 256)) / 256) - 1);
					if(ACInfo[playerid][acHealth] > ac_health + 255) ac_health += 256;
				}
				if(ac_health > ACInfo[playerid][acHealth])
				{
					#if AC_USE_RESTAURANTS
						if(ac_health > ACInfo[playerid][acHealth] + 70 || !ac_InRestaurant(playerid, ac_i))
						{
					#endif
						#if AC_USE_VENDING_MACHINES
							if(ac_health > ACInfo[playerid][acHealth] + 35 || !ac_NearVendingMachine(playerid, ac_i))
							{
						#endif
							#if defined DEBUG
								printf("[Nex-AC debug] AC health: %d, health: %d", ACInfo[playerid][acHealth], ac_health);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 12);
								if(ACInfo[playerid][acKicked] > 0) return 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 12);
							#endif
						#if AC_USE_VENDING_MACHINES
							}
						#endif
					#if AC_USE_RESTAURANTS
						}
					#endif
				}
			}
			GetPlayerArmour(playerid, ac_tmp);
			new ac_armour = floatround(ac_tmp, floatround_tozero);
			if(ACInfo[playerid][acSet][2] != -1)
			{
				if(ACInfo[playerid][acSet][2] > 255)
				{
					ac_armour += 256 * (((ACInfo[playerid][acSet][2] - (ACInfo[playerid][acSet][2] % 256)) / 256) - 1);
					if(ACInfo[playerid][acSet][2] > ac_armour + 255) ac_armour += 256;
				}
				if(ACInfo[playerid][acSet][2] == ac_armour || ACInfo[playerid][acDmgRes] ||
				ACInfo[playerid][acSet][2] > ac_armour && ac_gtc > ACInfo[playerid][acGtc][5] + ac_gpp)
				{
					ACInfo[playerid][acSet][2] = -1;
					ACInfo[playerid][acDmgRes] = 0;
				}
				else if(ac_gtc > ACInfo[playerid][acGtc][5] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][5])
					{
						if(++ACInfo[playerid][acNOPCount][5] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "SetPlayerArmour");
								printf("[Nex-AC debug] AC armour: %d, armour: %d", ACInfo[playerid][acSet][2], ac_armour);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 4);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][2] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 4);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 4, ACInfo[playerid][acNOPCount][5]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][5] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][2] = -1;
				}
			}
			else if(ACInfo[playerid][acACAllow][13])
			{
				if(ACInfo[playerid][acArmour] > 255)
				{
					ac_armour += 256 * (((ACInfo[playerid][acArmour] - (ACInfo[playerid][acArmour] % 256)) / 256) - 1);
					if(ACInfo[playerid][acArmour] > ac_armour + 255) ac_armour += 256;
				}
				if(ac_armour > ACInfo[playerid][acArmour])
				{
					#if AC_USE_AMMUNATIONS
						if(ac_InAmmuNation(playerid, ac_i))
						{
							ACInfo[playerid][acCheatCount][10] = 0;
							if(ACInfo[playerid][acSet][10] != -1) ACInfo[playerid][acSet][10] += 200;
							else ACInfo[playerid][acSet][10] = 200;
							ACInfo[playerid][acGtc][15] = ac_gtc + 2650;
						}
						else
						{
					#endif
						#if defined DEBUG
							printf("[Nex-AC debug] AC armour: %d, armour: %d", ACInfo[playerid][acArmour], ac_armour);
						#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 13);
							if(ACInfo[playerid][acKicked] > 0) return 0;
						#else
							return ac_KickWithCode(playerid, "", 0, 13);
						#endif
					#if AC_USE_AMMUNATIONS
						}
					#endif
				}
			}
			if(ac_health < ACInfo[playerid][acHealth] || ac_armour < ACInfo[playerid][acArmour])
			{
				ACInfo[playerid][acVehDmgRes] = false;
				ACInfo[playerid][acCheatCount][9] = ACInfo[playerid][acDmgRes] = 0;
			}
			else if(ACInfo[playerid][acACAllow][19] &&
			ACInfo[playerid][acDmgRes] && ac_gtc > ACInfo[playerid][acGtc][14] + ac_gpp)
			{
				ACInfo[playerid][acDmgRes] = 0;
				ACInfo[playerid][acVehDmgRes] = false;
				if(++ACInfo[playerid][acCheatCount][9] > AC_MAX_GODMODE_WARNINGS)
				{
					#undef AC_MAX_GODMODE_WARNINGS
					#if defined DEBUG
						printf("[Nex-AC debug] AC health: %d, health: %d, AC armour: %d, armour: %d",
						ACInfo[playerid][acHealth], ac_health, ACInfo[playerid][acArmour], ac_armour);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 19);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][9] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 19);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 19, 0, ACInfo[playerid][acCheatCount][9]);
				#endif
			}
			#if AC_USE_TUNING_GARAGES
			if(ACInfo[playerid][acSet][12] != -1)
			{
				if(ac_money < ACInfo[playerid][acMoney] &&
				ACInfo[playerid][acSet][12] <= ACInfo[playerid][acMoney] - ac_money) ACInfo[playerid][acSet][12] = -1;
				else if(ac_gtc > ACInfo[playerid][acGtc][17] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][23])
					{
						if(++ACInfo[playerid][acCheatCount][12] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] Money: %d, old money: %d, component price: %d",
								ac_money, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][12]);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 23, 3);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][12] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 23, 3);
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 23, 3, ACInfo[playerid][acCheatCount][12]);
						#endif
					}
					else if(++ACInfo[playerid][acCheatCount][12] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][12] = -1;
				}
			}
			#endif
			if(ACInfo[playerid][acSet][0] != -1 && ac_gtc > ACInfo[playerid][acGtc][0] + ac_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][2] && ac_i != ACInfo[playerid][acSet][0])
				{
					if(++ACInfo[playerid][acNOPCount][2] > AC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "SetPlayerInterior");
							printf("[Nex-AC debug] AC interior: %d, interiorid: %d", ACInfo[playerid][acSet][0], ac_i);
						#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 52, 5);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][0] = -1;
						#else
							return ac_KickWithCode(playerid, "", 0, 52, 5);
						#endif
					}
					#if defined OnNOPWarning
						else OnNOPWarning(playerid, 5, ACInfo[playerid][acNOPCount][2]);
					#endif
				}
				else if(++ACInfo[playerid][acNOPCount][2] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][0] = -1;
			}
			if(ACInfo[playerid][acSet][6] != -1 && ac_gtc > ACInfo[playerid][acGtc][12] + ac_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][8])
				{
					if(++ACInfo[playerid][acNOPCount][8] > AC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "TogglePlayerSpectating");
						#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 52, 6);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][6] = -1;
						#else
							return ac_KickWithCode(playerid, "", 0, 52, 6);
						#endif
					}
					#if defined OnNOPWarning
						else OnNOPWarning(playerid, 6, ACInfo[playerid][acNOPCount][8]);
					#endif
				}
				else if(++ACInfo[playerid][acNOPCount][8] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][6] = -1;
			}
			if(ACInfo[playerid][acSet][7] != -1 && ac_gtc > ACInfo[playerid][acGtc][13] + ac_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][9])
				{
					if(++ACInfo[playerid][acNOPCount][9] > AC_MAX_NOP_WARNINGS)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "SpawnPlayer");
							printf("[Nex-AC debug] acSet[7]: %d", ACInfo[playerid][acSet][7]);
						#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 52, 7);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][7] = -1;
						#else
							return ac_KickWithCode(playerid, "", 0, 52, 7);
						#endif
					}
					#if defined OnNOPWarning
						else OnNOPWarning(playerid, 7, ACInfo[playerid][acNOPCount][9]);
					#endif
				}
				else if(++ACInfo[playerid][acNOPCount][9] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][7] = -1;
			}
			new ac_vehid = GetPlayerVehicleID(playerid);
			if(ACInfo[playerid][acSet][11] != -1 && ac_vehid > 0 && ac_gtc > ACInfo[playerid][acGtc][8] + ac_gpp)
			{
				if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][11])
				{
					new Float:ac_vX, Float:ac_vY, Float:ac_vZ;
					GetVehicleVelocity(ac_vehid, ac_vX, ac_vY, ac_vZ);
					if(ac_GetSpeed(ac_vX, ac_vY, ac_vZ) <= 30)
					{
						#if defined DEBUG
							printf(DEBUG_CODE_5, playerid, "RemovePlayerFromVehicle");
							printf("[Nex-AC debug] Veh model: %d", GetVehicleModel(ac_vehid));
						#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 52, 8);
							if(ACInfo[playerid][acKicked] > 0) return 0;
							ACInfo[playerid][acSet][11] = -1;
						#else
							return ac_KickWithCode(playerid, "", 0, 52, 8);
						#endif
					}
				}
				else ACInfo[playerid][acSet][11] = -1;
			}
			ac_s = GetPlayerVehicleSeat(playerid);
			if(ACInfo[playerid][acSet][9] != -1)
			{
				if(ACInfo[playerid][acSet][9] == ac_vehid &&
				(ACInfo[playerid][acSet][5] == ac_s || ACInfo[playerid][acSet][5] == -1))
				{
					if(ACInfo[playerid][acVeh] > 0)
					{
						if(ac_IsAnAircraft(GetVehicleModel(ACInfo[playerid][acVeh]))) ACInfo[playerid][acParachute] = 2;
						if(ACVehInfo[ACInfo[playerid][acVeh]][acDriver] == playerid) ACVehInfo[ACInfo[playerid][acVeh]][acDriver] = INVALID_PLAYER_ID;
					}
					if(ac_s == 0)
					{
						ACVehInfo[ac_vehid][acDriver] = playerid;
						GetVehicleZAngle(ac_vehid, ACVehInfo[ac_vehid][acZAngle]);
						ACInfo[playerid][acSetVehHealth] = -1.0;
						ACInfo[playerid][acLastPosX] = ac_pX;
						ACInfo[playerid][acLastPosY] = ac_pY;
					}
					ACInfo[playerid][acEnterVeh] =
					ACInfo[playerid][acCheatCount][11] = 0;
					ACInfo[playerid][acVehDmgRes] = false;
					ACInfo[playerid][acSet][11] =
					ACInfo[playerid][acSet][9] =
					ACInfo[playerid][acSet][8] = -1;
					ACInfo[playerid][acSeat] = ac_s;
				}
				else if(ac_gtc > ACInfo[playerid][acGtc][1] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][7] &&
					ACInfo[playerid][acSet][5] != -1 && ACVehInfo[ACInfo[playerid][acSet][9]][acSpawned])
					{
						if(++ACInfo[playerid][acNOPCount][7] > AC_MAX_NOP_WARNINGS)
						{
							#if defined DEBUG
								printf(DEBUG_CODE_5, playerid, "PutPlayerInVehicle");
								printf("[Nex-AC debug] AC veh: %d, veh: %d, AC seat: %d, seatid: %d",
								ACInfo[playerid][acSet][9], ac_vehid, ACInfo[playerid][acSet][5], ac_s);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 52, 9);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acSet][9] = -1;
							#else
								return ac_KickWithCode(playerid, "", 0, 52, 9);
							#endif
						}
						#if defined OnNOPWarning
							else OnNOPWarning(playerid, 9, ACInfo[playerid][acNOPCount][7]);
						#endif
					}
					else if(++ACInfo[playerid][acNOPCount][7] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][9] = -1;
				}
			}
			else
			{
				new Float:ac_dist_set = 25000.0;
				if(ACInfo[playerid][acSet][8] != -1)
				{
					ac_dist_set = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], (ACInfo[playerid][acTpToZ] ? ac_pZ : ACInfo[playerid][acSetPosZ]));
					if(ac_dist_set < 15.0)
					{
						ACInfo[playerid][acSet][8] = -1;
						ACInfo[playerid][acGtc][11] = 0;
						ACInfo[playerid][acTpToZ] = false;
						ACInfo[playerid][acLastPosX] = ac_pX;
						ACInfo[playerid][acLastPosY] = ac_pY;
						ACInfo[playerid][acPosX] = ac_pX;
						ACInfo[playerid][acPosY] = ac_pY;
						ACInfo[playerid][acPosZ] = ac_pZ;
					}
					else if(ac_gtc > ACInfo[playerid][acGtc][11] + ac_gpp)
					{
						if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][10])
						{
							if(++ACInfo[playerid][acNOPCount][10] > AC_MAX_NOP_WARNINGS)
							{
								#if defined DEBUG
									printf(DEBUG_CODE_5, playerid, "SetPlayerPos");
									printf("[Nex-AC debug] Dist: %f, acSet[8]: %d", ac_dist_set, ACInfo[playerid][acSet][8]);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 52, 10);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acTpToZ] = false;
									ACInfo[playerid][acSet][8] = -1;
								#else
									return ac_KickWithCode(playerid, "", 0, 52, 10);
								#endif
							}
							#if defined OnNOPWarning
								else OnNOPWarning(playerid, 10, ACInfo[playerid][acNOPCount][10]);
							#endif
						}
						else if(++ACInfo[playerid][acNOPCount][10] > AC_MAX_NOP_WARNINGS)
						{
							ACInfo[playerid][acTpToZ] = false;
							ACInfo[playerid][acSet][8] = -1;
						}
					}
				}
				new Float:ac_vX, Float:ac_vY, Float:ac_vZ, ac_specact = GetPlayerSpecialAction(playerid),
				Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
				if(ac_vehid > 0)
				{
					if(ACInfo[playerid][acVeh] > 0)
					{
						if(ACInfo[playerid][acVeh] != ac_vehid)
						{
							if(ACInfo[playerid][acACAllow][4])
							{
								#if defined DEBUG
									printf("[Nex-AC debug] AC veh: %d, veh: %d", ACInfo[playerid][acVeh], ac_vehid);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 4, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 4, 2);
								#endif
							}
						}
						else if(ACInfo[playerid][acACAllow][50] && ACInfo[playerid][acSeat] != ac_s)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] AC seat: %d, seatid: %d, veh: %d", ACInfo[playerid][acSeat], ac_s, ac_vehid);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 50);
								if(ACInfo[playerid][acKicked] > 0) return 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 50);
							#endif
						}
					}
					if(ac_sa == PLAYER_STATE_DRIVER)
					{
						if(ACInfo[playerid][acACAllow][32] &&
						ACVehInfo[ac_vehid][acDriver] != INVALID_PLAYER_ID && ACVehInfo[ac_vehid][acDriver] != playerid)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] AC driver: %d, driver: %d, veh: %d",
								ACVehInfo[ac_vehid][acDriver], playerid, ac_vehid);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 32);
								if(ACInfo[playerid][acKicked] > 0) return 0;
							#else
								return SetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
							#endif
						}
						new Float:ac_vHealth;
						GetVehicleHealth(ac_vehid, ac_vHealth);
						if(ACInfo[playerid][acSetVehHealth] != -1.0)
						{
							if(ACInfo[playerid][acSetVehHealth] == ac_vHealth ||
							ACInfo[playerid][acSetVehHealth] > ac_vHealth && ac_gtc > ACInfo[playerid][acGtc][4] + ac_gpp)
							{
								ACInfo[playerid][acSetVehHealth] = -1.0;
								ACInfo[playerid][acVehDmgRes] = false;
							}
							else if(ac_gtc > ACInfo[playerid][acGtc][4] + ac_gpp)
							{
								if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][4])
								{
									if(++ACInfo[playerid][acNOPCount][4] > AC_MAX_NOP_WARNINGS)
									{
										#if defined DEBUG
											printf(DEBUG_CODE_5, playerid, "SetVehicleHealth");
											printf("[Nex-AC debug] AC veh health: %f, veh health: %f, veh: %d",
											ACInfo[playerid][acSetVehHealth], ac_vHealth, ac_vehid);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 52, 11);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acSetVehHealth] = -1.0;
										#else
											return ac_KickWithCode(playerid, "", 0, 52, 11);
										#endif
									}
									#if defined OnNOPWarning
										else OnNOPWarning(playerid, 11, ACInfo[playerid][acNOPCount][4]);
									#endif
								}
								else if(++ACInfo[playerid][acNOPCount][4] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSetVehHealth] = -1.0;
							}
						}
						else if(ACInfo[playerid][acACAllow][11] &&
						ac_vHealth > ACVehInfo[ac_vehid][acHealth] && !ACInfo[playerid][acModShop] && ac_vHealth)
						{
							#if AC_USE_PAYNSPRAY
								if(!ac_InPayNSpray(playerid, ac_i))
								{
							#endif
								#if defined DEBUG
									printf("[Nex-AC debug] AC veh health: %f, veh health: %f, veh: %d, playerid: %d",
									ACVehInfo[ac_vehid][acHealth], ac_vHealth, ac_vehid, playerid);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 11);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#endif
								SetVehicleHealth(ac_vehid, ACVehInfo[ac_vehid][acHealth]);
							#if AC_USE_PAYNSPRAY
								}
							#endif
						}
						if(ACInfo[playerid][acVehDmgRes])
						{
							if(ac_vHealth < ACVehInfo[ac_vehid][acHealth])
							{
								ACInfo[playerid][acVehDmgRes] = false;
								ACInfo[playerid][acCheatCount][11] = ACInfo[playerid][acDmgRes] = 0;
							}
							else if(ACInfo[playerid][acACAllow][20] && ac_gtc > ACInfo[playerid][acGtc][16] + ac_gpp)
							{
								ACInfo[playerid][acDmgRes] = 0;
								ACInfo[playerid][acVehDmgRes] = false;
								if(++ACInfo[playerid][acCheatCount][11] > AC_MAX_GODMODE_VEH_WARNINGS)
								{
									#undef AC_MAX_GODMODE_VEH_WARNINGS
									#if defined DEBUG
										printf("[Nex-AC debug] AC veh health: %f, veh health: %f, veh: %d",
										ACVehInfo[ac_vehid][acHealth], ac_vHealth, ac_vehid);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 20);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][11] = 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 20);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 20, 0, ACInfo[playerid][acCheatCount][11]);
								#endif
							}
						}
						GetVehicleVelocity(ac_vehid, ac_vX, ac_vY, ac_vZ);
						new Float:ac_zAngle, ac_vsp = ac_GetSpeed(ac_vX, ac_vY, ac_vZ);
						GetVehicleZAngle(ac_vehid, ac_zAngle);
						if(ac_dist > 0.8)
						{
							if(ac_dist >= 80.0 && ac_dist > ACVehInfo[ac_vehid][acPosDiff] + ((ac_dist / 2.6) * 1.8) &&
							ac_dist_set >= 80.0 && ac_dist_set > ACVehInfo[ac_vehid][acPosDiff] + ((ac_dist_set / 2.6) * 1.8))
							{
								#if defined VectorSize
								if(ACInfo[playerid][acACAllow][3] &&
								(ACInfo[playerid][acPosZ] > -95.0 || ac_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								VectorSize(ac_pX - ACInfo[playerid][acPosX], ac_pY - ACInfo[playerid][acPosY], 0.0) >= 180.0))
								#else
								if(ACInfo[playerid][acACAllow][3] &&
								(ACInfo[playerid][acPosZ] > -95.0 || ac_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								floatsqroot(floatpower(ac_pX - ACInfo[playerid][acPosX], 2.0) + floatpower(ac_pY - ACInfo[playerid][acPosY], 2.0)) >= 180.0))
								#endif
								{
									#if defined DEBUG
										printf("[Nex-AC debug] Dist: %f, dist set: %f, old pos diff: %f, speed: %d, veh: %d",
										ac_dist, ac_dist_set, ACVehInfo[ac_vehid][acPosDiff], ac_vsp, ac_vehid);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 3, 2);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 3, 2);
									#endif
								}
								else
								{
									ACInfo[playerid][acLastPosX] = ac_pX;
									ACInfo[playerid][acLastPosY] = ac_pY;
								}
							}
							else if(ACInfo[playerid][acACAllow][1] && ac_vsp < 12 && ac_gtc > ACInfo[playerid][acGtc][11] + ac_gpp)
							{
								if(++ACInfo[playerid][acCheatCount][2] > AC_MAX_AIR_VEH_WARNINGS)
								{
									#undef AC_MAX_AIR_VEH_WARNINGS
									#if defined DEBUG
										printf("[Nex-AC debug] Speed: %d, dist: %f, veh: %d", ac_vsp, ac_dist, ac_vehid);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 1);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][2] = 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 1);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 1, 0, ACInfo[playerid][acCheatCount][2]);
								#endif
							}
						}
						if(ac_gtc > ACInfo[playerid][acGtc][9] + ac_gpp)
						{
							ac_i = GetVehicleModel(ac_vehid);
							new ac_spDiff = ac_vsp - ac_GetSpeed(ACVehInfo[ac_vehid][acVelX], ACVehInfo[ac_vehid][acVelY], ACVehInfo[ac_vehid][acVelZ]);
							if(ACInfo[playerid][acACAllow][10])
							{
								if(ac_spDiff > 270)
								{
									#if defined DEBUG
										printf("[Nex-AC debug] Speed: %d, old speed: %d, veh model: %d",
										ac_vsp, ac_vsp - ac_spDiff, ac_i);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 10, 3);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 10, 3);
									#endif
								}
								else if(ac_spDiff >= 20 &&
								ACVehInfo[ac_vehid][acSpeedDiff] <= ac_spDiff && ACVehInfo[ac_vehid][acHealth] <= ac_vHealth &&
								!((ac_i == 432 || ac_i == 449 || 537 <= ac_i <= 538) && ac_spDiff < 65 ||
								ac_IsABicycle(ac_i) && floatabs(ac_vX) <= 0.3 && floatabs(ac_vY) <= 0.3 && floatabs(ac_vZ) <= 0.3 ||
								!(ac_IsABicycle(ac_i) || ac_i == 449 || 537 <= ac_i <= 538) && ACVehInfo[ac_vehid][acHealth] < 250.0))
								{
									ACInfo[playerid][acCheatCount][16] += (1 * AC_SPEEDHACK_VEH_RESET_DELAY);
									if(ACInfo[playerid][acCheatCount][16] > AC_MAX_SPEEDHACK_VEH_WARNINGS)
									{
										#if defined DEBUG
											printf("[Nex-AC debug] Speed: %d, old speed: %d, veh model: %d",
											ac_vsp, ac_vsp - ac_spDiff, ac_i);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 10, 1);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][16] = 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 10, 1);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 10, 1, ACInfo[playerid][acCheatCount][16]);
									#endif
								}
							}
							if(ACInfo[playerid][acACAllow][25] &&
							ac_vsp > 15 && ac_abs(ac_spDiff) < 25 &&
							floatround(floatabs(ac_zAngle - ACVehInfo[ac_vehid][acZAngle])) == 180 &&
							(ac_vX < 0.0) != (ACVehInfo[ac_vehid][acVelX] < 0.0) &&
							(ac_vY < 0.0) != (ACVehInfo[ac_vehid][acVelY] < 0.0) &&
							(ac_vZ < 0.0) != (ACVehInfo[ac_vehid][acVelZ] < 0.0))
							{
								#undef ac_abs
								#if defined DEBUG
									printf("[Nex-AC debug] Speed: %d, speed diff: %d, z angle: %f, old z angle: %f, veh: %d",
									ac_vsp, ac_spDiff, ac_zAngle, ACVehInfo[ac_vehid][acZAngle], ac_vehid);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 25);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 25);
								#endif
							}
							if(ac_IsAnAircraft(ac_i))
							{
								if(ACInfo[playerid][acACAllow][10] && (ac_vsp = ac_GetSpeed(ac_vX, ac_vY)) > 270)
								{
									#if defined DEBUG
										printf("[Nex-AC debug] Speed (x, y): %d, veh model: %d", ac_vsp, ac_i);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 10, 2);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 10, 2);
									#endif
								}
							}
							else if(ACInfo[playerid][acACAllow][8])
							{
								new Float:ac_zDiff = ac_pZ - ACInfo[playerid][acPosZ];
								if(ac_vZ >= 0.1 && ac_vZ > ACVehInfo[ac_vehid][acVelZ] &&
								floatabs(ACInfo[playerid][acPosX] - ac_pX) < ac_zDiff / 2.0 &&
								floatabs(ACInfo[playerid][acPosY] - ac_pY) < ac_zDiff / 2.0)
								{
									if(++ACInfo[playerid][acCheatCount][3] > (ac_IsABicycle(ac_i) ? AC_MAX_FLYHACK_BIKE_WARNINGS : AC_MAX_FLYHACK_VEH_WARNINGS))
									{
										#undef AC_MAX_FLYHACK_BIKE_WARNINGS
										#if defined DEBUG
											printf("[Nex-AC debug] Vel z: %f, old vel z: %f, pos diff x, y, z: %f, %f, %f, veh: %d",
											ac_vZ, ACVehInfo[ac_vehid][acVelZ], ACInfo[playerid][acPosX] - ac_pX, ACInfo[playerid][acPosY] - ac_pY, ac_zDiff, ac_vehid);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 8, 1);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][3] = 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 8, 1);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 8, 1, ACInfo[playerid][acCheatCount][3]);
									#endif
								}
								else ACInfo[playerid][acCheatCount][3] = 0;
							}
							ACVehInfo[ac_vehid][acSpeedDiff] = ac_spDiff;
						}
						ACVehInfo[ac_vehid][acPosX] = ac_pX;
						ACVehInfo[ac_vehid][acPosY] = ac_pY;
						ACVehInfo[ac_vehid][acPosZ] = ac_pZ;
						ACVehInfo[ac_vehid][acVelX] = ac_vX;
						ACVehInfo[ac_vehid][acVelY] = ac_vY;
						ACVehInfo[ac_vehid][acVelZ] = ac_vZ;
						ACVehInfo[ac_vehid][acPosDiff] = ac_dist;
						if(ACInfo[playerid][acSetVehHealth] == -1.0) ACVehInfo[ac_vehid][acHealth] = ac_vHealth;
						ACVehInfo[ac_vehid][acZAngle] = ac_zAngle;
					}
					ACInfo[playerid][acSeat] = ac_s;
				}
				else
				{
					GetPlayerVelocity(playerid, ac_vX, ac_vY, ac_vZ);
					ac_s = ac_GetSpeed(ac_vX, ac_vY, ac_vZ);
					if(ACInfo[playerid][acAnim] != (ac_sa = GetPlayerAnimationIndex(playerid)))
					{
						if(ac_sa == -1)
						{
							if(ACInfo[playerid][acACAllow][24])
							{
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 24);
									if(ACInfo[playerid][acKicked] > 0) return 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 24);
								#endif
							}
						}
						else if(ACInfo[playerid][acACAllow][30] && !ac_PedAnims)
						{
							ac_i = GetPlayerSkin(playerid);
							if(ac_sa == 1231 && ac_w != 46 && 1 <= ac_i <= 311 && ac_i != 74)
							{
								if(++ACInfo[playerid][acCheatCount][19] > AC_MAX_CJ_RUN_WARNINGS)
								{
									#undef AC_MAX_CJ_RUN_WARNINGS
									#if defined DEBUG
										printf("[Nex-AC debug] Skin: %d, old anim: %d, weaponid: %d",
										ac_i, ACInfo[playerid][acAnim], ac_w);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 30);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acCheatCount][19] = 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 30);
									#endif
								}
								#if defined OnCheatWarning
									else OnCheatWarning(playerid, "", 0, 30, 0, ACInfo[playerid][acCheatCount][19]);
								#endif
							}
							else ACInfo[playerid][acCheatCount][19] = 0;
						}
					}
					else if(ACInfo[playerid][acACAllow][7])
					{
						if(ac_sa == 157 || ac_sa == 159 || ac_sa == 161 || ac_sa == 1058)
						{
							if(++ACInfo[playerid][acCheatCount][15] > AC_MAX_FLYHACK_WARNINGS)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Anim: %d, old anim: %d, old veh: %d",
									ac_sa, ACInfo[playerid][acAnim], ACInfo[playerid][acVeh]);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 7, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][15] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 7, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 7, 2, ACInfo[playerid][acCheatCount][15]);
							#endif
						}
						else if(1538 <= ac_sa <= 1544 && ac_s > 36 && ACInfo[playerid][acSpeed] < ac_s)
						{
							if(++ACInfo[playerid][acCheatCount][15] > AC_MAX_FLYHACK_WARNINGS)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Speed: %d, old speed: %d, anim: %d",
									ac_s, ACInfo[playerid][acSpeed], ac_sa);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 7, 3);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][15] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 7, 3);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 7, 3, ACInfo[playerid][acCheatCount][15]);
							#endif
						}
						#if defined VectorSize
						else if(958 <= ac_sa <= 979 && (ac_vZ > 0.08 || VectorSize(ac_vX, ac_vY, 0.0) > 0.9))
						#else
						else if(958 <= ac_sa <= 979 && (ac_vZ > 0.08 || floatsqroot(floatpower(ac_vX, 2.0) + floatpower(ac_vY, 2.0)) > 0.9))
						#endif
						{
							if(++ACInfo[playerid][acCheatCount][15] > AC_MAX_FLYHACK_WARNINGS)
							{
								#undef AC_MAX_FLYHACK_WARNINGS
								#if defined DEBUG
									printf("[Nex-AC debug] Anim: %d, old anim: %d, weaponid: %d, spec act: %d",
									ac_sa, ACInfo[playerid][acAnim], ac_w, ac_specact);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 7, 1);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][15] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 7, 1);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 7, 1, ACInfo[playerid][acCheatCount][15]);
							#endif
						}
						else ACInfo[playerid][acCheatCount][15] = 0;
					}
					if(ACInfo[playerid][acSet][4] != -1)
					{
						if(ac_specact == ACInfo[playerid][acSet][4]) ACInfo[playerid][acSet][4] = -1;
						else if(ac_gtc > ACInfo[playerid][acGtc][6] + ac_gpp)
						{
							if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][6] &&
							ac_specact != SPECIAL_ACTION_DUCK &&
							!(SPECIAL_ACTION_ENTER_VEHICLE <= ac_specact <= SPECIAL_ACTION_EXIT_VEHICLE))
							{
								if(++ACInfo[playerid][acNOPCount][6] > AC_MAX_NOP_WARNINGS)
								{
									#if defined DEBUG
										printf(DEBUG_CODE_5, playerid, "SetPlayerSpecialAction");
										printf("[Nex-AC debug] AC spec act: %d, spec act: %d", ACInfo[playerid][acSet][4], ac_specact);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 52, 12);
										if(ACInfo[playerid][acKicked] > 0) return 0;
										ACInfo[playerid][acSet][4] = -1;
									#else
										return ac_KickWithCode(playerid, "", 0, 52, 12);
									#endif
								}
								#if defined OnNOPWarning
									else OnNOPWarning(playerid, 12, ACInfo[playerid][acNOPCount][6]);
								#endif
							}
							else if(++ACInfo[playerid][acNOPCount][6] > AC_MAX_NOP_WARNINGS) ACInfo[playerid][acSet][4] = -1;
							#undef AC_MAX_NOP_WARNINGS
						}
					}
					else if(ac_specact != ACInfo[playerid][acSpecAct])
					{
						if(ac_specact == ACInfo[playerid][acNextSpecAct]) ACInfo[playerid][acNextSpecAct] = -1;
						else if(ACInfo[playerid][acACAllow][18])
						{
							switch(ac_specact)
							{
								case SPECIAL_ACTION_NONE:
								{
									switch(ACInfo[playerid][acSpecAct])
									{
										case SPECIAL_ACTION_USECELLPHONE, SPECIAL_ACTION_CUFFED, 25:
										{
											#if defined OnCheatDetected
												ac_KickWithCode(playerid, "", 0, 18, 1);
												if(ACInfo[playerid][acKicked] > 0) return 0;
											#else
												return ac_KickWithCode(playerid, "", 0, 18, 1);
											#endif
										}
									}
								}
								case SPECIAL_ACTION_DUCK:
								{
									if(ACInfo[playerid][acSpecAct] > SPECIAL_ACTION_NONE &&
									!(SPECIAL_ACTION_DRINK_BEER <= ACInfo[playerid][acSpecAct] <= SPECIAL_ACTION_CUFFED))
									{
										#if defined DEBUG
											printf("[Nex-AC debug] AC spec act: %d, spec act: %d", ACInfo[playerid][acSpecAct], ac_specact);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 18, 2);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 18, 2);
										#endif
									}
								}
								case SPECIAL_ACTION_USEJETPACK:
								{
									if((ac_tmp = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acDropJpX], ACInfo[playerid][acDropJpY], ACInfo[playerid][acDropJpZ])) > 15.0)
									{
										#if defined DEBUG
											printf("[Nex-AC debug] AC spec act: %d, spec act: %d, dist: %f",
											ACInfo[playerid][acSpecAct], ac_specact, ac_tmp);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 18, 3);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 18, 3);
										#endif
									}
									else ACInfo[playerid][acNextSpecAct] = ACInfo[playerid][acSpecAct];
									ACInfo[playerid][acDropJpX] = ACInfo[playerid][acDropJpY] = ACInfo[playerid][acDropJpZ] = 25000.0;
								}
								case SPECIAL_ACTION_ENTER_VEHICLE:
								{
									switch(ACInfo[playerid][acSpecAct])
									{
										case SPECIAL_ACTION_DANCE1, SPECIAL_ACTION_DANCE2, SPECIAL_ACTION_DANCE3, SPECIAL_ACTION_DANCE4, SPECIAL_ACTION_USECELLPHONE, 68:
										{
											#if defined OnCheatDetected
												ac_KickWithCode(playerid, "", 0, 18, 4);
												if(ACInfo[playerid][acKicked] > 0) return 0;
											#else
												return ac_KickWithCode(playerid, "", 0, 18, 4);
											#endif
										}
									}
								}
								default:
								{
									if(!((SPECIAL_ACTION_DRINK_BEER <= ac_specact <= SPECIAL_ACTION_CUFFED &&
									ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_DUCK ||
									ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_ENTER_VEHICLE) &&
									ac_specact == ACInfo[playerid][acLastSpecAct]) &&
									(ACInfo[playerid][acVeh] == 0 || ac_specact != SPECIAL_ACTION_EXIT_VEHICLE &&
									!(SPECIAL_ACTION_CUFFED <= ac_specact <= 25) &&
									ac_specact != SPECIAL_ACTION_USECELLPHONE))
									{
										#if defined DEBUG
											printf("[Nex-AC debug] AC spec act: %d, spec act: %d, Last spec act: %d, old veh: %d",
											ACInfo[playerid][acSpecAct], ac_specact, ACInfo[playerid][acLastSpecAct], ACInfo[playerid][acVeh]);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 18, 5);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 18, 5);
										#endif
									}
								}
							}
						}
						ACInfo[playerid][acLastSpecAct] = ACInfo[playerid][acSpecAct];
					}
					if(!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(playerid), playerid) &&
					GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
					{
						if(ac_dist > 0.7)
						{
							if(ac_dist >= 40.0 && ac_dist_set >= 40.0)
							{
								#if defined VectorSize
								if(ACInfo[playerid][acACAllow][2] && !ACInfo[playerid][acIntEnterExits] &&
								(ACInfo[playerid][acPosZ] > -95.0 || ac_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								VectorSize(ac_pX - ACInfo[playerid][acPosX], ac_pY - ACInfo[playerid][acPosY], 0.0) >= 180.0))
								#else
								if(ACInfo[playerid][acACAllow][2] && !ACInfo[playerid][acIntEnterExits] &&
								(ACInfo[playerid][acPosZ] > -95.0 || ac_pZ - ACInfo[playerid][acPosZ] < 40.0 ||
								floatsqroot(floatpower(ac_pX - ACInfo[playerid][acPosX], 2.0) + floatpower(ac_pY - ACInfo[playerid][acPosY], 2.0)) >= 180.0))
								#endif
								{
									#if defined DEBUG
										printf("[Nex-AC debug] Dist: %f, dist set: %f, speed: %d, old pos x, y, z: %f, %f, %f",
										ac_dist, ac_dist_set, ac_s, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 2, 2);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 2, 2);
									#endif
								}
								else
								{
									ACInfo[playerid][acLastPosX] = ac_pX;
									ACInfo[playerid][acLastPosY] = ac_pY;
								}
							}
							else if(ac_s <= ac_dist * (ac_dist < 1.0 ? 14.0 : 5.0) && ac_gtc > ACInfo[playerid][acGtc][11] + ac_gpp)
							{
								if(ac_s < 3 && ac_dist >= 15.0)
								{
									if(ACInfo[playerid][acACAllow][2])
									{
										#if defined DEBUG
											printf("[Nex-AC debug] Speed: %d, dist: %f", ac_s, ac_dist);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 2, 3);
											if(ACInfo[playerid][acKicked] > 0) return 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 2, 3);
										#endif
									}
								}
								else if(ACInfo[playerid][acACAllow][0] && (ac_s || ac_dist >= 3.0))
								{
									if(++ACInfo[playerid][acCheatCount][1] > AC_MAX_AIR_WARNINGS)
									{
										#undef AC_MAX_AIR_WARNINGS
										#if defined DEBUG
											printf("[Nex-AC debug] Speed: %d, dist: %f", ac_s, ac_dist);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 0);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][1] = 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 0);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 0, 0, ACInfo[playerid][acCheatCount][1]);
									#endif
								}
							}
						}
						if(ac_gtc > ACInfo[playerid][acGtc][10] + ac_gpp)
						{
							if(ACInfo[playerid][acACAllow][9] && ACInfo[playerid][acSpeed] < ac_s)
							{
								if(ac_s > 530)
								{
									#if defined DEBUG
										printf("[Nex-AC debug] Speed: %d, old speed: %d", ac_s, ACInfo[playerid][acSpeed]);
									#endif
									#if defined OnCheatDetected
										ac_KickWithCode(playerid, "", 0, 9, 1);
										if(ACInfo[playerid][acKicked] > 0) return 0;
									#else
										return ac_KickWithCode(playerid, "", 0, 9, 1);
									#endif
								}
								else if((ac_s > 257 || (ac_i = ac_GetSpeed(ac_vX, ac_vY)) > 128) &&
								ACInfo[playerid][acHealth] <= ac_health)
								{
									if(++ACInfo[playerid][acCheatCount][17] > AC_MAX_SPEEDHACK_WARNINGS)
									{
										#undef AC_MAX_SPEEDHACK_WARNINGS
										#if defined DEBUG
											printf("[Nex-AC debug] Speed: %d, speed x, y: %d, old speed: %d",
											ac_s, ac_i, ACInfo[playerid][acSpeed]);
										#endif
										#if defined OnCheatDetected
											ac_KickWithCode(playerid, "", 0, 9, 2);
											if(ACInfo[playerid][acKicked] > 0) return 0;
											ACInfo[playerid][acCheatCount][17] = 0;
										#else
											return ac_KickWithCode(playerid, "", 0, 9, 2);
										#endif
									}
									#if defined OnCheatWarning
										else OnCheatWarning(playerid, "", 0, 9, 2, ACInfo[playerid][acCheatCount][17]);
									#endif
								}
								else ACInfo[playerid][acCheatCount][17] = 0;
							}
							ACInfo[playerid][acSpeed] = ac_s;
						}
					}
					else ACInfo[playerid][acSpeed] = ac_s;
					ACInfo[playerid][acAnim] = ac_sa;
				}
				ACInfo[playerid][acSpecAct] = ac_specact;
				ACInfo[playerid][acHealth] = ac_health;
				ACInfo[playerid][acArmour] = ac_armour;
			}
			ACInfo[playerid][acVeh] = ac_vehid;
			if(ac_gtc > ACInfo[playerid][acGtc][7] + ac_gpp) ACInfo[playerid][acLastWeapon] = ac_w;
			ACInfo[playerid][acPosX] = ac_pX;
			ACInfo[playerid][acPosY] = ac_pY;
			ACInfo[playerid][acPosZ] = ac_pZ;
		}
	}
	ac_gpp = 1;
	ACInfo[playerid][acUpdateTick] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerUpdate
		ac_gpp = ac_OnPlayerUpdate(playerid);
	#endif
	if(ACInfo[playerid][acACAllow][33] && ac_gpp) return ACInfo[playerid][acUnFrozen];
	return ac_gpp;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerUpdate
		#undef OnPlayerUpdate
	#else
		#define _ALS_OnPlayerUpdate
	#endif
	#define OnPlayerUpdate ac_OnPlayerUpdate
	#if defined ac_OnPlayerUpdate
		forward ac_OnPlayerUpdate(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
#else
	public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		if((newkeys & KEY_SECONDARY_ATTACK) && ACInfo[playerid][acSpecAct] == SPECIAL_ACTION_USEJETPACK &&
		GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_USEJETPACK)
		{
			ACInfo[playerid][acDropJpX] = ACInfo[playerid][acPosX];
			ACInfo[playerid][acDropJpY] = ACInfo[playerid][acPosY];
			ACInfo[playerid][acDropJpZ] = ACInfo[playerid][acPosZ];
		}
		new ac_w = GetPlayerWeapon(playerid);
		if((newkeys & KEY_CROUCH) && (24 <= ac_w <= 25 || 33 <= ac_w <= 34)) ACInfo[playerid][acCheatCount][14] = 0;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerKeyStateChange
		return ac_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerKeyStateChange
		#undef OnPlayerKeyStateChange
	#else
		#define _ALS_OnPlayerKeyStateChange
	#endif
	#define OnPlayerKeyStateChange ac_OnPlayerKeyStateChange
	#if defined ac_OnPlayerKeyStateChange
		forward ac_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
#else
	public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][2] + ac_Mtfc[2][0]) ac_FloodDetect(playerid, 2);
		else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][2] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][2] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickMap
		return ac_OnPlayerClickMap(playerid, fX, fY, fZ);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickMap
		#undef OnPlayerClickMap
	#else
		#define _ALS_OnPlayerClickMap
	#endif
	#define OnPlayerClickMap ac_OnPlayerClickMap
	#if defined ac_OnPlayerClickMap
		forward ac_OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerClickPlayer(playerid, clickedplayerid, source)
#else
	public OnPlayerClickPlayer(playerid, clickedplayerid, source)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][3] + ac_Mtfc[3][0])
		{
			ac_FloodDetect(playerid, 3);
			return 1;
		}
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][3] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][3] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickPlayer
		return ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickPlayer
		#undef OnPlayerClickPlayer
	#else
		#define _ALS_OnPlayerClickPlayer
	#endif
	#define OnPlayerClickPlayer ac_OnPlayerClickPlayer
	#if defined ac_OnPlayerClickPlayer
		forward ac_OnPlayerClickPlayer(playerid, clickedplayerid, source);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerClickTextDraw(playerid, Text:clickedid)
#else
	public OnPlayerClickTextDraw(playerid, Text:clickedid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][4] + ac_Mtfc[4][0])
		{
			ac_FloodDetect(playerid, 4);
			return 1;
		}
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][4] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][4] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickTextDraw
		return ac_OnPlayerClickTextDraw(playerid, clickedid);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickTextDraw
		#undef OnPlayerClickTextDraw
	#else
		#define _ALS_OnPlayerClickTextDraw
	#endif
	#define OnPlayerClickTextDraw ac_OnPlayerClickTextDraw
	#if defined ac_OnPlayerClickTextDraw
		forward ac_OnPlayerClickTextDraw(playerid, Text:clickedid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerCommandText(playerid, cmdtext[])
#else
	public OnPlayerCommandText(playerid, cmdtext[])
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][5] + ac_Mtfc[5][0])
			{
				ac_FloodDetect(playerid, 5);
				return 1;
			}
			if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][5] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][5] = ac_gtc;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerCommandText
		return ac_OnPlayerCommandText(playerid, cmdtext);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerCommandText
		#undef OnPlayerCommandText
	#else
		#define _ALS_OnPlayerCommandText
	#endif
	#define OnPlayerCommandText ac_OnPlayerCommandText
	#if defined ac_OnPlayerCommandText
		forward ac_OnPlayerCommandText(playerid, cmdtext[]);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
#else
	public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][6] + ac_Mtfc[6][0]) ac_FloodDetect(playerid, 6);
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][6] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][6] = ac_gtc;
	new ac_model = GetVehicleModel(vehicleid);
	if(ACInfo[playerid][acACAllow][44] && !(569 <= ac_model <= 570) && !IsVehicleStreamedIn(vehicleid, playerid))
	{
		#if defined DEBUG
			printf("[Nex-AC debug] Veh: %d, veh model: %d, ispassenger: %d", vehicleid, ac_model, ispassenger);
		#endif
		return ac_KickWithCode(playerid, "", 0, 44, 1);
	}
	new ac_doors, ac_tmp;
	GetVehicleParamsEx(vehicleid, ac_tmp, ac_tmp, ac_tmp, ac_doors, ac_tmp, ac_tmp, ac_tmp);
	if(ispassenger || ac_doors != VEHICLE_PARAMS_ON)
	{
		if(ACInfo[playerid][acEnterVeh] != vehicleid)
		{
			ACInfo[playerid][acEnterVeh] = vehicleid;
			if(ac_model == 570 || ac_IsABoat(ac_model)) ACInfo[playerid][acEnterVehTick] = 0;
			else ACInfo[playerid][acEnterVehTick] = ac_gtc;
		}
	}
	else ACInfo[playerid][acEnterVeh] = 0;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerEnterVehicle
		return ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerEnterVehicle
		#undef OnPlayerEnterVehicle
	#else
		#define _ALS_OnPlayerEnterVehicle
	#endif
	#define OnPlayerEnterVehicle ac_OnPlayerEnterVehicle
	#if defined ac_OnPlayerEnterVehicle
		forward ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerExitVehicle(playerid, vehicleid)
#else
	public OnPlayerExitVehicle(playerid, vehicleid)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][7] + ac_Mtfc[7][0]) ac_FloodDetect(playerid, 7);
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][7] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][7] = ac_gtc;
	if(ACInfo[playerid][acACAllow][44] && !IsVehicleStreamedIn(vehicleid, playerid))
	{
		#if defined DEBUG
			printf("[Nex-AC debug] Veh: %d, veh model: %d", vehicleid, GetVehicleModel(vehicleid));
		#endif
		return ac_KickWithCode(playerid, "", 0, 44, 5);
	}
	if(ac_IsAnAircraft(GetVehicleModel(ACInfo[playerid][acVeh]))) ACInfo[playerid][acParachute] = 1;
	else if(ACInfo[playerid][acParachute] != 2) ACInfo[playerid][acParachute] = 0;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerExitVehicle
		return ac_OnPlayerExitVehicle(playerid, vehicleid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerExitVehicle
		#undef OnPlayerExitVehicle
	#else
		#define _ALS_OnPlayerExitVehicle
	#endif
	#define OnPlayerExitVehicle ac_OnPlayerExitVehicle
	#if defined ac_OnPlayerExitVehicle
		forward ac_OnPlayerExitVehicle(playerid, vehicleid);
	#endif
#endif

#if defined OnPlayerPickUpDynamicPickup\
	&& defined Streamer_GetDistanceToItem\
	&& defined Streamer_GetIntData
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			hook OnPlayerPickUpDynPickup(playerid, STREAMER_TAG_PICKUP:pickupid)
		#else
			hook OnPlayerPickUpDynPickup(playerid, pickupid)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP:pickupid)
		#else
			public OnPlayerPickUpDynamicPickup(playerid, pickupid)
		#endif
	#endif
	{
		if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
		new ac_i = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_i < ACInfo[playerid][acCall][8] + ac_Mtfc[8][0]) ac_FloodDetect(playerid, 8);
			else if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][8] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		if(ACInfo[playerid][acACAllow][6])
		{
			new Float:ac_x, Float:ac_y, Float:ac_z, Float:ac_dist, Float:ac_dist_set;
			GetPlayerPos(playerid, ac_x, ac_y, ac_z);
			Streamer_GetDistanceToItem(ac_x, ac_y, ac_z, STREAMER_TYPE_PICKUP, pickupid, ac_dist);
			Streamer_GetDistanceToItem(ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], (ACInfo[playerid][acTpToZ] ? ac_z : ACInfo[playerid][acSetPosZ]), STREAMER_TYPE_PICKUP, pickupid, ac_dist_set);
			if(ac_dist > 15.0 && (ACInfo[playerid][acSet][8] == -1 || ac_dist_set > 15.0))
			{
				#if defined DEBUG
					printf("[Nex-AC debug] Pickupid: %d, dist: %f, dist set: %f, acSet[8]: %d, playerid: %d",
					_:pickupid, ac_dist, ac_dist_set, ACInfo[playerid][acSet][8], playerid);
				#endif
				#if defined OnCheatDetected
					ac_KickWithCode(playerid, "", 0, 6, 2);
				#endif
				return 0;
			}
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][8] = ac_i;
		#if AC_USE_PICKUP_WEAPONS
			switch((ac_i = Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID)))
			{
				case 2: ACInfo[playerid][acSpecAct] = SPECIAL_ACTION_USEJETPACK;
				case 3: ACInfo[playerid][acHealth] = 100;
				case 4: ACInfo[playerid][acArmour] = 100;
				default:
				{
					if(ac_i > 100)
					{
						ac_i -= 100;
						new ac_s = ac_wSlot[ac_i];
						if(ACInfo[playerid][acWeapon][ac_s] == ac_i ||
						3 <= ac_s <= 5 && ACInfo[playerid][acWeapon][ac_s] > 0) ACInfo[playerid][acAmmo][ac_s] += ac_pAmmo[ac_i];
					}
				}
			}
		#endif
		ACInfo[playerid][acLastPickup] = _:pickupid + MAX_PICKUPS;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerPickUpDynamicPickup
			return ac_OnPlayerPickUpDynamicPickup(playerid, pickupid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerPickUpDynamicPicku\
			|| defined _ALS_OnPlayerPickUpDynPickup\
			|| defined _ALS_OnPlayerPickUpDynamicPick || defined _ALS_OnPlayerPickUpDynamicPUp
			#undef OnPlayerPickUpDynamicPickup
		#else
			#define _ALS_OnPlayerPickUpDynPickup
		#endif
		#define OnPlayerPickUpDynamicPickup ac_OnPlayerPickUpDynamicPickup
		#if defined ac_OnPlayerPickUpDynamicPickup
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP:pickupid);
			#else
				forward ac_OnPlayerPickUpDynamicPickup(playerid, pickupid);
			#endif
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerPickUpPickup(playerid, pickupid)
#else
	public OnPlayerPickUpPickup(playerid, pickupid)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0 || !(0 <= pickupid < MAX_PICKUPS)) return 0;
	#if defined Streamer_GetItemStreamerID\
		&& defined IsValidDynamicPickup
		#if defined STREAMER_ENABLE_TAGS
			new STREAMER_TAG_PICKUP:streamerid = STREAMER_TAG_PICKUP:Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_PICKUP, pickupid);
		#else
			new streamerid = Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_PICKUP, pickupid);
		#endif
		if(!IsValidDynamicPickup(streamerid))
		{
	#endif
		new ac_i = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_i < ACInfo[playerid][acCall][8] + ac_Mtfc[8][0]) ac_FloodDetect(playerid, 8);
			else if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][8] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		if(ACInfo[playerid][acACAllow][6])
		{
			#if defined VectorSize
				new Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ACPickInfo[pickupid][acPosX], ACPickInfo[pickupid][acPosY], ACPickInfo[pickupid][acPosZ]),
				Float:ac_dist_set = VectorSize(ACInfo[playerid][acSetPosX] - ACPickInfo[pickupid][acPosX], ACInfo[playerid][acSetPosY] - ACPickInfo[pickupid][acPosY], (ACInfo[playerid][acTpToZ] ? ACPickInfo[pickupid][acPosZ] : ACInfo[playerid][acSetPosZ]) - ACPickInfo[pickupid][acPosZ]);
			#else
				new Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ACPickInfo[pickupid][acPosX], ACPickInfo[pickupid][acPosY], ACPickInfo[pickupid][acPosZ]),
				Float:ac_dist_set = floatsqroot(floatpower(ACInfo[playerid][acSetPosX] - ACPickInfo[pickupid][acPosX], 2.0) + floatpower(ACInfo[playerid][acSetPosY] - ACPickInfo[pickupid][acPosY], 2.0) + floatpower((ACInfo[playerid][acTpToZ] ? ACPickInfo[pickupid][acPosZ] : ACInfo[playerid][acSetPosZ]) - ACPickInfo[pickupid][acPosZ], 2.0));
			#endif
			if(ac_dist > 15.0 && (ACInfo[playerid][acSet][8] == -1 || ac_dist_set > 15.0))
			{
				#if defined DEBUG
					printf("[Nex-AC debug] Pickupid: %d, dist: %f, dist set: %f, acSet[8]: %d, playerid: %d",
					pickupid, ac_dist, ac_dist_set, ACInfo[playerid][acSet][8], playerid);
				#endif
				#if defined OnCheatDetected
					ac_KickWithCode(playerid, "", 0, 6, 1);
				#endif
				return 0;
			}
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][8] = ac_i;
		#if AC_USE_PICKUP_WEAPONS
			switch(ACPickInfo[pickupid][acType])
			{
				case 1:
				{
					ac_i = ACPickInfo[pickupid][acWeapon];
					new ac_s = ac_wSlot[ac_i];
					if(ACInfo[playerid][acWeapon][ac_s] == ac_i ||
					3 <= ac_s <= 5 && ACInfo[playerid][acWeapon][ac_s] > 0) ACInfo[playerid][acAmmo][ac_s] += ac_pAmmo[ac_i];
				}
				case 2: ACInfo[playerid][acSpecAct] = SPECIAL_ACTION_USEJETPACK;
				case 3: ACInfo[playerid][acHealth] = 100;
				case 4: ACInfo[playerid][acArmour] = 100;
			}
		#endif
		ACInfo[playerid][acLastPickup] = pickupid;
	#if defined Streamer_GetItemStreamerID\
		&& defined IsValidDynamicPickup
		}
	#endif
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerPickUpPickup
		return ac_OnPlayerPickUpPickup(playerid, pickupid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerPickUpPickup
		#undef OnPlayerPickUpPickup
	#else
		#define _ALS_OnPlayerPickUpPickup
	#endif
	#define OnPlayerPickUpPickup ac_OnPlayerPickUpPickup
	#if defined ac_OnPlayerPickUpPickup
		forward ac_OnPlayerPickUpPickup(playerid, pickupid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerRequestClass(playerid, classid)
#else
	public OnPlayerRequestClass(playerid, classid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][9] + ac_Mtfc[9][0]) ac_FloodDetect(playerid, 9);
			else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][9] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		if(ACInfo[playerid][acDead]) ACInfo[playerid][acSpawned] = false;
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][9] = ac_gtc;
		ACInfo[playerid][acSpawnPosX] = ac_ClassPos[classid][0];
		ACInfo[playerid][acSpawnPosY] = ac_ClassPos[classid][1];
		ACInfo[playerid][acSpawnPosZ] = ac_ClassPos[classid][2];
		ACInfo[playerid][acSpawnWeapon1] = ac_ClassWeapon[classid][0][0];
		ACInfo[playerid][acSpawnAmmo1] = ac_ClassWeapon[classid][0][1];
		ACInfo[playerid][acSpawnWeapon2] = ac_ClassWeapon[classid][1][0];
		ACInfo[playerid][acSpawnAmmo2] = ac_ClassWeapon[classid][1][1];
		ACInfo[playerid][acSpawnWeapon3] = ac_ClassWeapon[classid][2][0];
		ACInfo[playerid][acSpawnAmmo3] = ac_ClassWeapon[classid][2][1];
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerRequestClass
		return ac_OnPlayerRequestClass(playerid, classid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerRequestClass
		#undef OnPlayerRequestClass
	#else
		#define _ALS_OnPlayerRequestClass
	#endif
	#define OnPlayerRequestClass ac_OnPlayerRequestClass
	#if defined ac_OnPlayerRequestClass
		forward ac_OnPlayerRequestClass(playerid, classid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerSelectedMenuRow(playerid, row)
#else
	public OnPlayerSelectedMenuRow(playerid, row)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][10] + ac_Mtfc[10][0]) ac_FloodDetect(playerid, 10);
		else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][10] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][10] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerSelectedMenuRow
		return ac_OnPlayerSelectedMenuRow(playerid, row);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerSelectedMenuRow
		#undef OnPlayerSelectedMenuRow
	#else
		#define _ALS_OnPlayerSelectedMenuRow
	#endif
	#define OnPlayerSelectedMenuRow ac_OnPlayerSelectedMenuRow
	#if defined ac_OnPlayerSelectedMenuRow
		forward ac_OnPlayerSelectedMenuRow(playerid, row);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerStateChange(playerid, newstate, oldstate)
#else
	public OnPlayerStateChange(playerid, newstate, oldstate)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_i = GetTickCount(), ac_s = GetPlayerPing(playerid);
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_i < ACInfo[playerid][acCall][11] + ac_Mtfc[11][0])
			{
				if(newstate != PLAYER_STATE_ONFOOT || oldstate != PLAYER_STATE_SPAWNED)
				{
					new ac_model;
					if(oldstate == PLAYER_STATE_DRIVER) ac_model = GetVehicleModel(ACInfo[playerid][acVeh]);
					else if(newstate == PLAYER_STATE_DRIVER) ac_model = GetVehicleModel(GetPlayerVehicleID(playerid));
					if(!ac_IsABoat(ac_model)) ac_FloodDetect(playerid, 11);
				}
			}
			else if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][11] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][11] = ac_i;
		switch(oldstate)
		{
			case PLAYER_STATE_NONE, PLAYER_STATE_WASTED:
			{
				if(ACInfo[playerid][acACAllow][48] && !(PLAYER_STATE_SPAWNED <= newstate <= PLAYER_STATE_SPECTATING))
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Newstate: %d, oldstate: %d", newstate, oldstate);
					#endif
					ac_KickWithCode(playerid, "", 0, 48, 2);
				}
			}
			case PLAYER_STATE_DRIVER:
			{
				new ac_t;
				if(ACVehInfo[ACInfo[playerid][acVeh]][acDriver] == playerid) ACVehInfo[ACInfo[playerid][acVeh]][acDriver] = INVALID_PLAYER_ID;
				GetPlayerWeaponData(playerid, 4, ac_t, ac_t);
				if(ac_t < ACInfo[playerid][acAmmo][4] &&
				!(ac_t < 0 <= ACInfo[playerid][acAmmo][4])) ACInfo[playerid][acAmmo][4] = ac_t;
				ac_t = GetVehicleModel(ACInfo[playerid][acVeh]);
				if(1 <= ACInfo[playerid][acHealth] < 5 && ac_IsABike(ac_t)) ACInfo[playerid][acHealth] = 5;
				new Float:ac_x, Float:ac_y, Float:ac_z;
				GetPlayerPos(playerid, ac_x, ac_y, ac_z);
				#if defined VectorSize
				if(ACInfo[playerid][acACAllow][2] && newstate == PLAYER_STATE_ONFOOT &&
				(ACInfo[playerid][acPosZ] > -95.0 || ac_z - ACInfo[playerid][acPosZ] < 40.0 ||
				VectorSize(ac_x - ACInfo[playerid][acPosX], ac_y - ACInfo[playerid][acPosY], 0.0) >= 180.0) &&
				ac_i > ACInfo[playerid][acGtc][11] + ac_s)
				#else
				if(ACInfo[playerid][acACAllow][2] && newstate == PLAYER_STATE_ONFOOT &&
				(ACInfo[playerid][acPosZ] > -95.0 || ac_z - ACInfo[playerid][acPosZ] < 40.0 ||
				floatsqroot(floatpower(ac_x - ACInfo[playerid][acPosX], 2.0) + floatpower(ac_y - ACInfo[playerid][acPosY], 2.0)) >= 180.0) &&
				ac_i > ACInfo[playerid][acGtc][11] + ac_s)
				#endif
				{
					if(!ac_IsAnAircraft(ac_t)) ac_z = ACInfo[playerid][acPosZ];
					if((ac_x = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ac_z)) >= 50.0)
					{
						#if defined DEBUG
							printf("[Nex-AC debug] Veh model: %d, dist: %f", ac_t, ac_x);
						#endif
						ac_KickWithCode(playerid, "", 0, 2, 4);
					}
				}
				GetPlayerVelocity(playerid, ac_x, ac_y, ac_z);
				ACInfo[playerid][acSpeed] = ac_GetSpeed(ac_x, ac_y, ac_z);
				if(ACInfo[playerid][acSet][8] == 3) ACInfo[playerid][acSet][8] = -1;
				ACInfo[playerid][acGtc][10] = ac_i + 1650;
			}
			case PLAYER_STATE_PASSENGER:
			{
				new Float:ac_x, Float:ac_y, Float:ac_z;
				GetPlayerPos(playerid, ac_x, ac_y, ac_z);
				#if defined VectorSize
				if(ACInfo[playerid][acACAllow][2] && newstate == PLAYER_STATE_ONFOOT &&
				(ACInfo[playerid][acPosZ] > -95.0 || ac_z - ACInfo[playerid][acPosZ] < 40.0 ||
				VectorSize(ac_x - ACInfo[playerid][acPosX], ac_y - ACInfo[playerid][acPosY], 0.0) >= 180.0) &&
				ac_i > ACInfo[playerid][acGtc][11] + ac_s)
				#else
				if(ACInfo[playerid][acACAllow][2] && newstate == PLAYER_STATE_ONFOOT &&
				(ACInfo[playerid][acPosZ] > -95.0 || ac_z - ACInfo[playerid][acPosZ] < 40.0 ||
				floatsqroot(floatpower(ac_x - ACInfo[playerid][acPosX], 2.0) + floatpower(ac_y - ACInfo[playerid][acPosY], 2.0)) >= 180.0) &&
				ac_i > ACInfo[playerid][acGtc][11] + ac_s)
				#endif
				{
					new ac_model = GetVehicleModel(ACInfo[playerid][acVeh]);
					ac_s = ACVehInfo[ACInfo[playerid][acVeh]][acDriver];
					ac_x = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
					if(ac_x >= 180.0 || ac_x >= 50.0 && (ac_s == INVALID_PLAYER_ID || ac_i < ACInfo[ac_s][acUpdateTick] + 2000) && !(ac_model == 449 || 537 <= ac_model <= 538 || 569 <= ac_model <= 570))
					{
						#if defined DEBUG
							if(ac_s == INVALID_PLAYER_ID) printf("[Nex-AC debug] Veh model: %d, dist: %f", ac_model, ac_x);
							else printf("[Nex-AC debug] Veh model: %d, driver AFK time: %d, dist: %f", ac_model, ac_i - ACInfo[ac_s][acUpdateTick], ac_x);
						#endif
						ac_KickWithCode(playerid, "", 0, 2, 5);
					}
				}
				GetPlayerVelocity(playerid, ac_x, ac_y, ac_z);
				ACInfo[playerid][acSpeed] = ac_GetSpeed(ac_x, ac_y, ac_z);
				ACInfo[playerid][acGtc][10] = ac_i + 1650;
			}
		}
		switch(newstate)
		{
			case PLAYER_STATE_ONFOOT:
			{
				ACInfo[playerid][acSet][11] = -1;
				if(PLAYER_STATE_DRIVER <= oldstate <= PLAYER_STATE_PASSENGER)
				{
					GetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
					ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
					ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
				}
			}
			case PLAYER_STATE_DRIVER, PLAYER_STATE_PASSENGER:
			{
				ACInfo[playerid][acSet][11] = -1;
				ACInfo[playerid][acCheatCount][3] =
				ACInfo[playerid][acCheatCount][4] = 0;
				new ac_vehid = GetPlayerVehicleID(playerid);
				ac_s = GetVehicleModel(ac_vehid);
				if(ACInfo[playerid][acSet][9] == -1)
				{
					if(ACInfo[playerid][acACAllow][4])
					{
						if(ACInfo[playerid][acEnterVeh] != ac_vehid || ac_i < ACInfo[playerid][acEnterVehTick] + 300)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] Entered veh: %d, veh: %d, veh model: %d, enter time: %d",
								ACInfo[playerid][acEnterVeh], ac_vehid, ac_s, ac_i - ACInfo[playerid][acEnterVehTick]);
							#endif
							ac_KickWithCode(playerid, "", 0, 4, 1);
						}
						else
						{
							new Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
							if(newstate == PLAYER_STATE_DRIVER)
							{
								if(ac_dist > 25.0 || ac_dist > 15.0 && ac_s != 577 && ac_s != 592)
								{
									#if defined DEBUG
										printf("[Nex-AC debug] Veh model: %d, dist: %f", ac_s, ac_dist);
									#endif
									ac_KickWithCode(playerid, "", 0, 4, 3);
								}
							}
							else if(!(ac_s == 449 || 537 <= ac_s <= 538 || 569 <= ac_s <= 570) &&
							(ac_dist > 80.0 || ac_dist > 30.0 && ac_i >= ACInfo[playerid][acUpdateTick] + 1500))
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Veh model: %d, AFK time: %d, dist: %f", ac_s, ac_i - ACInfo[playerid][acUpdateTick], ac_dist);
								#endif
								ac_KickWithCode(playerid, "", 0, 4, 4);
							}
						}
					}
					if(newstate == PLAYER_STATE_DRIVER && ACInfo[playerid][acKicked] < 1)
					{
						ACVehInfo[ac_vehid][acDriver] = playerid;
						GetPlayerPos(playerid, ACInfo[playerid][acPosX], ACInfo[playerid][acPosY], ACInfo[playerid][acPosZ]);
						ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
						ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
						ACInfo[playerid][acSetVehHealth] = -1.0;
						ACInfo[playerid][acCheatCount][11] = 0;
						ACInfo[playerid][acVehDmgRes] = false;
					}
					ACInfo[playerid][acEnterVeh] = 0;
				}
				if(ACInfo[playerid][acACAllow][44])
				{
					ac_i = GetPlayerVehicleSeat(playerid);
					if(ac_s < 400)
					{
						#if defined DEBUG
							printf("[Nex-AC debug] Veh model: %d, seatid: %d", ac_s, ac_i);
						#endif
						ac_KickWithCode(playerid, "", 0, 44, 2);
					}
					else if(ACInfo[playerid][acSet][9] == -1)
					{
						new ac_maxseats = ac_GetMaxPassengers(ac_s);
						if(newstate == PLAYER_STATE_DRIVER)
						{
							if(ac_i != 0 || ac_maxseats == 15)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Veh model: %d, seatid: %d", ac_s, ac_i);
								#endif
								ac_KickWithCode(playerid, "", 0, 44, 3);
							}
						}
						else if(ac_i < 1 || ac_maxseats == 15 || ac_i > ac_maxseats && ac_s != 431 && ac_s != 437 && ac_s != 570)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] Veh model: %d, max seats: %d, seatid: %d", ac_s, ac_maxseats, ac_i);
							#endif
							ac_KickWithCode(playerid, "", 0, 44, 4);
						}
					}
				}
			}
			case PLAYER_STATE_SPAWNED:
			{
				ACInfo[playerid][acPosX] = ACInfo[playerid][acSpawnPosX];
				ACInfo[playerid][acPosY] = ACInfo[playerid][acSpawnPosY];
				ACInfo[playerid][acPosZ] = ACInfo[playerid][acSpawnPosZ];
				ACInfo[playerid][acLastPosX] = ACInfo[playerid][acPosX];
				ACInfo[playerid][acLastPosY] = ACInfo[playerid][acPosY];
			}
			case PLAYER_STATE_SPECTATING:
			{
				if(ACInfo[playerid][acACAllow][21] && !ACInfo[playerid][acSpec] &&
				ACInfo[playerid][acSet][6] == -1) ac_KickWithCode(playerid, "", 0, 21);
				if(ACInfo[playerid][acKicked] < 1)
				{
					ACInfo[playerid][acHealth] = 100;
					ACInfo[playerid][acSet][6] = -1;
					ACInfo[playerid][acSpec] = true;
				}
			}
		}
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerStateChange
		return ac_OnPlayerStateChange(playerid, newstate, oldstate);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerStateChange
		#undef OnPlayerStateChange
	#else
		#define _ALS_OnPlayerStateChange
	#endif
	#define OnPlayerStateChange ac_OnPlayerStateChange
	#if defined ac_OnPlayerStateChange
		forward ac_OnPlayerStateChange(playerid, newstate, oldstate);
	#endif
#endif

#if defined OnPlayerWeaponShot
	#if defined _inc_y_hooks || defined _INC_y_hooks
		hook OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
	#else
		public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
	#endif
	{
		if(ACInfo[playerid][acKicked] > 0 || ACInfo[playerid][acDead]) return 0;
		if(ACInfo[playerid][acACAllow][22] && !ac_LagCompMode)
		{
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 22);
			#endif
			return 0;
		}
		if(ACInfo[playerid][acACAllow][47] &&
		(!(BULLET_HIT_TYPE_NONE <= hittype <= BULLET_HIT_TYPE_PLAYER_OBJECT) ||
		hittype == BULLET_HIT_TYPE_PLAYER && !(0 <= hitid < MAX_PLAYERS) ||
		hittype == BULLET_HIT_TYPE_VEHICLE && !(1 <= hitid < MAX_VEHICLES) ||
		hittype == BULLET_HIT_TYPE_OBJECT && !(1 <= hitid < MAX_OBJECTS) ||
		hittype == BULLET_HIT_TYPE_PLAYER_OBJECT && !(1 <= hitid < MAX_OBJECTS) ||
		weaponid != 38 && !(22 <= weaponid <= 34)))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Hittype: %d, hitid: %d, weaponid: %d", hittype, hitid, weaponid);
			#endif
			return ac_KickWithCode(playerid, "", 0, 47, 1);
		}
		new Float:ac_oX, Float:ac_oY, Float:ac_oZ, Float:ac_hX, Float:ac_hY, Float:ac_hZ;
		GetPlayerLastShotVectors(playerid, ac_oX, ac_oY, ac_oZ, ac_hX, ac_hY, ac_hZ);
		if(ACInfo[playerid][acACAllow][34])
		{
			new Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ac_oX, ac_oY, ac_oZ);
			if(ac_dist > 50.0 || ac_dist > 15.0 && !IsPlayerInAnyVehicle(playerid) &&
			!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(playerid), playerid) &&
			GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
			{
				if(++ACInfo[playerid][acCheatCount][5] > AC_MAX_AFK_GHOST_WARNINGS)
				{
					#undef AC_MAX_AFK_GHOST_WARNINGS
					#if defined DEBUG
						printf("[Nex-AC debug] Dist: %f", ac_dist);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 34);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][5] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 34);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 34, 0, ACInfo[playerid][acCheatCount][5]);
				#endif
			}
			else ACInfo[playerid][acCheatCount][5] = 0;
		}
		new ac_gtc = GetTickCount(), ac_gpp = GetPlayerPing(playerid);
		if(ACInfo[playerid][acACAllow][29])
		{
			new Float:ac_pX, Float:ac_pY, Float:ac_pZ;
			GetPlayerPos(playerid, ac_pX, ac_pY, ac_pZ);
			if(hittype > BULLET_HIT_TYPE_NONE &&
			(fX == 0.0 && fY == 0.0 && fZ == 0.0 || ac_oX == ac_pX || ac_oY == ac_pY || floatabs(ac_oZ - ac_pZ) < 0.01))
			{
				if(++ACInfo[playerid][acCheatCount][13] > AC_MAX_SILENT_AIM_WARNINGS)
				{
					#undef AC_MAX_SILENT_AIM_WARNINGS
					#if defined DEBUG
						printf("[Nex-AC debug] Hittype: %d, weaponid: %d, pZ: %f, oZ: %f, fX, fY, fZ: %f, %f, %f",
						hittype, weaponid, ac_pZ, ac_oZ, fX, fY, fZ);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 29, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][13] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 29, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 29, 1, ACInfo[playerid][acCheatCount][13]);
				#endif
			}
			else
			{
				ACInfo[playerid][acCheatCount][13] = 0;
				if(hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID &&
				!ACInfo[hitid][acDead] && ac_gtc > ACInfo[hitid][acSetPosTick] + ac_gpp &&
				ac_gtc < ACInfo[hitid][acUpdateTick] + 1500)
				{
					new Float:ac_dist = GetPlayerDistanceFromPoint(hitid, ac_hX, ac_hY, ac_hZ);
					if(ac_dist > 50.0 || ac_dist > 20.0 && !IsPlayerInAnyVehicle(hitid) &&
					!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(hitid), hitid) &&
					GetPlayerSurfingObjectID(hitid) == INVALID_OBJECT_ID)
					{
						if(++ACInfo[playerid][acCheatCount][6] > AC_MAX_PRO_AIM_WARNINGS)
						{
							#undef AC_MAX_PRO_AIM_WARNINGS
							#if defined DEBUG
								printf("[Nex-AC debug] Dist: %f", ac_dist);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 29, 2);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acCheatCount][6] = 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 29, 2);
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 29, 2, ACInfo[playerid][acCheatCount][6]);
						#endif
					}
					else ACInfo[playerid][acCheatCount][6] = 0;
				}
			}
		}
		new ac_i, ac_t, bool:ac_ur, bool:ac_ur2;
		switch(hittype)
		{
			case BULLET_HIT_TYPE_PLAYER:
			{
				if(hitid != INVALID_PLAYER_ID && !IsPlayerNPC(hitid) &&
				ACInfo[hitid][acACAllow][19] && ACInfo[hitid][acUnFrozen] &&
				!ACInfo[hitid][acDead] && ac_gtc > ACInfo[hitid][acSetPosTick] + ac_gpp &&
				IsPlayerInRangeOfPoint(hitid, ac_wRange[weaponid - 22], ac_oX, ac_oY, ac_oZ) &&
				!(SPECIAL_ACTION_ENTER_VEHICLE <= GetPlayerSpecialAction(hitid) <= SPECIAL_ACTION_EXIT_VEHICLE))
				{
					ac_t = GetPlayerTeam(playerid);
					if(ac_t == NO_TEAM || ac_t != GetPlayerTeam(hitid))
					{
						ac_i = GetPlayerInterior(hitid);
						#if AC_USE_RESTAURANTS
							if(!ac_InRestaurant(hitid, ac_i))
							{
						#endif
							#if AC_USE_AMMUNATIONS
								if(!ac_InAmmuNation(hitid, ac_i))
								{
							#endif
								#if AC_USE_CASINOS
									if(!ac_InCasino(hitid, ac_i))
									{
								#endif
									ac_ur = true;
								#if AC_USE_CASINOS
									}
								#endif
							#if AC_USE_AMMUNATIONS
								}
							#endif
						#if AC_USE_RESTAURANTS
							}
						#endif
					}
				}
			}
			case BULLET_HIT_TYPE_VEHICLE:
			{
				if(hitid != INVALID_VEHICLE_ID)
				{
					ac_i = ACVehInfo[hitid][acDriver];
					if(ac_i != INVALID_PLAYER_ID && ACInfo[ac_i][acACAllow][20] && ACInfo[ac_i][acUnFrozen] &&
					ac_gtc > ACInfo[ac_i][acSetPosTick] + ac_gpp && ACVehInfo[hitid][acHealth] >= 250.0)
					{
						ac_t = GetPlayerTeam(playerid);
						if(!ac_VehFriendlyFire || ac_t == NO_TEAM || ac_t != GetPlayerTeam(ac_i))
						{
							ac_t = GetVehicleModel(hitid);
							new Float:ac_wX, Float:ac_wY, Float:ac_wZ;
							GetVehicleModelInfo(ac_t, VEHICLE_MODEL_INFO_WHEELSFRONT, ac_hX, ac_hY, ac_hZ);
							GetVehicleModelInfo(ac_t, VEHICLE_MODEL_INFO_WHEELSREAR, ac_oX, ac_oY, ac_oZ);
							GetVehicleModelInfo(ac_t, VEHICLE_MODEL_INFO_WHEELSMID, ac_wX, ac_wY, ac_wZ);
							#if defined VectorSize
								if(VectorSize(ac_hX - fX, ac_hY - fY, ac_hZ - fZ) > 1.2 &&
								VectorSize(-ac_hX - fX, ac_hY - fY, ac_hZ - fZ) > 1.2 &&
								VectorSize(ac_oX - fX, ac_oY - fY, ac_oZ - fZ) > 1.2 &&
								VectorSize(-ac_oX - fX, ac_oY - fY, ac_oZ - fZ) > 1.2 &&
								(ac_wX == 0.0 && ac_wY == 0.0 && ac_wZ == 0.0 || VectorSize(ac_wX - fX, ac_wY - fY, ac_wZ - fZ) > 1.2 &&
								VectorSize(-ac_wX - fX, ac_wY - fY, ac_wZ - fZ) > 1.2)) ac_ur2 = true;
							#else
								if(floatsqroot(floatpower(ac_hX - fX, 2.0) + floatpower(ac_hY - fY, 2.0) + floatpower(ac_hZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(-ac_hX - fX, 2.0) + floatpower(ac_hY - fY, 2.0) + floatpower(ac_hZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(ac_oX - fX, 2.0) + floatpower(ac_oY - fY, 2.0) + floatpower(ac_oZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(-ac_oX - fX, 2.0) + floatpower(ac_oY - fY, 2.0) + floatpower(ac_oZ - fZ, 2.0)) > 1.2 &&
								(ac_wX == 0.0 && ac_wY == 0.0 && ac_wZ == 0.0 || floatsqroot(floatpower(ac_wX - fX, 2.0) + floatpower(ac_wY - fY, 2.0) + floatpower(ac_wZ - fZ, 2.0)) > 1.2 &&
								floatsqroot(floatpower(-ac_wX - fX, 2.0) + floatpower(ac_wY - fY, 2.0) + floatpower(ac_wZ - fZ, 2.0)) > 1.2)) ac_ur2 = true;
							#endif
						}
					}
				}
			}
		}
		if((ac_t = GetPlayerState(playerid)) != PLAYER_STATE_DRIVER)
		{
			new ac_s = GetPlayerWeapon(playerid);
			if(ACInfo[playerid][acACAllow][47] && ac_t != PLAYER_STATE_PASSENGER)
			{
				if(ac_s != weaponid)
				{
					if(++ACInfo[playerid][acCheatCount][18] > AC_MAX_FAKE_WEAPON_WARNINGS)
					{
						#undef AC_MAX_FAKE_WEAPON_WARNINGS
						#if defined DEBUG
							printf("[Nex-AC debug] Armed weapon: %d, weaponid: %d, state: %d", ac_s, weaponid, ac_t);
						#endif
						ac_KickWithCode(playerid, "", 0, 47, 2);
						#if defined OnCheatDetected
							ACInfo[playerid][acCheatCount][18] = 0;
						#endif
					}
					#if defined OnCheatWarning
						else OnCheatWarning(playerid, "", 0, 47, 2, ACInfo[playerid][acCheatCount][18]);
					#endif
					return 0;
				}
				else ACInfo[playerid][acCheatCount][18] = 0;
			}
			ac_s = ac_wSlot[weaponid];
			if(ACInfo[playerid][acACAllow][26])
			{
				ac_i = ac_gtc - ACInfo[playerid][acShotTick];
				if(ACInfo[playerid][acLastShot] == weaponid)
				{
					if(weaponid != 38 && ac_t != PLAYER_STATE_PASSENGER)
					{
						if(ac_gtc < ACInfo[playerid][acReloadTick] + 110)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] Weaponid: %d, Reload time: %d, state: %d",
								weaponid, ac_gtc - ACInfo[playerid][acReloadTick], ac_t);
							#endif
							#if defined OnCheatDetected
								ac_KickWithCode(playerid, "", 0, 26, 4);
								if(ACInfo[playerid][acKicked] > 0) return 0;
								ACInfo[playerid][acReloadTick] = 0;
							#else
								return ac_KickWithCode(playerid, "", 0, 26, 4);
							#endif
						}
						else if(ac_i < 30 || ac_i < 50 && weaponid != 32 && !(28 <= weaponid <= 29))
						{
							if(++ACInfo[playerid][acCheatCount][8] > AC_MAX_RAPID_FIRE_WARNINGS)
							{
								#undef AC_MAX_RAPID_FIRE_WARNINGS
								#if defined DEBUG
									printf("[Nex-AC debug] Fire rate: %d, weaponid: %d", ac_i, weaponid);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 26, 1);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][8] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 26, 1);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 26, 1, ACInfo[playerid][acCheatCount][8]);
							#endif
						}
						else ACInfo[playerid][acCheatCount][8] = 0;
						if(weaponid == 25 && ac_i < 600 || (weaponid == 24 || 33 <= weaponid <= 34) && ac_i < 380)
						{
							if(++ACInfo[playerid][acCheatCount][14] > AC_MAX_AUTO_C_WARNINGS)
							{
								#undef AC_MAX_AUTO_C_WARNINGS
								#if defined DEBUG
									printf("[Nex-AC debug] Fire rate: %d, weaponid: %d", ac_i, weaponid);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 26, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][14] = 0;
								#else
									return ac_KickWithCode(playerid, "", 0, 26, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 26, 2, ACInfo[playerid][acCheatCount][14]);
							#endif
						}
					}
				}
				else if(ac_i < 30)
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Fire rate: %d, weaponid: %d, last weapon: %d",
						ac_i, weaponid, ACInfo[playerid][acLastShot]);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 26, 3);
						if(ACInfo[playerid][acKicked] > 0) return 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 26, 3);
					#endif
				}
				if(GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET) ACInfo[playerid][acReloadTick] = ac_gtc;
			}
			if(ACInfo[playerid][acACAllow][17] && ac_t != PLAYER_STATE_PASSENGER &&
			ACInfo[playerid][acGiveAmmo][ac_s] == -65535 && ac_gtc > ACInfo[playerid][acGtc][7] + ac_gpp)
			{
				ac_t = GetPlayerAmmo(playerid);
				if(ACInfo[playerid][acAmmo][ac_s] == 0)
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Weaponid: %d, AC ammo: %d, ammo: %d", weaponid, ACInfo[playerid][acAmmo][ac_s], ac_t);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 17, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acAmmo][ac_s] = ac_t;
					#else
						return ac_KickWithCode(playerid, "", 0, 17, 1);
					#endif
				}
				if(ACInfo[playerid][acAmmo][ac_s] < ac_t)
				{
					switch(weaponid)
					{
						case 38:
						{
							if(++ACInfo[playerid][acCheatCount][7] > 8)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Weaponid: %d, AC ammo: %d, ammo: %d, acCheatCount[7]: %d",
									weaponid, ACInfo[playerid][acAmmo][ac_s], ac_t, ACInfo[playerid][acCheatCount][7]);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 2);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][7] = 0;
									ACInfo[playerid][acAmmo][ac_s] = ac_t;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 2);
								#endif
							}
							#if defined OnCheatWarning
								else OnCheatWarning(playerid, "", 0, 17, 2, ACInfo[playerid][acCheatCount][7]);
							#endif
						}
						default:
						{
							if(ac_t > ACInfo[playerid][acAmmo][ac_s] + 6)
							{
								#if defined DEBUG
									printf("[Nex-AC debug] Weaponid: %d, AC ammo: %d, ammo: %d",
									weaponid, ACInfo[playerid][acAmmo][ac_s], ac_t);
								#endif
								#if defined OnCheatDetected
									ac_KickWithCode(playerid, "", 0, 17, 3);
									if(ACInfo[playerid][acKicked] > 0) return 0;
									ACInfo[playerid][acCheatCount][7] = 0;
									ACInfo[playerid][acAmmo][ac_s] = ac_t;
								#else
									return ac_KickWithCode(playerid, "", 0, 17, 3);
								#endif
							}
						}
					}
				}
				else ACInfo[playerid][acCheatCount][7] = 0;
			}
			if(ACInfo[playerid][acAmmo][ac_s] != 0)
			{
				ACInfo[playerid][acAmmo][ac_s]--;
				if(ACInfo[playerid][acAmmo][ac_s] == 0 &&
				ACInfo[playerid][acSet][3] == weaponid) ACInfo[playerid][acSet][3] = ACInfo[playerid][acSetWeapon][ac_s] = -1;
			}
			if(ACInfo[playerid][acAmmo][ac_s] < -32768) ACInfo[playerid][acAmmo][ac_s] += 65536;
		}
		ACInfo[playerid][acLastShot] = weaponid;
		ACInfo[playerid][acShotTick] = ac_gtc;
		ac_i = 1;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerWeaponShot
			ac_i = ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, fX, fY, fZ);
		#endif
		if(ac_i)
		{
			if(ac_ur)
			{
				if(ACInfo[hitid][acArmour] > 0) ACInfo[hitid][acDmgRes] = 2;
				else ACInfo[hitid][acDmgRes] = 1;
				ACInfo[hitid][acGtc][14] = ac_gtc + 165;
			}
			if(ac_ur2)
			{
				ACInfo[ACVehInfo[hitid][acDriver]][acVehDmgRes] = true;
				ACInfo[ACVehInfo[hitid][acDriver]][acGtc][16] = ac_gtc + 165;
			}
		}
		return ac_i;
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerWeaponShot
			#undef OnPlayerWeaponShot
		#else
			#define _ALS_OnPlayerWeaponShot
		#endif
		#define OnPlayerWeaponShot ac_OnPlayerWeaponShot
		#if defined ac_OnPlayerWeaponShot
			forward ac_OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ);
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnVehicleMod(playerid, vehicleid, componentid)
#else
	public OnVehicleMod(playerid, vehicleid, componentid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new ac_i = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_i < ACInfo[playerid][acCall][12] + ac_Mtfc[12][0]) return ac_FloodDetect(playerid, 12);
		if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][12] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	if(ACInfo[playerid][acACAllow][23] && !ACInfo[playerid][acModShop])
	{
		#if defined OnCheatDetected
			ac_KickWithCode(playerid, "", 0, 23, 2);
			if(ACInfo[playerid][acKicked] > 0) return 0;
		#else
			return ac_KickWithCode(playerid, "", 0, 23, 2);
		#endif
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][12] = ac_i;
	ACInfo[playerid][acGtc][17] = ac_i + 3250;
	if(ACInfo[playerid][acACAllow][43] && !ac_IsCompatible((ac_i = GetVehicleModel(vehicleid)), componentid))
	{
		#if defined DEBUG
			printf("[Nex-AC debug] Veh model: %d, componentid: %d", ac_i, componentid);
		#endif
		return ac_KickWithCode(playerid, "", 0, 43, 1);
	}
	#if AC_USE_TUNING_GARAGES
		ac_i = componentid - 1000;
		if(ACInfo[playerid][acSet][12] != -1) ACInfo[playerid][acSet][12] += ac_cPrice[ac_i];
		else ACInfo[playerid][acSet][12] = ac_cPrice[ac_i];
		ACInfo[playerid][acCheatCount][12] = 0;
	#endif
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleMod
		return ac_OnVehicleMod(playerid, vehicleid, componentid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleMod
		#undef OnVehicleMod
	#else
		#define _ALS_OnVehicleMod
	#endif
	#define OnVehicleMod ac_OnVehicleMod
	#if defined ac_OnVehicleMod
		forward ac_OnVehicleMod(playerid, vehicleid, componentid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnVehiclePaintjob(playerid, vehicleid, paintjobid)
#else
	public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][13] + ac_Mtfc[13][0]) ac_FloodDetect(playerid, 13);
		else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][13] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	if(ACInfo[playerid][acACAllow][43] && !(0 <= paintjobid <= 2) && paintjobid != 255)
	{
		#if defined DEBUG
			printf("[Nex-AC debug] Veh model: %d, paintjobid: %d", GetVehicleModel(vehicleid), paintjobid);
		#endif
		ac_KickWithCode(playerid, "", 0, 43, 2);
	}
	else if(ACInfo[playerid][acACAllow][23] && !ACInfo[playerid][acModShop]) ac_KickWithCode(playerid, "", 0, 23, 4);
	if(ACInfo[playerid][acKicked] < 1)
	{
		if(paintjobid == 255) ACVehInfo[vehicleid][acPaintJob] = 3;
		else ACVehInfo[vehicleid][acPaintJob] = paintjobid;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][13] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehiclePaintjob
		return ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehiclePaintjob
		#undef OnVehiclePaintjob
	#else
		#define _ALS_OnVehiclePaintjob
	#endif
	#define OnVehiclePaintjob ac_OnVehiclePaintjob
	#if defined ac_OnVehiclePaintjob
		forward ac_OnVehiclePaintjob(playerid, vehicleid, paintjobid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnVehicleRespray(playerid, vehicleid, color1, color2)
#else
	public OnVehicleRespray(playerid, vehicleid, color1, color2)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][14] + ac_Mtfc[14][0]) return ac_FloodDetect(playerid, 14);
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][14] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	#if !AC_USE_TUNING_GARAGES && !AC_USE_PAYNSPRAY
		if(ACInfo[playerid][acACAllow][23])
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Veh model: %d, color1: %d, color2: %d", GetVehicleModel(vehicleid), color1, color2);
			#endif
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 23, 5);
				if(ACInfo[playerid][acKicked] > 0) return 0;
			#else
				return ac_KickWithCode(playerid, "", 0, 23, 5);
			#endif
		}
	#endif
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][14] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleRespray
		return ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleRespray
		#undef OnVehicleRespray
	#else
		#define _ALS_OnVehicleRespray
	#endif
	#define OnVehicleRespray ac_OnVehicleRespray
	#if defined ac_OnVehicleRespray
		forward ac_OnVehicleRespray(playerid, vehicleid, color1, color2);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnVehicleSpawn(vehicleid)
#else
	public OnVehicleSpawn(vehicleid)
#endif
{
	ACVehInfo[vehicleid][acPaintJob] = 3;
	ACVehInfo[vehicleid][acSpawned] = true;
	ACVehInfo[vehicleid][acHealth] = 1000.0;
	ACVehInfo[vehicleid][acPosDiff] =
	ACVehInfo[vehicleid][acVelX] =
	ACVehInfo[vehicleid][acVelY] =
	ACVehInfo[vehicleid][acVelZ] = 0.0;
	ACVehInfo[vehicleid][acLastSpeed] =
	ACVehInfo[vehicleid][acSpeedDiff] = 0;
	ACVehInfo[vehicleid][acPosX] = ACVehInfo[vehicleid][acSpawnPosX];
	ACVehInfo[vehicleid][acPosY] = ACVehInfo[vehicleid][acSpawnPosY];
	ACVehInfo[vehicleid][acPosZ] = ACVehInfo[vehicleid][acSpawnPosZ];
	ACVehInfo[vehicleid][acZAngle] = ACVehInfo[vehicleid][acSpawnZAngle];
	ACVehInfo[vehicleid][acDriver] = INVALID_PLAYER_ID;
	new ac_gtc = GetTickCount() + 2650;
	#if defined foreach
		foreach(new ac_i : Player)
		{
			if(ACInfo[ac_i][acVeh] == vehicleid)
			{
				ACInfo[ac_i][acSetPosTick] =
				ACInfo[ac_i][acGtc][11] = ac_gtc;
			}
		}
	#else
		#if defined GetPlayerPoolSize
			for(new ac_i = GetPlayerPoolSize(); ac_i >= 0; --ac_i)
		#else
			for(new ac_i = MAX_PLAYERS - 1; ac_i >= 0; --ac_i)
		#endif
		{
			if(IsPlayerInVehicle(ac_i, vehicleid))
			{
				ACInfo[ac_i][acSetPosTick] =
				ACInfo[ac_i][acGtc][11] = ac_gtc;
			}
		}
	#endif
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleSpawn
		return ac_OnVehicleSpawn(vehicleid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleSpawn
		#undef OnVehicleSpawn
	#else
		#define _ALS_OnVehicleSpawn
	#endif
	#define OnVehicleSpawn ac_OnVehicleSpawn
	#if defined ac_OnVehicleSpawn
		forward ac_OnVehicleSpawn(vehicleid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnVehicleDeath(vehicleid, killerid)
#else
	public OnVehicleDeath(vehicleid, killerid)
#endif
{
	if(IsPlayerConnected(killerid) && !IsPlayerNPC(killerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[killerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[killerid][acCall][15] + ac_Mtfc[15][0]) ac_FloodDetect(killerid, 15);
			else if(ac_gtc < ACInfo[killerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(killerid, 27);
			else ACInfo[killerid][acFloodCount][15] = ACInfo[killerid][acFloodCount][27] = 0;
		}
		ACInfo[killerid][acCall][27] = ACInfo[killerid][acCall][15] = ac_gtc;
	}
	new Float:ac_vHealth;
	GetVehicleHealth(vehicleid, ac_vHealth);
	if(ac_vHealth < 250.0) ACVehInfo[vehicleid][acSpawned] = false;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleDeath
		return ac_OnVehicleDeath(vehicleid, killerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleDeath
		#undef OnVehicleDeath
	#else
		#define _ALS_OnVehicleDeath
	#endif
	#define OnVehicleDeath ac_OnVehicleDeath
	#if defined ac_OnVehicleDeath
		forward ac_OnVehicleDeath(vehicleid, killerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerText(playerid, text[])
#else
	public OnPlayerText(playerid, text[])
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][16] + ac_Mtfc[16][0]) return ac_FloodDetect(playerid, 16);
			if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][16] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][16] = ac_gtc;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerText
		return ac_OnPlayerText(playerid, text);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerText
		#undef OnPlayerText
	#else
		#define _ALS_OnPlayerText
	#endif
	#define OnPlayerText ac_OnPlayerText
	#if defined ac_OnPlayerText
		forward ac_OnPlayerText(playerid, text[]);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerEnterCheckpoint(playerid)
#else
	public OnPlayerEnterCheckpoint(playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][17] + ac_Mtfc[17][0]) ac_FloodDetect(playerid, 17);
			else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][17] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][17] = ac_gtc;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerEnterCheckpoint
		return ac_OnPlayerEnterCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerEnterCheckpoint
		#undef OnPlayerEnterCheckpoint
	#else
		#define _ALS_OnPlayerEnterCheckpoint
	#endif
	#define OnPlayerEnterCheckpoint ac_OnPlayerEnterCheckpoint
	#if defined ac_OnPlayerEnterCheckpoint
		forward ac_OnPlayerEnterCheckpoint(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerLeaveCheckpoint(playerid)
#else
	public OnPlayerLeaveCheckpoint(playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][18] + ac_Mtfc[18][0]) ac_FloodDetect(playerid, 18);
			else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][18] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][18] = ac_gtc;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerLeaveCheckpoint
		return ac_OnPlayerLeaveCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerLeaveCheckpoint
		#undef OnPlayerLeaveCheckpoint
	#else
		#define _ALS_OnPlayerLeaveCheckpoint
	#endif
	#define OnPlayerLeaveCheckpoint ac_OnPlayerLeaveCheckpoint
	#if defined ac_OnPlayerLeaveCheckpoint
		forward ac_OnPlayerLeaveCheckpoint(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerRequestSpawn(playerid)
#else
	public OnPlayerRequestSpawn(playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	new ac_i;
	if(!IsPlayerNPC(playerid))
	{
		ac_i = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_i < ACInfo[playerid][acCall][19] + ac_Mtfc[19][0]) return ac_FloodDetect(playerid, 19);
			if(ac_i < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][19] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][19] = ac_i;
	}
	ac_i = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerRequestSpawn
		ac_i = ac_OnPlayerRequestSpawn(playerid);
	#endif
	if(ac_i && !ACInfo[playerid][acSpawned])
	{
		ACInfo[playerid][acSet][7] = 3;
		ACInfo[playerid][acSpawnTick] =
		ACInfo[playerid][acNOPCount][9] = 0;
		ACInfo[playerid][acSpawnRes] = 1;
	}
	return ac_i;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerRequestSpawn
		#undef OnPlayerRequestSpawn
	#else
		#define _ALS_OnPlayerRequestSpawn
	#endif
	#define OnPlayerRequestSpawn ac_OnPlayerRequestSpawn
	#if defined ac_OnPlayerRequestSpawn
		forward ac_OnPlayerRequestSpawn(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerExitedMenu(playerid)
#else
	public OnPlayerExitedMenu(playerid)
#endif
{
	if(!(0 <= playerid < MAX_PLAYERS) || ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][20] + ac_Mtfc[20][0]) ac_FloodDetect(playerid, 20);
		else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][20] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][20] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerExitedMenu
		return ac_OnPlayerExitedMenu(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerExitedMenu
		#undef OnPlayerExitedMenu
	#else
		#define _ALS_OnPlayerExitedMenu
	#endif
	#define OnPlayerExitedMenu ac_OnPlayerExitedMenu
	#if defined ac_OnPlayerExitedMenu
		forward ac_OnPlayerExitedMenu(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerEnterRaceCP(playerid)
#else
	public OnPlayerEnterRaceCheckpoint(playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][21] + ac_Mtfc[21][0]) ac_FloodDetect(playerid, 21);
			else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][21] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][21] = ac_gtc;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerEnterRaceCheckpoint
		return ac_OnPlayerEnterRaceCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerEnterRaceCheckpoin\
		|| defined _ALS_OnPlayerEnterRaceCP
		#undef OnPlayerEnterRaceCheckpoint
	#else
		#define _ALS_OnPlayerEnterRaceCP
	#endif
	#define OnPlayerEnterRaceCheckpoint ac_OnPlayerEnterRaceCheckpoint
	#if defined ac_OnPlayerEnterRaceCheckpoint
		forward ac_OnPlayerEnterRaceCheckpoint(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerLeaveRaceCP(playerid)
#else
	public OnPlayerLeaveRaceCheckpoint(playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	if(!IsPlayerNPC(playerid))
	{
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][22] + ac_Mtfc[22][0]) ac_FloodDetect(playerid, 22);
			else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][22] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][22] = ac_gtc;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerLeaveRaceCheckpoint
		return ac_OnPlayerLeaveRaceCheckpoint(playerid);
	#else
		return 1;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerLeaveRaceCheckpoin\
		|| defined _ALS_OnPlayerLeaveRaceCP
		#undef OnPlayerLeaveRaceCheckpoint
	#else
		#define _ALS_OnPlayerLeaveRaceCP
	#endif
	#define OnPlayerLeaveRaceCheckpoint ac_OnPlayerLeaveRaceCheckpoint
	#if defined ac_OnPlayerLeaveRaceCheckpoint
		forward ac_OnPlayerLeaveRaceCheckpoint(playerid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerClickPlayerTD(playerid, PlayerText:playertextid)
#else
	public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][23] + ac_Mtfc[23][0])
		{
			ac_FloodDetect(playerid, 23);
			return 1;
		}
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][23] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][23] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerClickPlayerTextDraw
		return ac_OnPlayerClickPlayerTextDraw(playerid, playertextid);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerClickPlayerTextDra\
		|| defined _ALS_OnPlayerClickPlayerTD
		#undef OnPlayerClickPlayerTextDraw
	#else
		#define _ALS_OnPlayerClickPlayerTD
	#endif
	#define OnPlayerClickPlayerTextDraw ac_OnPlayerClickPlayerTextDraw
	#if defined ac_OnPlayerClickPlayerTextDraw
		forward ac_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnVehDamageStatusUpd(vehicleid, playerid)
#else
	public OnVehicleDamageStatusUpdate(vehicleid, playerid)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][24] + ac_Mtfc[24][0]) ac_FloodDetect(playerid, 24);
		else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][24] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][24] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnVehicleDamageStatusUpdate
		return ac_OnVehicleDamageStatusUpdate(vehicleid, playerid);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnVehicleDamageStatusUpdat\
		|| defined _ALS_OnVehicleDamageStatusUpd
		#undef OnVehicleDamageStatusUpdate
	#else
		#define _ALS_OnVehicleDamageStatusUpd
	#endif
	#define OnVehicleDamageStatusUpdate ac_OnVehicleDamageStatusUpdate
	#if defined ac_OnVehicleDamageStatusUpdate
		forward ac_OnVehicleDamageStatusUpdate(vehicleid, playerid);
	#endif
#endif

#if defined OnVehicleSirenStateChange
	#if defined _inc_y_hooks || defined _INC_y_hooks
		hook OnVehicleSirenChange(playerid, vehicleid, newstate)
	#else
		public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
	#endif
	{
		if(ACInfo[playerid][acKicked] > 0) return 1;
		if(!IsPlayerNPC(playerid))
		{
			new ac_gtc = GetTickCount();
			if(ACInfo[playerid][acACAllow][49])
			{
				if(ac_gtc < ACInfo[playerid][acCall][25] + ac_Mtfc[25][0]) ac_FloodDetect(playerid, 25);
				else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
				else ACInfo[playerid][acFloodCount][25] = ACInfo[playerid][acFloodCount][27] = 0;
			}
			ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][25] = ac_gtc;
		}
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnVehicleSirenStateChange
			return ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
		#else
			return 0;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnVehicleSirenStateChange
			#undef OnVehicleSirenStateChange
		#else
			#define _ALS_OnVehicleSirenStateChange
		#endif
		#define OnVehicleSirenStateChange ac_OnVehicleSirenStateChange
		#if defined ac_OnVehicleSirenStateChange
			forward ac_OnVehicleSirenStateChange(playerid, vehicleid, newstate);
		#endif
	#endif
#endif

#if defined OnPlayerSelectDynamicObject
	#if defined _inc_y_hooks || defined _INC_y_hooks
		#if defined STREAMER_ENABLE_TAGS
			hook OnPlayerSelectDynObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z)
		#else
			hook OnPlayerSelectDynObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
		#endif
	#else
		#if defined STREAMER_ENABLE_TAGS
			public OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z)
		#else
			public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
		#endif
	#endif
	{
		if(ACInfo[playerid][acKicked] > 0) return 0;
		new ac_gtc = GetTickCount();
		if(ACInfo[playerid][acACAllow][49])
		{
			if(ac_gtc < ACInfo[playerid][acCall][26] + ac_Mtfc[26][0]) ac_FloodDetect(playerid, 26);
			else if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
			else ACInfo[playerid][acFloodCount][26] = ACInfo[playerid][acFloodCount][27] = 0;
		}
		ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][26] = ac_gtc;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnPlayerSelectDynamicObject
			return ac_OnPlayerSelectDynamicObject(playerid, objectid, modelid, x, y, z);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnPlayerSelectDynamicObjec\
			|| defined _ALS_OnPlayerSelectDynObject || defined _ALS_OnPlayerSelectDynamicObj
			#undef OnPlayerSelectDynamicObject
		#else
			#define _ALS_OnPlayerSelectDynObject
		#endif
		#define OnPlayerSelectDynamicObject ac_OnPlayerSelectDynamicObject
		#if defined ac_OnPlayerSelectDynamicObject
			#if defined STREAMER_ENABLE_TAGS
				forward ac_OnPlayerSelectDynamicObject(playerid, STREAMER_TAG_OBJECT:objectid, modelid, Float:x, Float:y, Float:z);
			#else
				forward ac_OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z);
			#endif
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
#else
	public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	new ac_gtc = GetTickCount();
	if(ACInfo[playerid][acACAllow][49])
	{
		if(ac_gtc < ACInfo[playerid][acCall][26] + ac_Mtfc[26][0])
		{
			ac_FloodDetect(playerid, 26);
			return 1;
		}
		if(ac_gtc < ACInfo[playerid][acCall][27] + ac_Mtfc[27][0]) ac_FloodDetect(playerid, 27);
		else ACInfo[playerid][acFloodCount][26] = ACInfo[playerid][acFloodCount][27] = 0;
	}
	ACInfo[playerid][acCall][27] = ACInfo[playerid][acCall][26] = ac_gtc;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerSelectObject
		return ac_OnPlayerSelectObject(playerid, type, objectid, modelid, fX, fY, fZ);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerSelectObject
		#undef OnPlayerSelectObject
	#else
		#define _ALS_OnPlayerSelectObject
	#endif
	#define OnPlayerSelectObject ac_OnPlayerSelectObject
	#if defined ac_OnPlayerSelectObject
		forward ac_OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ);
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	#if defined OnTrailerUpdate
		hook OnUnoccupiedVehicleUpd(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
	#elseif defined GetServerTickRate
		hook OnUnoccupiedVehicleUpd(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
	#else
		hook OnUnoccupiedVehicleUpd(vehicleid, playerid, passenger_seat)
	#endif
#else
	#if defined OnTrailerUpdate
		public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
	#elseif defined GetServerTickRate
		public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
	#else
		public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
	#endif
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 0;
	#if defined OnTrailerUpdate
		if(ACInfo[playerid][acACAllow][31] &&
		(new_x != new_x || new_y != new_y || new_z != new_z || vel_x != vel_x || vel_y != vel_y || vel_z != vel_z ||
		floatabs(new_x) >= 25000.0 || floatabs(new_y) >= 25000.0 || floatabs(new_z) >= 25000.0 ||
		floatabs(vel_x) >= 100.0 || floatabs(vel_y) >= 100.0 || floatabs(vel_z) >= 100.0))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Pos x, y, z: %f, %f, %f, vel x, y, z: %f, %f, %f", new_x, new_y, new_z, vel_x, vel_y, vel_z);
			#endif
			return ac_KickWithCode(playerid, "", 0, 31, 2);
		}
	#elseif defined GetServerTickRate
		if(ACInfo[playerid][acACAllow][31] &&
		(new_x != new_x || new_y != new_y || new_z != new_z ||
		floatabs(new_x) >= 25000.0 || floatabs(new_y) >= 25000.0 || floatabs(new_z) >= 25000.0))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Pos x, y, z: %f, %f, %f", new_x, new_y, new_z);
			#endif
			return ac_KickWithCode(playerid, "", 0, 31, 2);
		}
	#endif
	#if defined GetServerTickRate
		new Float:ac_x, Float:ac_y, Float:ac_z, Float:ac_dist = GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z);
		GetVehiclePos(vehicleid, ac_x, ac_y, ac_z);
		if(passenger_seat > 0)
		{
			new Float:ac_zDiff = new_z - ac_z;
			#if defined OnTrailerUpdate
			if(ACInfo[playerid][acACAllow][31] &&
			((vel_z > ACVehInfo[vehicleid][acVelZ] || ac_zDiff >= -0.8) &&
			(floatabs(vel_x) >= floatabs(ACVehInfo[vehicleid][acVelX]) && floatabs(ACVehInfo[vehicleid][acVelX]) >= 0.3 ||
			floatabs(vel_y) >= floatabs(ACVehInfo[vehicleid][acVelY]) && floatabs(ACVehInfo[vehicleid][acVelY]) >= 0.3) ||
			ac_zDiff >= -5.0 && (floatabs(new_x - ac_x) >= 12.0 || floatabs(new_y - ac_y) >= 12.0)))
			{
				if(++ACInfo[playerid][acCheatCount][4] > AC_MAX_CARSHOT_WARNINGS)
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Vel x, y: %f, %f, old vel x, y: %f, %f, pos diff x, y, z: %f, %f, %f, veh: %d",
						vel_x, vel_y, ACVehInfo[vehicleid][acVelX], ACVehInfo[vehicleid][acVelY], new_x - ac_x, new_y - ac_y, ac_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 31, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][4] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 31, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 31, 1, ACInfo[playerid][acCheatCount][4]);
				#endif
			}
			#else
			if(ACInfo[playerid][acACAllow][31] &&
			ac_zDiff >= -5.0 && (floatabs(new_x - ac_x) >= 12.0 || floatabs(new_y - ac_y) >= 12.0))
			{
				if(++ACInfo[playerid][acCheatCount][4] > AC_MAX_CARSHOT_WARNINGS)
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Pos diff x, y, z: %f, %f, %f, veh: %d",
						new_x - ac_x, new_y - ac_y, ac_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 31, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][4] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 31, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 31, 1, ACInfo[playerid][acCheatCount][4]);
				#endif
			}
			#endif
			#if defined OnTrailerUpdate
			else if(ACInfo[playerid][acACAllow][8] &&
			vel_z >= 0.1 && vel_z > ACVehInfo[vehicleid][acVelZ] &&
			floatabs(ac_x - new_x) < ac_zDiff / 2.0 && floatabs(ac_y - new_y) < ac_zDiff / 2.0)
			{
				if(++ACInfo[playerid][acCheatCount][3] > AC_MAX_FLYHACK_VEH_WARNINGS)
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Vel z: %f, old vel z: %f, pos diff x, y, z: %f, %f, %f, veh: %d",
						vel_z, ACVehInfo[vehicleid][acVelZ], ac_x - new_x, ac_y - new_y, ac_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 8, 2);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][3] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 8, 2);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 8, 2, ACInfo[playerid][acCheatCount][3]);
				#endif
			}
			#endif
			else
			{
				if(ACInfo[playerid][acCheatCount][4] > 0) ACInfo[playerid][acCheatCount][4]--;
				ACInfo[playerid][acCheatCount][3] = 0;
			}
		}
		if(ACInfo[playerid][acACAllow][5] &&
		ac_dist >= 15.0 && ac_dist > ACVehInfo[vehicleid][acPosDiff] + ((ac_dist / 3.0) * 1.6) &&
		(ac_z > -45.0 || VectorSize(new_x - ac_x, new_y - ac_y, 0.0) >= 180.0))
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Dist: %f, old pos diff: %f, old pos z: %f, veh: %d, playerid: %d",
				ac_dist, ACVehInfo[vehicleid][acPosDiff], ac_z, vehicleid, playerid);
			#endif
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 5, 1);
			#endif
			GetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
			SetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
			SetVehiclePos(vehicleid, ac_x, ac_y, ac_z);
			return 0;
		}
	#else
		new Float:ac_x, Float:ac_y, Float:ac_z, Float:ac_dist = GetVehicleDistanceFromPoint(vehicleid, ACVehInfo[vehicleid][acPosX], ACVehInfo[vehicleid][acPosY], ACVehInfo[vehicleid][acPosZ]);
		GetVehiclePos(vehicleid, ac_x, ac_y, ac_z);
		if(passenger_seat > 0)
		{
			new Float:ac_zDiff = ac_z - ACVehInfo[vehicleid][acPosZ];
			if(ACInfo[playerid][acACAllow][31] &&
			ac_zDiff >= -5.0 && (floatabs(ac_x - ACVehInfo[vehicleid][acPosX]) >= 12.0 || floatabs(ac_y - ACVehInfo[vehicleid][acPosY]) >= 12.0))
			{
				if(++ACInfo[playerid][acCheatCount][4] > AC_MAX_CARSHOT_WARNINGS)
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Pos diff x, y, z: %f, %f, %f, veh: %d",
						ac_x - ACVehInfo[vehicleid][acPosX], ac_y - ACVehInfo[vehicleid][acPosY], ac_zDiff, vehicleid);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 31, 1);
						if(ACInfo[playerid][acKicked] > 0) return 0;
						ACInfo[playerid][acCheatCount][4] = 0;
					#else
						return ac_KickWithCode(playerid, "", 0, 31, 1);
					#endif
				}
				#if defined OnCheatWarning
					else OnCheatWarning(playerid, "", 0, 31, 1, ACInfo[playerid][acCheatCount][4]);
				#endif
			}
			else if(ACInfo[playerid][acCheatCount][4] > 0) ACInfo[playerid][acCheatCount][4]--;
		}
		#if defined VectorSize
		if(ACInfo[playerid][acACAllow][5] &&
		ac_dist >= 15.0 && ac_dist > ACVehInfo[vehicleid][acPosDiff] + ((ac_dist / 3.0) * 1.6) &&
		(ACVehInfo[vehicleid][acPosZ] > -45.0 || VectorSize(ac_x - ACVehInfo[vehicleid][acPosX], ac_y - ACVehInfo[vehicleid][acPosY], 0.0) >= 180.0))
		#else
		if(ACInfo[playerid][acACAllow][5] &&
		ac_dist >= 15.0 && ac_dist > ACVehInfo[vehicleid][acPosDiff] + ((ac_dist / 3.0) * 1.6) &&
		(ACVehInfo[vehicleid][acPosZ] > -45.0 || floatsqroot(floatpower(ac_x - ACVehInfo[vehicleid][acPosX], 2.0) + floatpower(ac_y - ACVehInfo[vehicleid][acPosY], 2.0)) >= 180.0))
		#endif
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Dist: %f, old pos diff: %f, old pos z: %f, veh: %d, playerid: %d",
				ac_dist, ACVehInfo[vehicleid][acPosDiff], ACVehInfo[vehicleid][acPosZ], vehicleid, playerid);
			#endif
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 5, 1);
			#endif
			SetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
			SetVehiclePos(vehicleid, ACVehInfo[vehicleid][acPosX], ACVehInfo[vehicleid][acPosY], ACVehInfo[vehicleid][acPosZ]);
			return 0;
		}
	#endif
	#undef AC_MAX_FLYHACK_VEH_WARNINGS
	#undef AC_MAX_CARSHOT_WARNINGS
	new ac_a = 1;
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnUnoccupiedVehicleUpdate
		#if defined OnTrailerUpdate
			ac_a = ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z, vel_x, vel_y, vel_z);
		#elseif defined GetServerTickRate
			ac_a = ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, new_x, new_y, new_z);
		#else
			ac_a = ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat);
		#endif
	#endif
	#if defined OnTrailerUpdate
		if(ac_a)
		{
			ACVehInfo[vehicleid][acSpeedDiff] = ac_GetSpeed(vel_x, vel_y, vel_z) - ac_GetSpeed(ACVehInfo[vehicleid][acVelX], ACVehInfo[vehicleid][acVelY], ACVehInfo[vehicleid][acVelZ]);
			ACVehInfo[vehicleid][acPosDiff] = ac_dist;
			ACVehInfo[vehicleid][acPosX] = new_x;
			ACVehInfo[vehicleid][acPosY] = new_y;
			ACVehInfo[vehicleid][acPosZ] = new_z;
			ACVehInfo[vehicleid][acVelX] = vel_x;
			ACVehInfo[vehicleid][acVelY] = vel_y;
			ACVehInfo[vehicleid][acVelZ] = vel_z;
		}
	#elseif defined GetServerTickRate
		if(ac_a)
		{
			ACVehInfo[vehicleid][acPosDiff] = ac_dist;
			ACVehInfo[vehicleid][acPosX] = new_x;
			ACVehInfo[vehicleid][acPosY] = new_y;
			ACVehInfo[vehicleid][acPosZ] = new_z;
		}
	#else
		GetVehicleZAngle(vehicleid, ACVehInfo[vehicleid][acZAngle]);
		ACVehInfo[vehicleid][acPosDiff] = ac_dist;
		ACVehInfo[vehicleid][acPosX] = ac_x;
		ACVehInfo[vehicleid][acPosY] = ac_y;
		ACVehInfo[vehicleid][acPosZ] = ac_z;
	#endif
	return ac_a;
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnUnoccupiedVehicleUpdate
		#undef OnUnoccupiedVehicleUpdate
	#else
		#define _ALS_OnUnoccupiedVehicleUpdate
	#endif
	#define OnUnoccupiedVehicleUpdate ac_OnUnoccupiedVehicleUpdate
	#if defined ac_OnUnoccupiedVehicleUpdate
		#if defined OnTrailerUpdate
			forward ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z);
		#elseif defined GetServerTickRate
			forward ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z);
		#else
			forward ac_OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat);
		#endif
	#endif
#endif

#if defined OnTrailerUpdate
	#if defined _inc_y_hooks || defined _INC_y_hooks
		hook OnTrailerUpdate(playerid, vehicleid)
	#else
		public OnTrailerUpdate(playerid, vehicleid)
	#endif
	{
		if(ACInfo[playerid][acKicked] > 0) return 0;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnTrailerUpdate
			return ac_OnTrailerUpdate(playerid, vehicleid);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnTrailerUpdate
			#undef OnTrailerUpdate
		#else
			#define _ALS_OnTrailerUpdate
		#endif
		#define OnTrailerUpdate ac_OnTrailerUpdate
		#if defined ac_OnTrailerUpdate
			forward ac_OnTrailerUpdate(playerid, vehicleid);
		#endif
	#endif
#endif

#if defined _inc_y_hooks || defined _INC_y_hooks
	hook OnPlayerEditAttachedObj(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
#else
	public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
#endif
{
	if(ACInfo[playerid][acKicked] > 0) return 1;
	if(ACInfo[playerid][acACAllow][46] && 384 <= modelid <= 393)
	{
		#if defined DEBUG
			printf("[Nex-AC debug] Object modelid: %d", modelid);
		#endif
		ac_KickWithCode(playerid, "", 0, 46);
		return 1;
	}
	#if !defined _inc_y_hooks && !defined _INC_y_hooks\
		&& defined ac_OnPlayerEditAttachedObject
		return ac_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	#else
		return 0;
	#endif
}

#if !defined _inc_y_hooks && !defined _INC_y_hooks
	#if defined _ALS_OnPlayerEditAttachedObject
		#undef OnPlayerEditAttachedObject
	#else
		#define _ALS_OnPlayerEditAttachedObject
	#endif
	#define OnPlayerEditAttachedObject ac_OnPlayerEditAttachedObject
	#if defined ac_OnPlayerEditAttachedObject
		forward ac_OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	#endif
#endif

#if defined PAWNRAKNET_INC_
	#if defined _inc_y_hooks || defined _INC_y_hooks
		hook OnIncomingPacket(playerid, packetid, BitStream:bs)
	#else
		public OnIncomingPacket(playerid, packetid, BitStream:bs)
	#endif
	{
		if(0 <= playerid < MAX_PLAYERS)
		{
			if(ACInfo[playerid][acKicked] > 0) return 0;
			if(packetid == 209)
			{
				new ac_uData[PR_UnoccupiedSync];
				BS_IgnoreBits(bs, 8);
				BS_ReadUnoccupiedSync(bs, ac_uData);
				if(ac_uData[PR_seatId] > 0 &&
				(ac_uData[PR_seatId] != GetPlayerVehicleSeat(playerid) || !IsPlayerInVehicle(playerid, ac_uData[PR_vehicleId])) ||
				ac_uData[PR_roll][0] != ac_uData[PR_roll][0] ||
				ac_uData[PR_roll][1] != ac_uData[PR_roll][1] ||
				ac_uData[PR_roll][2] != ac_uData[PR_roll][2] ||
				ac_uData[PR_direction][0] != ac_uData[PR_direction][0] ||
				ac_uData[PR_direction][1] != ac_uData[PR_direction][1] ||
				ac_uData[PR_direction][2] != ac_uData[PR_direction][2] ||
				ac_uData[PR_angularVelocity][0] != ac_uData[PR_angularVelocity][0] ||
				ac_uData[PR_angularVelocity][1] != ac_uData[PR_angularVelocity][1] ||
				ac_uData[PR_angularVelocity][2] != ac_uData[PR_angularVelocity][2] ||
				floatabs(ac_uData[PR_roll][0]) >= 1.0 ||
				floatabs(ac_uData[PR_roll][1]) >= 1.0 ||
				floatabs(ac_uData[PR_roll][2]) >= 1.0 ||
				floatabs(ac_uData[PR_direction][0]) >= 1.0 ||
				floatabs(ac_uData[PR_direction][1]) >= 1.0 ||
				floatabs(ac_uData[PR_direction][2]) >= 1.0 ||
				floatabs(ac_uData[PR_angularVelocity][0]) >= 1.0 ||
				floatabs(ac_uData[PR_angularVelocity][1]) >= 1.0 ||
				floatabs(ac_uData[PR_angularVelocity][2]) >= 1.0) return 0;
			}
			else if(packetid == 210)
			{
				new ac_tData[PR_TrailerSync];
				BS_IgnoreBits(bs, 8);
				BS_ReadTrailerSync(bs, ac_tData);
				if(ACVehInfo[ac_tData[PR_trailerId]][acDriver] != INVALID_PLAYER_ID) return 0;
				else if(ACInfo[playerid][acACAllow][5])
				{
					new Float:ac_dist = GetVehicleDistanceFromPoint(ac_tData[PR_trailerId], ac_tData[PR_position][0], ac_tData[PR_position][1], ac_tData[PR_position][2]);
					if(ac_dist >= 80.0)
					{
						new Float:ac_x, Float:ac_y, Float:ac_z;
						GetVehiclePos(ac_tData[PR_trailerId], ac_x, ac_y, ac_z);
						#if defined DEBUG
							printf("[Nex-AC debug] Dist: %f, old pos z: %f, veh: %d, playerid: %d",
							ac_dist, ac_z, ac_tData[PR_trailerId], playerid);
						#endif
						#if defined OnCheatDetected
							ac_KickWithCode(playerid, "", 0, 5, 2);
						#endif
						GetVehicleZAngle(ac_tData[PR_trailerId], ACVehInfo[ac_tData[PR_trailerId]][acZAngle]);
						SetVehicleZAngle(ac_tData[PR_trailerId], ACVehInfo[ac_tData[PR_trailerId]][acZAngle]);
						SetVehiclePos(ac_tData[PR_trailerId], ac_x, ac_y, ac_z);
						return 0;
					}
				}
			}
		}
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnIncomingPacket
			return ac_OnIncomingPacket(playerid, packetid, bs);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnIncomingPacket
			#undef OnIncomingPacket
		#else
			#define _ALS_OnIncomingPacket
		#endif
		#define OnIncomingPacket ac_OnIncomingPacket
		#if defined ac_OnIncomingPacket
			forward ac_OnIncomingPacket(playerid, packetid, BitStream:bs);
		#endif
	#endif

	#if defined _inc_y_hooks || defined _INC_y_hooks
		hook OnIncomingRPC(playerid, rpcid, BitStream:bs)
	#else
		public OnIncomingRPC(playerid, rpcid, BitStream:bs)
	#endif
	{
		if(0 <= playerid < MAX_PLAYERS && ACInfo[playerid][acKicked] > 0 && ACInfo[playerid][acOnline]) return 0;
		#if !defined _inc_y_hooks && !defined _INC_y_hooks\
			&& defined ac_OnIncomingRPC
			return ac_OnIncomingRPC(playerid, rpcid, bs);
		#else
			return 1;
		#endif
	}

	#if !defined _inc_y_hooks && !defined _INC_y_hooks
		#if defined _ALS_OnIncomingRPC
			#undef OnIncomingRPC
		#else
			#define _ALS_OnIncomingRPC
		#endif
		#define OnIncomingRPC ac_OnIncomingRPC
		#if defined ac_OnIncomingRPC
			forward ac_OnIncomingRPC(playerid, rpcid, BitStream:bs);
		#endif
	#endif
#endif

ac_fpublic ac_Timer(playerid)
{
	if(!IsPlayerConnected(playerid) || ACInfo[playerid][acKicked] > 0) return 0;
	new ac_gpp;
	#if defined NetStats_MessagesRecvPerSecond
		if(ACInfo[playerid][acACAllow][51] && (ac_gpp = NetStats_MessagesRecvPerSecond(playerid)) > AC_MAX_MSGS_REC_DIFF)
		{
			#if defined DEBUG
				printf("[Nex-AC debug] Max msgs per sec: %d, msgs per sec: %d", AC_MAX_MSGS_REC_DIFF, ac_gpp);
			#endif
			ac_KickWithCode(playerid, "", 0, 51);
		}
	#endif
	#undef AC_MAX_MSGS_REC_DIFF
	ac_gpp = GetPlayerPing(playerid);
	if(ACInfo[playerid][acACAllow][38])
	{
		if(ac_gpp > AC_MAX_PING && ac_gpp != 65535)
		{
			if(++ACInfo[playerid][acCheatCount][0] > AC_MAX_PING_WARNINGS)
			{
				#if defined DEBUG
					printf("[Nex-AC debug] Max ping: %d, ping: %d", AC_MAX_PING, ac_gpp);
				#endif
				#undef AC_MAX_PING
				#undef AC_MAX_PING_WARNINGS
				ac_KickWithCode(playerid, "", 0, 38);
				#if defined OnCheatDetected
					ACInfo[playerid][acCheatCount][0] = 0;
				#endif
			}
			#if defined OnCheatWarning
				else OnCheatWarning(playerid, "", 0, 38, 0, ACInfo[playerid][acCheatCount][0]);
			#endif
		}
		else ACInfo[playerid][acCheatCount][0] = 0;
	}
	new ac_gtc = GetTickCount();
	if(ac_gtc < ACInfo[playerid][acUpdateTick] + 1500)
	{
		new ac_t, ac_s;
		#if AC_USE_AMMUNATIONS || AC_USE_CASINOS
			new ac_int = GetPlayerInterior(playerid);
		#endif
		#if AC_USE_PICKUP_WEAPONS\
			&& defined Streamer_GetDistanceToItem\
			&& defined Streamer_GetIntData
			new Float:ac_pick_dist;
			if(ACInfo[playerid][acLastPickup] > MAX_PICKUPS)
			{
				new Float:ac_x, Float:ac_y, Float:ac_z;
				GetPlayerPos(playerid, ac_x, ac_y, ac_z);
				Streamer_GetDistanceToItem(ac_x, ac_y, ac_z, STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, ac_pick_dist);
				ac_t = Streamer_GetIntData(STREAMER_TYPE_PICKUP, ACInfo[playerid][acLastPickup] - MAX_PICKUPS, E_STREAMER_EXTRA_ID) - 100;
			}
		#endif
		if(!ACInfo[playerid][acDead] && (ac_s = GetPlayerWeapon(playerid)) != -1 && ac_gtc > ACInfo[playerid][acGtc][7] + ac_gpp)
		{
			#if AC_USE_AMMUNATIONS
				new ac_m;
			#endif
			ac_s = ac_wSlot[ac_s];
			for(new ac_i, ac_w, ac_a, bool:ac_cw; ac_i <= 12; ++ac_i)
			{
				GetPlayerWeaponData(playerid, ac_i, ac_w, ac_a);
				if(ac_w == 39) ac_cw = true;
				if(ac_s != ac_i)
				{
					if(ACInfo[playerid][acSetWeapon][ac_i] != -1)
					{
						if(ACInfo[playerid][acSetWeapon][ac_i] == ac_w)
						{
							if(ACInfo[playerid][acSet][3] == ac_w) ACInfo[playerid][acSet][3] = -1;
							ACInfo[playerid][acSetWeapon][ac_i] = -1;
							ACInfo[playerid][acWeapon][ac_i] = ac_w;
						}
						else if(ac_gtc > ACInfo[playerid][acGtcSetWeapon][ac_i] + ac_gpp)
						{
							if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][0])
							{
								if(++ACInfo[playerid][acNOPCount][0] > AC_MAX_NOP_TIMER_WARNINGS)
								{
									#if defined DEBUG
										printf(DEBUG_CODE_5, playerid, "GivePlayerWeapon");
										printf("[Nex-AC debug] AC weapon: %d, weaponid: %d", ACInfo[playerid][acSetWeapon][ac_i], ac_w);
									#endif
									ac_KickWithCode(playerid, "", 0, 52, 13);
									#if defined OnCheatDetected
										ACInfo[playerid][acSetWeapon][ac_i] = -1;
									#endif
								}
								#if defined OnNOPWarning
									else OnNOPWarning(playerid, 13, ACInfo[playerid][acNOPCount][0]);
								#endif
							}
							else if(++ACInfo[playerid][acNOPCount][0] > AC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acSetWeapon][ac_i] = -1;
						}
					}
					else
					{
						if(ACInfo[playerid][acWeapon][ac_i] != ac_w)
						{
							#if AC_USE_PICKUP_WEAPONS
								#if defined Streamer_GetDistanceToItem\
									&& defined Streamer_GetIntData
								if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS &&
								ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == ac_w &&
								ac_a <= (3 <= ac_i <= 5 ? ACInfo[playerid][acAmmo][ac_i] + ac_pAmmo[ac_w] : ac_pAmmo[ac_w]) &&
								IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
								ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]) ||
								ACInfo[playerid][acLastPickup] > MAX_PICKUPS && ac_t == ac_w &&
								ac_a <= (3 <= ac_i <= 5 ? ACInfo[playerid][acAmmo][ac_i] + ac_pAmmo[ac_w] : ac_pAmmo[ac_w]) && ac_pick_dist <= 15.0)
								#else
								if(0 <= ACInfo[playerid][acLastPickup] < MAX_PICKUPS &&
								ACPickInfo[ACInfo[playerid][acLastPickup]][acWeapon] == ac_w &&
								ac_a <= (3 <= ac_i <= 5 ? ACInfo[playerid][acAmmo][ac_i] + ac_pAmmo[ac_w] : ac_pAmmo[ac_w]) &&
								IsPlayerInRangeOfPoint(playerid, 15.0, ACPickInfo[ACInfo[playerid][acLastPickup]][acPosX],
								ACPickInfo[ACInfo[playerid][acLastPickup]][acPosY], ACPickInfo[ACInfo[playerid][acLastPickup]][acPosZ]))
								#endif
								{
									ACInfo[playerid][acWeapon][ac_i] = ac_w;
									ACInfo[playerid][acAmmo][ac_i] = ac_a;
								}
								else
								{
							#endif
								if(ac_w == 0 || ac_w == 40 && ac_cw ||
								ac_w == 46 && ACInfo[playerid][acVeh] > 0 && ACInfo[playerid][acParachute] > 0)
								{
									ACInfo[playerid][acWeapon][ac_i] = ac_w;
									ACInfo[playerid][acAmmo][ac_i] = ac_a;
									ACInfo[playerid][acParachute] = 0;
								}
								else if(ACInfo[playerid][acACAllow][15] && !(16 <= ac_w <= 43 && ac_a == 0))
								{
									#if defined DEBUG
										printf("[Nex-AC debug] AC weaponid: %d, AC ammo: %d, weaponid: %d, ammo: %d",
										ACInfo[playerid][acWeapon][ac_i], ACInfo[playerid][acAmmo][ac_i], ac_w, ac_a);
									#endif
									ac_KickWithCode(playerid, "", 0, 15, 2);
									#if defined OnCheatDetected
										if(ACInfo[playerid][acKicked] < 1)
										{
											ACInfo[playerid][acWeapon][ac_i] = ac_w;
											ACInfo[playerid][acAmmo][ac_i] = ac_a;
										}
									#endif
								}
							#if AC_USE_PICKUP_WEAPONS
								}
							#endif
							#undef AC_USE_PICKUP_WEAPONS
						}
						if(ACInfo[playerid][acGiveAmmo][ac_i] != -65535)
						{
							if(ACInfo[playerid][acGiveAmmo][ac_i] == ac_a ||
							ACInfo[playerid][acGiveAmmo][ac_i] > ac_a && ac_gtc > ACInfo[playerid][acGtcGiveAmmo][ac_i] + ac_gpp)
							{
								ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
								ACInfo[playerid][acAmmo][ac_i] = ac_a;
							}
							else if(ac_gtc > ACInfo[playerid][acGtcGiveAmmo][ac_i] + ac_gpp)
							{
								if(ACInfo[playerid][acACAllow][52] && ACInfo[playerid][acNOPAllow][1])
								{
									if(++ACInfo[playerid][acNOPCount][1] > AC_MAX_NOP_TIMER_WARNINGS)
									{
										#if defined DEBUG
											printf(DEBUG_CODE_5, playerid, "SetPlayerAmmo");
											printf("[Nex-AC debug] AC ammo: %d, ammo: %d, weaponid: %d",
											ACInfo[playerid][acGiveAmmo][ac_i], ac_a, ac_w);
										#endif
										ac_KickWithCode(playerid, "", 0, 52, 14);
										#if defined OnCheatDetected
											ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
										#endif
									}
									#if defined OnNOPWarning
										else OnNOPWarning(playerid, 14, ACInfo[playerid][acNOPCount][1]);
									#endif
								}
								else if(++ACInfo[playerid][acNOPCount][1] > AC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acGiveAmmo][ac_i] = -65535;
							}
						}
						else if(16 <= ac_w <= 43)
						{
							if(ac_a == 0) ACInfo[playerid][acAmmo][ac_i] = 0;
							else if(ACInfo[playerid][acACAllow][16] && ac_w != 40 &&
							(ac_a > ACInfo[playerid][acAmmo][ac_i] || ac_a < 0 <= ACInfo[playerid][acAmmo][ac_i]) &&
							(!ac_LagCompMode || ac_w != 38 && !(22 <= ac_w <= 34) || ac_gtc > ACInfo[playerid][acShotTick] + 3650))
							{
								#if defined DEBUG
									printf("[Nex-AC debug] AC ammo: %d, ammo: %d, weaponid: %d",
									ACInfo[playerid][acAmmo][ac_i], ac_a, ac_w);
								#endif
								ac_KickWithCode(playerid, "", 0, 16, 2);
								#if defined OnCheatDetected
									if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acAmmo][ac_i] = ac_a;
								#endif
							}
						}
					}
				}
				else if(ac_w == 38 || 22 <= ac_w <= 34)
				{
					if(ac_a > ACInfo[playerid][acAmmo][ac_i] || ac_a < 0 <= ACInfo[playerid][acAmmo][ac_i])
					{
						if(ACInfo[playerid][acGiveAmmo][ac_i] == -65535)
						{
							#if AC_USE_AMMUNATIONS
								if(22 <= ac_w <= 32 && ac_InAmmuNation(playerid, ac_int) &&
								(ac_m = ac_a - ACInfo[playerid][acAmmo][ac_i]) % ac_AmmuNationInfo[ac_w - 22][1] == 0)
								{
									if(ACInfo[playerid][acSet][10] != -1) ACInfo[playerid][acSet][10] += ac_AmmuNationInfo[ac_w - 22][0] * (ac_m / ac_AmmuNationInfo[ac_w - 22][1]);
									else ACInfo[playerid][acSet][10] = ac_AmmuNationInfo[ac_w - 22][0] * (ac_m / ac_AmmuNationInfo[ac_w - 22][1]);
									ACInfo[playerid][acAmmo][ac_i] += ac_m;
									ACInfo[playerid][acGtc][15] = ac_gtc + 2650;
									ACInfo[playerid][acCheatCount][10] = 0;
								}
								else
								{
							#endif
								if(ACInfo[playerid][acACAllow][16] && (!ac_LagCompMode || ac_gtc > ACInfo[playerid][acShotTick] + 3650))
								{
									#if defined DEBUG
										printf("[Nex-AC debug] AC ammo: %d, ammo: %d, weaponid: %d",
										ACInfo[playerid][acAmmo][ac_i], ac_a, ac_w);
									#endif
									ac_KickWithCode(playerid, "", 0, 16, 3);
									#if defined OnCheatDetected
										if(ACInfo[playerid][acKicked] < 1) ACInfo[playerid][acAmmo][ac_i] = ac_a;
									#endif
								}
							#if AC_USE_AMMUNATIONS
								}
							#endif
						}
					}
					else if(ACInfo[playerid][acAmmo][ac_i] != 0) ACInfo[playerid][acAmmo][ac_i] = ac_a;
				}
			}
		}
		if((ac_s = GetPlayerState(playerid)) == PLAYER_STATE_DRIVER)
		{
			ac_t = GetPlayerVehicleID(playerid);
			new Float:ac_pX, Float:ac_pY, Float:ac_pZ, Float:ac_vX, Float:ac_vY, Float:ac_vZ;
			GetPlayerPos(playerid, ac_pX, ac_pY, ac_pZ);
			GetVehicleVelocity(ac_t, ac_vX, ac_vY, ac_vZ);
			if(ACInfo[playerid][acACAllow][35] && GetPlayerCameraMode(playerid) == 55) ac_KickWithCode(playerid, "", 0, 35);
			if(ACInfo[playerid][acACAllow][3] && ACInfo[playerid][acSet][9] == -1 && ac_gtc > ACInfo[playerid][acGtc][11] + ac_gpp)
			{
				new Float:ac_time, Float:ac_maxdist = 140.0,
				Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acLastPosX], ACInfo[playerid][acLastPosY], ac_pZ),
				Float:ac_dist_set = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], ac_pZ);
				if((ac_time = (ac_gtc - ACInfo[playerid][acTimerTick]) / 1000.0) > 1.0) ac_maxdist *= ac_time;
				if(ac_dist >= ac_maxdist && (ACInfo[playerid][acSet][8] == -1 || ac_dist_set >= ac_maxdist))
				{
					#if defined DEBUG
						printf("[Nex-AC debug] Dist: %f, dist set: %f, acSet[8]: %d, speed: %d, veh: %d",
						ac_dist, ac_dist_set, ACInfo[playerid][acSet][8], ac_GetSpeed(ac_vX, ac_vY, ac_vZ), ac_t);
					#endif
					ac_KickWithCode(playerid, "", 0, 3, 3);
				}
			}
			ACInfo[playerid][acLastPosX] = ac_pX;
			ACInfo[playerid][acLastPosY] = ac_pY;
			ac_s = ac_GetSpeed(ac_vX, ac_vY);
			if(ACInfo[playerid][acACAllow][10] && ac_gtc > ACInfo[playerid][acGtc][9] + ac_gpp)
			{
				new ac_model = GetVehicleModel(ac_t), Float:ac_time, ac_maxdiff = 80;
				if((ac_time = (ac_gtc - ACInfo[playerid][acTimerTick]) / 1100.0) > 1.0) ac_maxdiff = floatround(ac_maxdiff * ac_time);
				if(ac_s >= ACVehInfo[ac_t][acLastSpeed] + ac_maxdiff && !(ac_model == 449 || 537 <= ac_model <= 538))
				{
					ACInfo[playerid][acCheatCount][20] += (1 * AC_SPEEDHACK_VEH_RESET_DELAY);
					if(ACInfo[playerid][acCheatCount][20] > AC_MAX_SPEEDHACK_VEH_WARNINGS)
					{
						#undef AC_MAX_SPEEDHACK_VEH_WARNINGS
						#undef AC_SPEEDHACK_VEH_RESET_DELAY
						#if defined DEBUG
							printf("[Nex-AC debug] Speed: %d, last speed: %d, veh model: %d",
							ac_s, ACVehInfo[ac_t][acLastSpeed], ac_model);
						#endif
						ac_KickWithCode(playerid, "", 0, 10, 4);
						#if defined OnCheatDetected
							ACInfo[playerid][acCheatCount][20] = 0;
						#endif
					}
					#if defined OnCheatWarning
						else OnCheatWarning(playerid, "", 0, 10, 4, ACInfo[playerid][acCheatCount][20]);
					#endif
				}
			}
			ACVehInfo[ac_t][acLastSpeed] = ac_s;
		}
		else if(ac_s == PLAYER_STATE_ONFOOT)
		{
			new Float:ac_pX, Float:ac_pY, Float:ac_pZ;
			GetPlayerPos(playerid, ac_pX, ac_pY, ac_pZ);
			if(ACInfo[playerid][acACAllow][2] &&
			!ACInfo[playerid][acIntEnterExits] && ACInfo[playerid][acSet][9] == -1 &&
			!IsVehicleStreamedIn(GetPlayerSurfingVehicleID(playerid), playerid) &&
			GetPlayerSurfingObjectID(playerid) == INVALID_OBJECT_ID)
			{
				new Float:ac_time, Float:ac_maxdist = 80.0,
				Float:ac_dist = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acLastPosX], ACInfo[playerid][acLastPosY], ac_pZ),
				Float:ac_dist_set = GetPlayerDistanceFromPoint(playerid, ACInfo[playerid][acSetPosX], ACInfo[playerid][acSetPosY], ac_pZ);
				if((ac_time = (ac_gtc - ACInfo[playerid][acTimerTick]) / 1000.0) > 1.0) ac_maxdist *= ac_time;
				if(ac_dist >= ac_maxdist && (ACInfo[playerid][acSet][8] == -1 || ac_dist_set >= ac_maxdist))
				{
					#if defined DEBUG
						new Float:ac_vX, Float:ac_vY, Float:ac_vZ;
						GetPlayerVelocity(playerid, ac_vX, ac_vY, ac_vZ);
						printf("[Nex-AC debug] Dist: %f, dist set: %f, acSet[8]: %d, speed: %d, old pos x, y: %f, %f",
						ac_dist, ac_dist_set, ACInfo[playerid][acSet][8], ac_GetSpeed(ac_vX, ac_vY, ac_vZ), ACInfo[playerid][acLastPosX], ACInfo[playerid][acLastPosY]);
					#endif
					ac_KickWithCode(playerid, "", 0, 2, 6);
				}
			}
			ACInfo[playerid][acLastPosX] = ac_pX;
			ACInfo[playerid][acLastPosY] = ac_pY;
		}
		ac_t = orig_GetPlayerMoney(playerid);
		#if AC_USE_AMMUNATIONS
			if(ACInfo[playerid][acSet][10] != -1)
			{
				if(ac_t < ACInfo[playerid][acMoney] &&
				ACInfo[playerid][acSet][10] <= ACInfo[playerid][acMoney] - ac_t) ACInfo[playerid][acSet][10] = -1;
				else if(ac_gtc > ACInfo[playerid][acGtc][15] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][15])
					{
						if(++ACInfo[playerid][acCheatCount][10] > AC_MAX_NOP_TIMER_WARNINGS)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] Money: %d, old money: %d, price: %d",
								ac_t, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][10]);
							#endif
							ac_KickWithCode(playerid, "", 0, 15, 4);
							#if defined OnCheatDetected
								ACInfo[playerid][acSet][10] = -1;
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 15, 4, ACInfo[playerid][acCheatCount][10]);
						#endif
					}
					else if(++ACInfo[playerid][acCheatCount][10] > AC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acSet][10] = -1;
				}
			}
		#endif
		#if AC_USE_TUNING_GARAGES
			if(ACInfo[playerid][acSet][12] != -1)
			{
				if(ac_t < ACInfo[playerid][acMoney] &&
				ACInfo[playerid][acSet][12] <= ACInfo[playerid][acMoney] - ac_t) ACInfo[playerid][acSet][12] = -1;
				else if(ac_gtc > ACInfo[playerid][acGtc][17] + ac_gpp)
				{
					if(ACInfo[playerid][acACAllow][23])
					{
						if(++ACInfo[playerid][acCheatCount][12] > AC_MAX_NOP_TIMER_WARNINGS)
						{
							#if defined DEBUG
								printf("[Nex-AC debug] Money: %d, old money: %d, component price: %d",
								ac_t, ACInfo[playerid][acMoney], ACInfo[playerid][acSet][12]);
							#endif
							ac_KickWithCode(playerid, "", 0, 23, 6);
							#if defined OnCheatDetected
								ACInfo[playerid][acSet][12] = -1;
							#endif
						}
						#if defined OnCheatWarning
							else OnCheatWarning(playerid, "", 0, 23, 6, ACInfo[playerid][acCheatCount][12]);
						#endif
					}
					else if(++ACInfo[playerid][acCheatCount][12] > AC_MAX_NOP_TIMER_WARNINGS) ACInfo[playerid][acSet][12] = -1;
				}
			}
		#endif
		#undef AC_USE_TUNING_GARAGES
		#undef AC_MAX_NOP_TIMER_WARNINGS
		if(ACInfo[playerid][acNOPCount][11] > 0) ACInfo[playerid][acNOPCount][11]--;
		else
		{
			if(ACInfo[playerid][acACAllow][14] &&
			ac_t > ACInfo[playerid][acMoney] && (!ACInfo[playerid][acStuntBonus] || ACInfo[playerid][acVeh] == 0))
			{
				#if AC_USE_CASINOS
					if(!ac_InCasino(playerid, ac_int))
					{
				#endif
					#if defined DEBUG
						printf("[Nex-AC debug] AC money: %d, money: %d, stunt bonus: %d, veh: %d, playerid: %d",
						ACInfo[playerid][acMoney], ac_t, ACInfo[playerid][acStuntBonus], ACInfo[playerid][acVeh], playerid);
					#endif
					#if defined OnCheatDetected
						ac_KickWithCode(playerid, "", 0, 14);
					#endif
					ac_t = ACInfo[playerid][acMoney];
					ResetPlayerMoney(playerid);
					GivePlayerMoney(playerid, ac_t);
				#if AC_USE_CASINOS
					}
				#endif
			}
			ACInfo[playerid][acMoney] = ac_t;
		}
	}
	ACInfo[playerid][acCheatCount][1] = ACInfo[playerid][acCheatCount][2] = 0;
	if(ACInfo[playerid][acCheatCount][16] > 0) ACInfo[playerid][acCheatCount][16]--;
	if(ACInfo[playerid][acCheatCount][20] > 0) ACInfo[playerid][acCheatCount][20]--;
	ACInfo[playerid][acTimerTick] = ac_gtc;
	#if defined SetPlayerTimerEx_
		ACInfo[playerid][acTimerID] = SetPlayerTimerEx_(playerid, "ac_Timer", 0, 1000, 1, "i", playerid);
	#else
		ACInfo[playerid][acTimerID] = SetTimerEx("ac_Timer", 1000, false, "i", playerid);
	#endif
	return 1;
}

//Don't make changes in this public
//To customize the punishments, declare 'OnCheatDetected' in your script
ac_fpublic ac_OnCheatDetected(playerid, ip_address[], type, code)
{
	if(type)
	{
		#if defined BlockIpAddress
			BlockIpAddress(ip_address, 0);
		#else
			new ac_strtmp[32];
			format(ac_strtmp, sizeof ac_strtmp, "banip %s", ip_address);
			SendRconCommand(ac_strtmp);
		#endif
	}
	else
	{
		switch(code)
		{
			case 40: SendClientMessage(playerid, AC_DEFAULT_COLOR, MAX_CONNECTS_MSG);
			case 41: SendClientMessage(playerid, AC_DEFAULT_COLOR, UNKNOWN_CLIENT_MSG);
			default:
			{
				static ac_strtmp[sizeof KICK_MSG];
				format(ac_strtmp, sizeof ac_strtmp, KICK_MSG, code);
				SendClientMessage(playerid, AC_DEFAULT_COLOR, ac_strtmp);
				#undef AC_DEFAULT_COLOR
			}
		}
		AntiCheatKickWithDesync(playerid, code);
	}
	return 1;
}

ac_fpublic ac_KickTimer(playerid) return Kick(playerid);

#undef ac_fpublic

stock AntiCheatGetHealth(playerid, &Float:health)
{
	if(!IsPlayerConnected(playerid)) return 0;
	health = ACInfo[playerid][acHealth];
	return 1;
}

stock AntiCheatGetArmour(playerid, &Float:armour)
{
	if(!IsPlayerConnected(playerid)) return 0;
	armour = ACInfo[playerid][acArmour];
	return 1;
}

stock AntiCheatGetVehicleHealth(vehicleid, &Float:health)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	health = ACVehInfo[vehicleid][acHealth];
	return 1;
}

stock AntiCheatGetWeaponData(playerid, slot, &weapons, &ammo)
{
	if(!IsPlayerConnected(playerid)) return 0;
	weapons = ACInfo[playerid][acWeapon][slot];
	ammo = ACInfo[playerid][acAmmo][slot];
	return 1;
}

stock AntiCheatGetSpawnPos(playerid, &Float:x, &Float:y, &Float:z)
{
	if(!IsPlayerConnected(playerid)) return 0;
	x = ACInfo[playerid][acSpawnPosX];
	y = ACInfo[playerid][acSpawnPosY];
	z = ACInfo[playerid][acSpawnPosZ];
	return 1;
}

stock AntiCheatGetSpawnWeapon(playerid, &weapon1, &weapon1_ammo, &weapon2, &weapon2_ammo, &weapon3, &weapon3_ammo)
{
	if(!IsPlayerConnected(playerid)) return 0;
	weapon1 = ACInfo[playerid][acSpawnWeapon1];
	weapon1_ammo = ACInfo[playerid][acSpawnAmmo1];
	weapon2 = ACInfo[playerid][acSpawnWeapon2];
	weapon2_ammo = ACInfo[playerid][acSpawnAmmo2];
	weapon3 = ACInfo[playerid][acSpawnWeapon3];
	weapon3_ammo = ACInfo[playerid][acSpawnAmmo3];
	return 1;
}

stock AntiCheatGetPos(playerid, &Float:x, &Float:y, &Float:z)
{
	if(!IsPlayerConnected(playerid)) return 0;
	x = ACInfo[playerid][acPosX];
	y = ACInfo[playerid][acPosY];
	z = ACInfo[playerid][acPosZ];
	return 1;
}

stock AntiCheatGetVehicleVelocity(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	x = ACVehInfo[vehicleid][acVelX];
	y = ACVehInfo[vehicleid][acVelY];
	z = ACVehInfo[vehicleid][acVelZ];
	return 1;
}

stock AntiCheatGetVehiclePos(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	x = ACVehInfo[vehicleid][acPosX];
	y = ACVehInfo[vehicleid][acPosY];
	z = ACVehInfo[vehicleid][acPosZ];
	return 1;
}

stock AntiCheatGetVehicleZAngle(vehicleid, &Float:z_angle)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	z_angle = ACVehInfo[vehicleid][acZAngle];
	return 1;
}

stock AntiCheatGetVehicleSpawnPos(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	x = ACVehInfo[vehicleid][acSpawnPosX];
	y = ACVehInfo[vehicleid][acSpawnPosY];
	z = ACVehInfo[vehicleid][acSpawnPosZ];
	return 1;
}

stock AntiCheatGetVehicleSpawnZAngle(vehicleid, &Float:z_angle)
{
	if(GetVehicleModel(vehicleid) <= 0) return 0;
	z_angle = ACVehInfo[vehicleid][acSpawnZAngle];
	return 1;
}

static ac_IsAnAircraft(modelid) return (417 <= modelid <= 593 && 1 <= ac_vType[modelid - 400] <= 2);

static ac_IsABoat(modelid) return (430 <= modelid <= 595 && ac_vType[modelid - 400] == 3);

static ac_IsABicycle(modelid) return (481 <= modelid <= 510 && ac_vType[modelid - 400] == 4);

static ac_IsABike(modelid) return (448 <= modelid <= 586 && 4 <= ac_vType[modelid - 400] <= 5);

#if defined VectorSize
	static ac_GetSpeed(Float:ac_x, Float:ac_y, Float:ac_z = 0.0) return floatround(VectorSize(ac_x, ac_y, ac_z) * 179.28625);
#else
	static ac_GetSpeed(Float:ac_x, Float:ac_y, Float:ac_z = 0.0) return floatround(floatsqroot(floatpower(ac_x, 2.0) + floatpower(ac_y, 2.0) + floatpower(ac_z, 2.0)) * 179.28625);
#endif

static ac_IsVehicleSeatOccupied(vehicleid, seat)
{
	#if defined foreach
		foreach(new ac_i : Player)
		{
			if(ACInfo[ac_i][acVeh] == vehicleid && ACInfo[ac_i][acSeat] == seat) return 1;
		}
	#else
		#if defined GetPlayerPoolSize
			for(new ac_i = GetPlayerPoolSize(); ac_i >= 0; --ac_i)
		#else
			for(new ac_i = MAX_PLAYERS - 1; ac_i >= 0; --ac_i)
		#endif
		{
			if(IsPlayerInVehicle(ac_i, vehicleid) && ACInfo[ac_i][acSeat] == seat) return 1;
		}
	#endif
	return 0;
}

#if AC_USE_RESTAURANTS
	static ac_InRestaurant(playerid, interiorid)
	{
		new ac_i;
		switch(interiorid)
		{
			case 5: ac_i = 0;
			case 9: ac_i = 1;
			case 10: ac_i = 2;
			default: return 0;
		}
		return IsPlayerInRangeOfPoint(playerid, 3.0, ac_Restaurants[ac_i][0], ac_Restaurants[ac_i][1], ac_Restaurants[ac_i][2]);
	}
#endif
#undef AC_USE_RESTAURANTS

#if AC_USE_AMMUNATIONS
	static ac_InAmmuNation(playerid, interiorid)
	{
		new ac_i, ac_s;
		switch(interiorid)
		{
			case 1: ac_i = 0, ac_s = -1;
			case 4: ac_i = 1, ac_s = 0;
			case 6: ac_i = 3, ac_s = 1;
			default: return 0;
		}
		for(; ac_i > ac_s; --ac_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, ac_AmmuNations[ac_i][0],
			ac_AmmuNations[ac_i][1], ac_AmmuNations[ac_i][2])) return 1;
		}
		return 0;
	}
#endif
#undef AC_USE_AMMUNATIONS

#if AC_USE_PAYNSPRAY
	static ac_InPayNSpray(playerid, interiorid)
	{
		if(interiorid == 0)
		{
			for(new ac_i = sizeof(ac_PayNSpray) - 1; ac_i >= 0; --ac_i)
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.5, ac_PayNSpray[ac_i][0], ac_PayNSpray[ac_i][1], ac_PayNSpray[ac_i][2])) return 1;
			}
		}
		return 0;
	}
#endif
#undef AC_USE_PAYNSPRAY

#if AC_USE_VENDING_MACHINES
	static ac_NearVendingMachine(playerid, interiorid)
	{
		new ac_i, ac_s;
		switch(interiorid)
		{
			case 0: ac_i = 44, ac_s = -1;
			case 1: ac_i = 51, ac_s = 44;
			case 2: ac_i = 52, ac_s = 51;
			case 3: ac_i = 58, ac_s = 52;
			case 6: ac_i = 60, ac_s = 58;
			case 7: ac_i = 61, ac_s = 60;
			case 15: ac_i = 62, ac_s = 61;
			case 16: ac_i = 65, ac_s = 62;
			case 17: ac_i = 72, ac_s = 65;
			case 18: ac_i = 74, ac_s = 72;
			default: return 0;
		}
		for(; ac_i > ac_s; --ac_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.5, ac_vMachines[ac_i][0], ac_vMachines[ac_i][1], ac_vMachines[ac_i][2])) return 1;
		}
		return 0;
	}
#endif
#undef AC_USE_VENDING_MACHINES

#if AC_USE_CASINOS
	static ac_InCasino(playerid, interiorid)
	{
		new ac_i, ac_s;
		switch(interiorid)
		{
			case 1: ac_i = 41, ac_s = -1;
			case 10: ac_i = 61, ac_s = 41;
			case 12: ac_i = 70, ac_s = 61;
			default: return 0;
		}
		for(; ac_i > ac_s; --ac_i)
		{
			if(IsPlayerInRangeOfPoint(playerid, ac_Casinos[ac_i][3], ac_Casinos[ac_i][0],
			ac_Casinos[ac_i][1], ac_Casinos[ac_i][2])) return 1;
		}
		return 0;
	}
#endif
#undef AC_USE_CASINOS

static ac_IsCompatible(modelid, componentid)
{
	if(400 <= modelid <= 611)
	{
		switch(componentid)
		{
			case 1000..1191:
			{
				componentid -= 1000;
				if(ac_vMods[(modelid - 400) * 6 + (componentid >>> 5)] & 1 << (componentid & 0b00011111)) return 1;
			}
			case 1192, 1193:
			{
				if(modelid == 576) return 1;
			}
		}
	}
	return 0;
}

static ac_GetMaxPassengers(modelid)
{
	if(400 <= modelid <= 611)
	{
		modelid -= 400;
		return ((ac_MaxPassengers[modelid >>> 3] >>> ((modelid & 7) << 2)) & 0xF);
	}
	return 0xF;
}

static ac_IpToInt(const ip[])
{
	new ac_bytes[1], ac_pos;
	ac_bytes{0} = strval(ip[ac_pos]);
	while(ac_pos < 15 && ip[ac_pos++] != '.'){}
	ac_bytes{1} = strval(ip[ac_pos]);
	while(ac_pos < 15 && ip[ac_pos++] != '.'){}
	ac_bytes{2} = strval(ip[ac_pos]);
	while(ac_pos < 15 && ip[ac_pos++] != '.'){}
	ac_bytes{3} = strval(ip[ac_pos]);
	return ac_bytes[0];
}

static ac_FloodDetect(playerid, publicid)
{
	if(ACInfo[playerid][acKicked] < 1)
	{
		if(++ACInfo[playerid][acFloodCount][publicid] > ac_Mtfc[publicid][1])
		{
			#if defined DEBUG
				printf(DEBUG_CODE_1, playerid, ac_Mtfc[publicid][1], publicid);
				#if !defined mysql_included
					#undef DEBUG
				#endif
			#endif
			#if defined OnCheatDetected
				ac_KickWithCode(playerid, "", 0, 49, publicid);
				ACInfo[playerid][acFloodCount][publicid] = ACInfo[playerid][acFloodCount][27] = 0;
			#else
				return ac_KickWithCode(playerid, "", 0, 49, publicid);
			#endif
		}
		#if defined OnFloodWarning
			else OnFloodWarning(playerid, publicid, ACInfo[playerid][acFloodCount][publicid]);
		#endif
		ACInfo[playerid][acCall][publicid] = ACInfo[playerid][acCall][27] = GetTickCount();
	}
	return 0;
}

static ac_KickWithCode(playerid, ip_address[], type, code, code2 = 0)
{
	if(type == 0 && (!IsPlayerConnected(playerid) || ACInfo[playerid][acKicked] > 0)) return 0;
	ac_sInfo[5]++;
	switch(code)
	{
		case 0..35, 37, 39, 51: ac_sInfo[0]++;
		case 36, 38, 40, 41, 50: ac_sInfo[4]++;
		case 42: ac_sInfo[1]++;
		case 47..49: ac_sInfo[3]++;
		case 43..46: ac_sInfo[2]++;
	}
	#if defined NO_SUSPICION_LOGS
		#pragma unused code2
	#else
		new ac_strtmp[6];
		if(code2) format(ac_strtmp, sizeof ac_strtmp, " (%d)", code2);
		//if(type) printf(SUSPICION_2, ip_address, code, ac_strtmp);
		//else printf(SUSPICION_1, playerid, code, ac_strtmp);
	#endif
	#if defined OnCheatDetected
		OnCheatDetected(playerid, ip_address, type, code);
	#else
		ac_OnCheatDetected(playerid, ip_address, type, code);
	#endif
	return 0;
}

static ac_LoadCfg()
{
	static ac_strtmp[10];
	new ac_i, ac_string[415], File:ac_cfgFile;
	if(fexist(AC_CONFIG_FILE))
	{
		if((ac_cfgFile = fopen(AC_CONFIG_FILE, io_read)))
		{
			#if defined sscanf
				new ac_j;
			#endif
			while(fread(ac_cfgFile, ac_string) > 0)
			{
				#if defined sscanf
					sscanf(ac_string, "i'//'i", ac_j, ac_i);
					ac_ACAllow[ac_i] = !!ac_j;
				#else
					if((ac_i = strfind(ac_string, "//")) != -1)
					{
						strmid(ac_strtmp, ac_string, ac_i + 2, strlen(ac_string));
						if(0 <= (ac_i = strval(ac_strtmp)) < sizeof ac_ACAllow) ac_ACAllow[ac_i] = !!strval(ac_string);
					}
				#endif
			}
			fclose(ac_cfgFile);
		}
		else return 0;
	}
	else if((ac_cfgFile = fopen(AC_CONFIG_FILE, io_write)))
	{
		#undef AC_CONFIG_FILE
		for(; ac_i < sizeof ac_ACAllow; ++ac_i)
		{
			format(ac_strtmp, sizeof ac_strtmp, "%d //%d\r\n", ac_ACAllow[ac_i], ac_i);
			strcat(ac_string, ac_strtmp);
		}
		fwrite(ac_cfgFile, ac_string);
		fclose(ac_cfgFile);
	}
	else return 0;
	return 1;
}

#endif



/*
06.12.2017
*/
#define AC_PARAMS_ENGINE			(0)                                         // ���������
#define AC_PARAMS_LIGHTS			(1)                                         // ����
#define AC_PARAMS_ALARM				(2)                                         // ������������
#define AC_PARAMS_DOORS				(3)                                         // �����
#define AC_PARAMS_BONNET			(4)                                         // �����
#define AC_PARAMS_BOOT				(5)                                         // ��������
#define AC_PARAMS_OBJECTIVE			(6)                                         // ������� ��� �����������

#define AC_STATE_ONFOOT				(0)											// �������
#define AC_STATE_DRIVER				(1)											// ��������
#define AC_STATE_PASSENGER			(2)											// ��������

#define AC_STATUS_PANEL             (0)                                         // ������
#define AC_STATUS_DOOR              (1)                                         // �����
#define AC_STATUS_LIGHT             (2)                                         // ����
#define AC_STATUS_TIRE              (3)                                         // ������

// ��� ��� �������� � ������ ������������ ����� �����.
stock AC_GivePlayerMoney(playerid, money) return CallRemoteFunction("AC_GivePlayerMoney", "dd", playerid, money);
#if defined _ALS_GivePlayerMoney
    #undef GivePlayerMoney
#else
    #define _ALS_GivePlayerMoney
#endif
#define GivePlayerMoney AC_GivePlayerMoney

// ������������� ������ ������������ ���� �����.
stock AC_SetPlayerMoney(playerid, money) return CallRemoteFunction("AC_SetPlayerMoney", "dd", playerid, money);

// �������� � ������ ��� ������.
stock AC_ResetPlayerMoney(playerid) return CallRemoteFunction("AC_ResetPlayerMoney", "d", playerid);
#if defined _ALS_ResetPlayerMoney
    #undef ResetPlayerMoney
#else
    #define _ALS_ResetPlayerMoney
#endif
#define ResetPlayerMoney AC_ResetPlayerMoney

// ��������� ������ ���������� ����� ������.
stock AC_GetPlayerMoney(playerid) return CallRemoteFunction("AC_GetPlayerMoney", "d", playerid);
#if defined _ALS_GetPlayerMoney
    #undef GetPlayerMoney
#else
    #define _ALS_GetPlayerMoney
#endif
#define GetPlayerMoney AC_GetPlayerMoney

// ������������� ������� �������� ������.
stock AC_SetPlayerHealth(playerid, Float:health) return CallRemoteFunction("AC_SetPlayerHealth", "df", playerid, health);
#if defined _ALS_SetPlayerHealth
    #undef SetPlayerHealth
#else
    #define _ALS_SetPlayerHealth
#endif
#define SetPlayerHealth AC_SetPlayerHealth

// ������������� ������� ����� ������.
stock AC_SetPlayerArmour(playerid, Float:armour) return CallRemoteFunction("AC_SetPlayerArmour", "df", playerid, armour);
#if defined _ALS_SetPlayerArmour
    #undef SetPlayerArmour
#else
    #define _ALS_SetPlayerArmour
#endif
#define SetPlayerArmour AC_SetPlayerArmour

// ����������� ������ � ����� Spectating.
stock AC_TogglePlayerSpectating(playerid, toggle) return CallRemoteFunction("AC_TogglePlayerSpectating", "dd", playerid, toggle);
#if defined _ALS_TogglePlayerSpectating
    #undef TogglePlayerSpectating
#else
    #define _ALS_TogglePlayerSpectating
#endif
#define TogglePlayerSpectating AC_TogglePlayerSpectating

// ������������ ������.
stock AC_TogglePlayerControllable(playerid, toggle) return CallRemoteFunction("AC_TogglePlayerControllable", "dd", playerid, toggle);
#if defined _ALS_TogglePlayerControllable
    #undef TogglePlayerControllable
#else
    #define _ALS_TogglePlayerControllable
#endif
#define TogglePlayerControllable AC_TogglePlayerControllable

// ������������� �������� ������.
stock AC_SetPlayerInterior(playerid, interiorid) return CallRemoteFunction("AC_SetPlayerInterior", "dd", playerid, interiorid);
#if defined _ALS_SetPlayerInterior
    #undef SetPlayerInterior
#else
    #define _ALS_SetPlayerInterior
#endif
#define SetPlayerInterior AC_SetPlayerInterior

// ������ � ����� ��������� �����.
stock AC_GetPlayerInterior(playerid) return CallRemoteFunction("AC_GetPlayerInterior", "d", playerid);
#if defined _ALS_GetPlayerInterior
    #undef GetPlayerInterior
#else
    #define _ALS_GetPlayerInterior
#endif
#define GetPlayerInterior AC_GetPlayerInterior

// ���������� �������� ������
stock AC_SetPlayerSpecialAction(playerid, actionid) return CallRemoteFunction("AC_SetPlayerSpecialAction", "dd", playerid, actionid);
#if defined _ALS_SetPlayerSpecialAction
    #undef SetPlayerSpecialAction
#else
    #define _ALS_SetPlayerSpecialAction
#endif
#define SetPlayerSpecialAction AC_SetPlayerSpecialAction

// ������ ������ � ������������ ��������.
stock AC_PutPlayerInVehicle(playerid, vehicleid, seatid) return CallRemoteFunction("AC_PutPlayerInVehicle", "ddd", playerid, vehicleid, seatid);
#if defined _ALS_PutPlayerInVehicle
    #undef PutPlayerInVehicle
#else
    #define _ALS_PutPlayerInVehicle
#endif
#define PutPlayerInVehicle AC_PutPlayerInVehicle

// ����������� ������ �� ����������.
stock AC_RemovePlayerFromVehicle(playerid) return CallRemoteFunction("AC_RemovePlayerFromVehicle", "d", playerid);
#if defined _ALS_RemovePlayerFromVehicle
    #undef RemovePlayerFromVehicle
#else
    #define _ALS_RemovePlayerFromVehicle
#endif
#define RemovePlayerFromVehicle AC_RemovePlayerFromVehicle

// ��� ���������� ������ � ���������� ���-�� �������� ������.
stock AC_GivePlayerWeapon(playerid, weaponid, ammo) return CallRemoteFunction("AC_GivePlayerWeapon", "ddd", playerid, weaponid, ammo);
#if defined _ALS_GivePlayerWeapon
    #undef GivePlayerWeapon
#else
    #define _ALS_GivePlayerWeapon
#endif
#define GivePlayerWeapon AC_GivePlayerWeapon

// ������������� ���-�� �������� ��� ���������� ������.
stock AC_SetPlayerAmmo(playerid, weaponslot, ammo) return CallRemoteFunction("AC_SetPlayerAmmo", "ddd", playerid, weaponslot, ammo);
#if defined _ALS_SetPlayerAmmo
    #undef SetPlayerAmmo
#else
    #define _ALS_SetPlayerAmmo
#endif
#define SetPlayerAmmo AC_SetPlayerAmmo

// �������� �� ������ � ������.
stock AC_ResetPlayerWeapons(playerid) return CallRemoteFunction("AC_ResetPlayerWeapons", "d", playerid);
#if defined _ALS_ResetPlayerWeapons
    #undef ResetPlayerWeapons
#else
    #define _ALS_ResetPlayerWeapons
#endif
#define ResetPlayerWeapons AC_ResetPlayerWeapons

// �������� ������������ ������ � ������.
stock AC_RemovePlayerWeapon(playerid, weaponid) return CallRemoteFunction("AC_RemovePlayerWeapon", "dd", playerid, weaponid);

// ������ ����� ������� ����� ���������� �� � ����������.
stock AC_GetPlayerAfk(playerid) return CallRemoteFunction("AC_GetPlayerAfk", "d", playerid);

// ��������� ��������� ����� ��� ���.
stock AC_GetPlayerSpawn(playerid) return CallRemoteFunction("AC_GetPlayerSpawn", "d", playerid);

// ��� ������� �������� ������� ������� ������.
stock AC_SetPlayerPos(playerid, Float:x, Float:y, Float:z) return CallRemoteFunction("AC_SetPlayerPos", "dddd", playerid, x, y, z);
#if defined _ALS_SetPlayerPos
    #undef SetPlayerPos
#else
    #define _ALS_SetPlayerPos
#endif
#define SetPlayerPos AC_SetPlayerPos

// ������ ������� ����������.
stock AC_SetVehiclePos(vehicleid, Float:x, Float:y, Float:z) return CallRemoteFunction("AC_SetVehiclePos", "dddd", vehicleid, x, y, z);
#if defined _ALS_SetVehiclePos
    #undef SetVehiclePos
#else
    #define _ALS_SetVehiclePos
#endif
#define SetVehiclePos AC_SetVehiclePos

// ������������� ��������� ������
stock AC_SetVehicleParamsEx(vehicleid, engines, lightss, alarms, doorss, bonnets, boots, objectives) return CallRemoteFunction("AC_SetVehicleParamsEx", "dddddddd", vehicleid, engines, lightss, alarms, doorss, bonnets, boots, objectives);
#if defined _ALS_SetVehicleParamsEx
    #undef SetVehicleParamsEx
#else
    #define _ALS_SetVehicleParamsEx
#endif
#define SetVehicleParamsEx AC_SetVehicleParamsEx

// ������ ��������� ������������� ��������
stock AC_GetVehicleParamsEx(vehicleid, &engines, &lightss, &alarms, &doorss, &bonnets, &boots, &objectives) {
    CallRemoteFunction("AC_GetVehicleParamsEx", "d", vehicleid);
    engines = GetGVarInt("VehicleParamsEx0", vehicleid);
    lightss = GetGVarInt("VehicleParamsEx1", vehicleid);
    alarms = GetGVarInt("VehicleParamsEx2", vehicleid);
    doorss = GetGVarInt("VehicleParamsEx3", vehicleid);
    bonnets = GetGVarInt("VehicleParamsEx4", vehicleid);
    boots = GetGVarInt("VehicleParamsEx5", vehicleid);
    objectives = GetGVarInt("VehicleParamsEx6", vehicleid);
}
#if defined _ALS_GetVehicleParamsEx
    #undef GetVehicleParamsEx
#else
    #define _ALS_GetVehicleParamsEx
#endif
#define GetVehicleParamsEx AC_GetVehicleParamsEx

// ������ ��������� ������������� ��������� � ����������.
stock AC_GetVehicleParams(vehicleid, params) return CallRemoteFunction("AC_GetVehicleParams","dd", vehicleid, params);

// �������� ��������� ������������� ��������� ����������.
stock AC_SetVehicleParams(vehicleid, params, status) return CallRemoteFunction("AC_SetVehicleParams", "ddd", vehicleid, params, status);

// ����������� ��������� ������������� ��������� ����������.
stock AC_ToggleVehicleParams(vehicleid, params) return CallRemoteFunction("AC_ToggleVehicleParams", "dd", vehicleid, params);

// ������ ������� ����������.
stock AC_SetVehicleZAngle(vehicleid, Float:a) return CallRemoteFunction("AC_SetVehicleZAngle", "df", vehicleid, a);
#if defined _ALS_SetVehicleZAngle
    #undef SetVehicleZAngle
#else
    #define _ALS_SetVehicleZAngle
#endif
#define SetVehicleZAngle AC_SetVehicleZAngle

// ������� ������������ ��������.
stock AC_CreateVehicle(modelid, Float:x, Float:y, Float:z, Float:a, color1, color2, respawn_delay, addsiren=0) return CallRemoteFunction("AC_CreateVehicle", "dffffdddd", modelid, x, y, z, a, color1, color2, respawn_delay, addsiren);
#if defined _ALS_CreateVehicle
    #undef CreateVehicle
#else
    #define _ALS_CreateVehicle
#endif
#define CreateVehicle AC_CreateVehicle

// ��������� ��������� ���������, ��� �������� ������� ��� ��������.
stock AC_AddStaticVehicle(modelid, Float:x, Float:y, Float:z, Float:a, color1, color2) return CallRemoteFunction("AC_AddStaticVehicle", "dffffdd", modelid, x, y, z, a, color1, color2);
#if defined _ALS_AddStaticVehicle
    #undef AddStaticVehicle
#else
    #define _ALS_AddStaticVehicle
#endif
#define AddStaticVehicle AC_AddStaticVehicle

// ��������� ��������� ���������, � ��������� ������� ��� ��������.
stock AC_AddStaticVehicleEx(modelid, Float:x, Float:y, Float:z, Float:a, color1, color2, respawn_delay, addsiren=0) return CallRemoteFunction("AC_AddStaticVehicleEx", "dffffddd", modelid, x, y, z, a, color1, color2, respawn_delay, addsiren);
#if defined _ALS_AddStaticVehicleEx
    #undef AddStaticVehicleEx
#else
    #define _ALS_AddStaticVehicleEx
#endif
#define AddStaticVehicleEx AC_AddStaticVehicleEx

// ���������� ����� ��������� ���������.
stock AC_DestroyVehicle(vehicleid) return CallRemoteFunction("AC_DestroyVehicle", "d", vehicleid);
#if defined _ALS_DestroyVehicle
    #undef DestroyVehicle
#else
    #define _ALS_DestroyVehicle
#endif
#define DestroyVehicle AC_DestroyVehicle

// ������������� ������������ �������� ������� �� �� �������, ��� ��� ���� �������.
stock AC_SetVehicleToRespawn(vehicleid) return CallRemoteFunction("AC_SetVehicleToRespawn", "d", vehicleid);
#if defined _ALS_SetVehicleToRespawn
    #undef SetVehicleToRespawn
#else
    #define _ALS_SetVehicleToRespawn
#endif
#define SetVehicleToRespawn AC_SetVehicleToRespawn

// ������������� ���������� ��������.
stock AC_SetVehicleInterior(vehicleid, interiorid) return CallRemoteFunction("AC_SetVehicleInterior", "dd", vehicleid, interiorid);
#if defined _ALS_SetVehicleInterior
    #undef SetVehicleInterior
#else
    #define _ALS_SetVehicleInterior
#endif
#define SetVehicleInterior AC_SetVehicleInterior

// ������ �������� ����������.
stock AC_GetVehicleInterior(vehicleid) return CallRemoteFunction("AC_GetVehicleInterior", "d", vehicleid);

// ��������� ��������� �������� ��� ������.
stock AC_ApplyAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync=0) return CallRemoteFunction("AC_ApplyAnimation", "dssfdddddd", playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
#if defined _ALS_ApplyAnimation
    #undef ApplyAnimation
#else
    #define _ALS_ApplyAnimation
#endif
#define ApplyAnimation AC_ApplyAnimation

// ������ ������� ������ ������.
stock Float:AC_GetPlayerHealth(playerid, &Float:health = 0.0) {
    CallRemoteFunction("AC_GetPlayerHealth", "d", playerid);
	return (health = GetGVarFloat("PlayerHealth", playerid));
}
#if defined _ALS_GetPlayerHealth
    #undef GetPlayerHealth
#else
    #define _ALS_GetPlayerHealth
#endif
#define GetPlayerHealth AC_GetPlayerHealth

// ������ ������� ����� ������.
stock Float:AC_GetPlayerArmour(playerid, &Float:armour = 0.0) {
    CallRemoteFunction("AC_GetPlayerArmour", "d", playerid);
    return (armour = GetGVarFloat("PlayerArmour", playerid));
}
#if defined _ALS_GetPlayerArmour
    #undef GetPlayerArmour
#else
    #define _ALS_GetPlayerArmour
#endif
#define GetPlayerArmour AC_GetPlayerArmour

// ������ ������� ������ � ����.
stock AC_GetPlayerPos(playerid, &Float:x, &Float:y, &Float:z) {
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) {
		GetPlayerPos(playerid, x, y, z);
	} else {
		CallRemoteFunction("AC_GetPlayerPos", "d", playerid);
		x = GetGVarFloat("PlayerPos0", playerid);
		y = GetGVarFloat("PlayerPos1", playerid);
		z = GetGVarFloat("PlayerPos2", playerid);
	}
}
#if defined _ALS_GetPlayerPos
    #undef GetPlayerPos
#else
    #define _ALS_GetPlayerPos
#endif
#define GetPlayerPos AC_GetPlayerPos

// ���������� �������� ������������� ��������.
stock AC_SetVehicleHealth(vehicleid, Float:health) return CallRemoteFunction("AC_SetVehicleHealth", "df", vehicleid, health);
#if defined _ALS_SetVehicleHealth
    #undef SetVehicleHealth
#else
    #define _ALS_SetVehicleHealth
#endif
#define SetVehicleHealth AC_SetVehicleHealth

// ������ ����������� ������������� ��������. (�����, �������, ��������, ������ � ����������� ��������)
stock AC_RepairVehicle(vehicleid) return CallRemoteFunction("AC_RepairVehicle", "d", vehicleid);
#if defined _ALS_RepairVehicle
    #undef RepairVehicle
#else
    #define _ALS_RepairVehicle
#endif
#define RepairVehicle AC_RepairVehicle

// �������� ��������� � ��������� ���� ��� ���������� ����������.
stock AC_ChangeVehicleColor(vehicleid, color1, color2) return CallRemoteFunction("AC_ChangeVehicleColor", "ddd", vehicleid, color1, color2);
#if defined _ALS_ChangeVehicleColor
    #undef ChangeVehicleColor
#else
    #define _ALS_ChangeVehicleColor
#endif
#define ChangeVehicleColor AC_ChangeVehicleColor

// ������ ���� ����������.
stock AC_GetVehicleColor(vehicleid, &color1, &color2) {
    CallRemoteFunction("AC_GetVehicleColor", "d", vehicleid);
    color1 = GetGVarInt("VehicleColor0", vehicleid);
    color2 = GetGVarInt("VehicleColor1", vehicleid);
}

// ������ �������� ������.
stock Float:AC_GetVehicleHealth(vehicleid, &Float:health = 0.0) {
    CallRemoteFunction("AC_GetVehicleHealth", "d", vehicleid);
	return (health = GetGVarFloat("VehicleHealth", vehicleid));
}
#if defined _ALS_GetVehicleHealth
    #undef GetVehicleHealth
#else
    #define _ALS_GetVehicleHealth
#endif
#define GetVehicleHealth AC_GetVehicleHealth

// ������ ������� ����������.
stock AC_GetVehiclePos(vehicleid, &Float:x, &Float:y, &Float:z) {
    CallRemoteFunction("AC_GetVehiclePos", "d", vehicleid);
    x = GetGVarFloat("VehiclePos0", vehicleid);
    y = GetGVarFloat("VehiclePos1", vehicleid);
    z = GetGVarFloat("VehiclePos2", vehicleid);
}
#if defined _ALS_GetVehiclePos
    #undef GetVehiclePos
#else
    #define _ALS_GetVehiclePos
#endif
#define GetVehiclePos AC_GetVehiclePos

// ������ ���� �������� ����������.
stock Float:AC_GetVehicleZAngle(vehicleid, &Float:z_angle = 0.0) {
	CallRemoteFunction("AC_GetVehicleZAngle", "d", vehicleid);
	return (z_angle = GetGVarFloat("VehicleZAngle", vehicleid));
}
#if defined _ALS_GetVehicleZAngle
    #undef GetVehicleZAngle
#else
    #define _ALS_GetVehicleZAngle
#endif
#define GetVehicleZAngle AC_GetVehicleZAngle

// �������� ID ������ � ������ ����������� � ��������� �����.
stock AC_GetPlayerWeaponData(playerid, slot, &weapons, &ammo) {
	CallRemoteFunction("AC_GetPlayerWeaponData", "dd", playerid, slot);
	weapons = GetGVarInt("PlayerWeaponData0", playerid);
	ammo = GetGVarInt("PlayerWeaponData1", playerid);
}
#if defined _ALS_GetPlayerWeaponData
    #undef GetPlayerWeaponData
#else
    #define _ALS_GetPlayerWeaponData
#endif
#define GetPlayerWeaponData AC_GetPlayerWeaponData

// ������������� ���������� ���������.
stock AC_AddVehicleComponent(vehicleid, componentid) return CallRemoteFunction("AC_AddVehicleComponent", "dd", vehicleid, componentid);
#if defined _ALS_AddVehicleComponent
    #undef AddVehicleComponent
#else
    #define _ALS_AddVehicleComponent
#endif
#define AddVehicleComponent AC_AddVehicleComponent

// ������� ������ ��������� � ������������� ��������.
stock AC_RemoveVehicleComponent(vehicleid, componentid) return CallRemoteFunction("AC_RemoveVehicleComponent", "dd", vehicleid, componentid);
#if defined _ALS_RemoveVehicleComponent
    #undef RemoveVehicleComponent
#else
    #define _ALS_RemoveVehicleComponent
#endif
#define RemoveVehicleComponent AC_RemoveVehicleComponent

// �������� ID �������������� ���������� �� ������������� �������� � ������������ ����.
stock AC_GetVehicleComponentInSlot(vehicleid, slot) return CallRemoteFunction("AC_GetVehicleComponentInSlot", "dd", vehicleid, slot);
#if defined _ALS_GetVehicleComponentInSlot
    #undef GetVehicleComponentInSlot
#else
    #define _ALS_GetVehicleComponentInSlot
#endif
#define GetVehicleComponentInSlot AC_GetVehicleComponentInSlot

// ������������ ��� ��������� ����������� ����������.
stock AC_SetVehicleDamageStatus(vehicleid, panels, doorss, lightss, tires) return CallRemoteFunction("AC_SetVehicleDamageStatus", "ddddd", vehicleid, panels, doorss, lightss, tires);
#if defined _ALS_UpdateVehicleDamageStatus
    #undef UpdateVehicleDamageStatus
#else
    #define _ALS_UpdateVehicleDamageStatus
#endif
#define UpdateVehicleDamageStatus AC_SetVehicleDamageStatus

// ������ �� ������� ��������� ���������.
stock AC_GetVehicleDamage(vehicleid, status) return CallRemoteFunction("AC_GetVehicleDamage", "dd", vehicleid, status);

// ���������� ����������� ��� ����������
stock AC_SetVehicleDamage(vehicleid, status, value) return CallRemoteFunction("AC_SetVehicleDamage", "ddd", vehicleid, status, value);

// ������ �� ������� ��������� ���������.
stock AC_GetVehicleDamageStatus(vehicleid, &panels, &doorss, &lightss, &tires) {
	CallRemoteFunction("AC_GetVehicleDamageStatus", "d", vehicleid);
	panels = GetGVarInt("VehicleDamageStatus0", vehicleid);
	doorss = GetGVarInt("VehicleDamageStatus1", vehicleid);
	lightss = GetGVarInt("VehicleDamageStatus2", vehicleid);
	tires = GetGVarInt("VehicleDamageStatus3", vehicleid);
}
#if defined _ALS_GetVehicleDamageStatus
    #undef GetVehicleDamageStatus
#else
    #define _ALS_GetVehicleDamageStatus
#endif
#define GetVehicleDamageStatus AC_GetVehicleDamageStatus

// �������� �����������
stock AC_SetPlayerDetection(playerid, index, value) return CallRemoteFunction("AC_SetPlayerDetection", "ddd", playerid, index, value);

// ������ �����������
stock AC_GetPlayerDetection(playerid, index) return CallRemoteFunction("AC_GetPlayerDetection", "dd", playerid, index);

// ������ ��������� ����� ��� ���
stock AC_GetPlayerControllable(playerid) return CallRemoteFunction("AC_GetPlayerControllable", "d", playerid);

// ������� ������
stock AC_SpawnPlayer(playerid) return CallRemoteFunction("AC_SpawnPlayer", "d", playerid);
#if defined _ALS_SpawnPlayer
    #undef SpawnPlayer
#else
    #define _ALS_SpawnPlayer
#endif
#define SpawnPlayer AC_SpawnPlayer

// ���������� ID ���������� �� ������� ����� �����
stock AC_GetPlayerSurfingVehicleID(playerid) return CallRemoteFunction("AC_GetPlayerSurfingVehicleID", "d", playerid);
#if defined _ALS_GetPlayerSurfingVehicleID
    #undef GetPlayerSurfingVehicleID
#else
    #define _ALS_GetPlayerSurfingVehicleID
#endif
#define GetPlayerSurfingVehicleID AC_GetPlayerSurfingVehicleID

// ���������� ID ������� �� ������� ����� �����
stock AC_GetPlayerSurfingObjectID(playerid) return CallRemoteFunction("AC_GetPlayerSurfingObjectID", "d", playerid);
#if defined _ALS_GetPlayerSurfingObjectID
    #undef GetPlayerSurfingObjectID
#else
    #define _ALS_GetPlayerSurfingObjectID
#endif
#define GetPlayerSurfingObjectID AC_GetPlayerSurfingObjectID

// �������� �������� ����������
stock AC_ChangeVehiclePaintjob(vehicleid, paintjobid) return CallRemoteFunction("AC_ChangeVehiclePaintjob", "dd", vehicleid, paintjobid);
#if defined _ALS_ChangeVehiclePaintjob
    #undef ChangeVehiclePaintjob
#else
    #define _ALS_ChangeVehiclePaintjob
#endif
#define ChangeVehiclePaintjob AC_ChangeVehiclePaintjob

// ������ �������� ����������
stock AC_GetVehiclePaintjob(vehicleid) return CallRemoteFunction("AC_GetVehiclePaintjob", "d", vehicleid);

// OnPlayerConnect
#if defined _ALS_OnPlayerConnect
	#undef OnPlayerConnect
#else
	#define _ALS_OnPlayerConnect
#endif
#define OnPlayerConnect AC_OnPlayerConnect
#if defined AC_OnPlayerConnect
	forward AC_OnPlayerConnect(playerid);
#endif

// OnPlayerDisconnect
#if defined _ALS_OnPlayerDisconnect
	#undef OnPlayerDisconnect
#else
	#define _ALS_OnPlayerDisconnect
#endif
#define OnPlayerDisconnect AC_OnPlayerDisconnect
#if defined AC_OnPlayerDisconnect
	forward AC_OnPlayerDisconnect(playerid, reason);
#endif

// OnPlayerSpawn
#if defined _ALS_OnPlayerSpawn
	#undef OnPlayerSpawn
#else
	#define _ALS_OnPlayerSpawn
#endif
#define OnPlayerSpawn AC_OnPlayerSpawn
#if defined AC_OnPlayerSpawn
    forward AC_OnPlayerSpawn(playerid);
#endif

// OnPlayerDeath
#if defined _ALS_OnPlayerDeath
	#undef OnPlayerDeath
#else
	#define _ALS_OnPlayerDeath
#endif
#define OnPlayerDeath AC_OnPlayerDeath
#if defined AC_OnPlayerDeath
    forward AC_OnPlayerDeath(playerid, killerid, reason);
#endif

forward AC_OnPlayerHealth(playerid, Float:health, Float:c_health);
forward AC_OnPlayerArmour(playerid, Float:armour, Float:c_armour);
forward AC_OnPlayerWeapon(playerid, weaponid, ammo);
forward AC_OnPlayerMoney(playerid, money, c_money);
forward AC_OnPlayerSpeed(playerid, playerstate, Float:speed);
forward AC_OnPlayerWarpCar(playerid, vehicleid, seat);
forward AC_OnPlayerInvisibility(playerid, type);
forward AC_OnPlayerInterior(playerid, interior, c_interior);
forward AC_OnPlayerAction(playerid, actionid);
forward AC_OnPlayerTeleport(playerid, playerstate, Float:distance);
forward AC_OnPlayerFreeze(playerid);
forward AC_OnPlayerFakeKill(playerid);
forward AC_OnPlayerFly(playerid);
forward AC_OnPlayerShooting(playerid, weaponid);
forward AC_OnPlayerEngine(playerid, vehicleid, Float:speed);
forward AC_OnPlayerRvanka(playerid, playerstate);
forward AC_OnPlayerFakeShot(playerid, weaponid);
forward AC_OnPlayerAim(playerid, aimid, weaponid);
forward AC_OnPlayerDamager(playerid, targetid, weaponid);
forward AC_OnPlayerAfkGhost(playerid, weaponid);
forward AC_OnPlayerAirBrk(playerid, playerstate);
forward AC_OnVehicleHealth(vehicleid, driverid, Float:health, Float:c_health);
forward AC_OnVehicleTuning(vehicleid, driverid, componentid);
forward AC_OnPlayerDistanceShooting(playerid, weaponid, Float:distance);
forward AC_OnPlayerParkour(playerid);
forward AC_OnPlayerGodMode(playerid, type);
forward AC_OnPlayerWeaponZoom(playerid, weaponid, Float:zoom);
forward AC_OnPlayerFlood(playerid, type);

/*#define PCHECK_TYPE_AIRBRK				(0)									// Air Break 000 | +
#define PCHECK_TYPE_INTERIOR     			(1)									// ��������	016 | +
#define PCHECK_TYPE_MONEY        			(2)									// ������	017 | +
#define PCHECK_TYPE_HEALTH       			(3)									// �����	018 | +
#define PCHECK_TYPE_ARMOUR       			(4)									// �����	019 | +
#define PCHECK_TYPE_WEAPON       			(5)									// ������	020 | ���� ������� �� 3 ����
#define PCHECK_TYPE_TELEPORT     			(6)									// �������� 001 | +
#define PCHECK_TYPE_FLY          			(7)									// Fly Hack	002 | +
#define PCHECK_TYPE_PULSER       			(8)									// ��������� 021 | +
#define PCHECK_TYPE_ACTION           		(9)									// ��������  022 | +
#define PCHECK_TYPE_DGUN					(10)								// Dgun		003 | +
#define PCHECK_TYPE_FREEZE           		(11)								// ���������	023 | +
#define PCHECK_TYPE_RAPIDFIRE        		(12)								// ������� ��������	004 | +
#define PCHECK_TYPE_UAMMO					(13)								// ����������� ������� 005 | +
#define PCHECK_TYPE_SPEED            		(14)								// �������				006 | +
#define PCHECK_TYPE_WARPCAR          		(15)								// �������� � ����������	007 | +
#define PCHECK_TYPE_ENGINE					(16) 								// �������� ���������		008 | +
#define PCHECK_TYPE_RVANKA           		(17)								// ������					009 | +
#define PCHECK_TYPE_AIM              		(18)								// ���						010 | +
#define PCHECK_TYPE_DAMAGER          		(19)								// �������					011 | +
#define PCHECK_TYPE_DSHOT                   (20)                                // ��������� ��������		012 | +
#define PCHECK_TYPE_GM                      (21)                                // ����������				013 | +
#define PCHECK_TYPE_MOTO                    (22)                                // ���� ������ �� ����		024 | ���� �������
#define PCHECK_TYPE_BUG                     (23)                                // ���������� ��� �����		025 | ���� �������
#define PCHECK_TYPE_ZOOM                    (24)                                // Zoom weapon				026 | +
#define PCHECK_TYPE_CARSHOT                 (25)                                // CarShot ���������		014 | + ���� �������
#define PCHECK_TYPE_FAKEKILL                (26)                                // Fakekill					015 | +*/

public AC_OnPlayerHealth(playerid, Float:health, Float:c_health) {
	SetPlayerHealth(playerid, health); // ���������� �������� ��������, ����� �� �������
	OnCheatDetected(playerid, 18);
	return 1;
}

public AC_OnPlayerArmour(playerid, Float:armour, Float:c_armour) {
	SetPlayerArmour(playerid, armour); // ���������� �������� �����, ����� �� �������
	OnCheatDetected(playerid, 19);
	return 1;
}

public AC_OnPlayerWeapon(playerid, weaponid, ammo) {
	AC_RemovePlayerWeapon(playerid, weaponid);
	OnCheatDetected(playerid, 3);
    return 1;
}

public AC_OnPlayerMoney(playerid, money, c_money) {
	OnCheatDetected(playerid, 17);
    return 1;
}

public AC_OnPlayerSpeed(playerid, playerstate, Float:speed) {
	OnCheatDetected(playerid, 6);
    return 1;
}

public AC_OnPlayerWarpCar(playerid, vehicleid, seat) {
	RemovePlayerFromVehicle(playerid); // ���������� � ����������, ����� �� �������
	OnCheatDetected(playerid, 7);
    return 1;
}

public AC_OnPlayerInvisibility(playerid, type) {
	OnCheatDetected(playerid, 31);
    return 1;
}

public AC_OnPlayerInterior(playerid, interior, c_interior) {
    SetPlayerInterior(playerid, interior);
	OnCheatDetected(playerid, 16);
    return 1;
}

public AC_OnPlayerAction(playerid, actionid) {
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE); // ��������� ����������� ��������, ����� �� �������
	OnCheatDetected(playerid, 22);
    return 1;
}

public AC_OnPlayerTeleport(playerid, playerstate, Float:distance) {
	OnCheatDetected(playerid, 1);
    return 1;
}

public AC_OnPlayerFreeze(playerid) {
    TogglePlayerControllable(playerid, 0); // ������������ ������, ����� �� �������
	OnCheatDetected(playerid, 23);
    return 1;
}

public AC_OnPlayerFakeKill(playerid) {
    OnCheatDetected(playerid, 15);
    return 1;
}

public AC_OnPlayerFly(playerid) {
	OnCheatDetected(playerid, 2);
	return 1;
}

public AC_OnPlayerShooting(playerid, weaponid) {
    OnCheatDetected(playerid, 4);
    return 1;
}

public AC_OnPlayerEngine(playerid, vehicleid, Float:speed) {
    OnCheatDetected(playerid, 8);
	return 1;
}

public AC_OnPlayerRvanka(playerid, playerstate) {
    OnCheatDetected(playerid, 9);
	return 1;
}

public AC_OnPlayerFakeShot(playerid, weaponid) {
    OnCheatDetected(playerid, 15);
    return 1;
}

public AC_OnPlayerAim(playerid, aimid, weaponid) {
    OnCheatDetected(playerid, 10);
    return 1;
}

public AC_OnPlayerDamager(playerid, targetid, weaponid) {
    OnCheatDetected(playerid, 11);
    return 1;
}

public AC_OnPlayerAfkGhost(playerid, weaponid) {
    OnCheatDetected(playerid, 30);
    return 1;
}

public AC_OnPlayerAirBrk(playerid, playerstate) {
    OnCheatDetected(playerid, 0);
    return 1;
}

public AC_OnVehicleHealth(vehicleid, driverid, Float:health, Float:c_health) {
	SetVehicleHealth(vehicleid, health); // ���������� �������� ��, ����� �� �������
	if(driverid != INVALID_PLAYER_ID) {
		OnCheatDetected(playerid, 29);
	}
    return 1;
}

public AC_OnVehicleTuning(vehicleid, driverid, componentid) {
    RemoveVehicleComponent(vehicleid, componentid); // ������� ��������� ������, ����� �� �������
    if(driverid != INVALID_PLAYER_ID) {
        OnCheatDetected(playerid, 28);
    }
    return 1;
}

public AC_OnPlayerDistanceShooting(playerid, weaponid, Float:distance) {
    OnCheatDetected(playerid, 12);
	return 1;
}

public AC_OnPlayerParkour(playerid) {
    ClearAnimations(playerid); // ������� ��������, ����� �� �������
	OnCheatDetected(playerid, 27);
    return 1;
}

public AC_OnPlayerGodMode(playerid, type) {
    OnCheatDetected(playerid, 13);
	return 1;
}

public AC_OnPlayerWeaponZoom(playerid, weaponid, Float:zoom) {
    OnCheatDetected(playerid, 26);
    return 1;
}

public AC_OnPlayerFlood(playerid, type) {
	OnCheatDetected(playerid, 21);
	return 1;
}

// ANTI CHEAT ENDED

stock CloseEngine(carid)// NO DVIG
{
    switch(GetVehicleModel(carid)) { case 481, 460, 509, 510: return true; }

	return false;
}

stock LoadVehicles()
{
    for(new i = 1, z = sizeof standart_vehicle; i < z; i++) if(standart_vehicle[i][vSpawnDelay] == 0) standart_vehicle[i][vSpawnDelay] = 600;

 	for(new i = 1, z = sizeof standart_vehicle; i < z; i++)
	{
		CreateVehicle(standart_vehicle[i][vModel], standart_vehicle[i][vX], standart_vehicle[i][vY], standart_vehicle[i][vZ]+0.3, standart_vehicle[i][vFa], standart_vehicle[i][vColors1], standart_vehicle[i][vColors2], standart_vehicle[i][vSpawnDelay]);

		LinkVehicleToInterior(i, standart_vehicle[i][vInt]);
		SetVehicleVirtualWorld(i, standart_vehicle[i][vWorld]);
		SetVehicleParamsEx(i,0,0,0,0,0,0,0);

		VehInfo[i][vFuel] = standart_vehicle[i][vFuel];
		VehInfo[i][vSost] = standart_vehicle[i][vSost];

		VehInfo[i][vInt] = standart_vehicle[i][vInt];
		VehInfo[i][vWorld] = standart_vehicle[i][vWorld];

		VehInfo[i][vFr] = standart_vehicle[i][vFr];
		VehInfo[i][vStatus] = standart_vehicle[i][vStatus];

		VehInfo[i][vRentCena] = standart_vehicle[i][vRentCena];
		VehInfo[i][vBuyCena] = standart_vehicle[i][vBuyCena];

		if(standart_vehicle[i][vFuel] < float(20)) Fuell[i] = float(50);
		else Fuell[i] = standart_vehicle[i][vFuel];
		SetVehicleParamsEx(i,0,0,0,0,0,0,0);
	}

	//Dealer mobil

	for(new i; i < MAX_VEHICLE_SHOP; i++)
	{
		for(new x, z = MAX_VEHICLE_SHOP_SLOT; x < z; x++)
		{
			new vehicleid = CreateVehicle(as_vehicle_info[i][x][0], as_vehicle_pos[x][0], as_vehicle_pos[x][1], as_vehicle_pos[x][2], as_vehicle_angle, random(128), random(128), 300);
			//LinkVehicleToInterior(vehicleid, 1);
			SetVehicleVirtualWorld(vehicleid, i + 1);
		}
	}

	return printf("Mobil dimuat: %i pcs.", sizeof standart_vehicle);
}


stock IsPoliceVehicle(vehicleid)
{
	switch(VehInfo[vehicleid][vFr])
	{
	    case FRACTION_LSPD, FRACTION_FBI, FRACTION_SFPD, FRACTION_LVPD: return 1;
	}

	return 0;
}



stock IsVehicleOccupiedMode(vehicleid)
{
	foreach(new i : Player)
		if(IsPlayerInVehicle(i,vehicleid)) return i;
	return -1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{

	case 206:
		{
		    if(!response) return pc_cmd_drive(playerid, "");
		    if(PlayerInfo[playerid][pCash] < 12600) return Send(playerid, COLOR_GREY, "Anda tidak punya cukup uang, Anda perlu 12600rp");
		    for(new v = 0; v < MAX_VEHICLES; v++) { if(VehInfo[v][vFr] == PlayerInfo[playerid][pMember]) Fuell[v] = MAX_VEHICLE_FUEL; }

	        format(format_string, sizeof(format_string), "[INFO] %s %s[%d] terselip semua fraksional t/ c", FracRank[PlayerInfo[playerid][pMember]][PlayerInfo[playerid][pRank]], Name(playerid), playerid), SendFrac(PlayerInfo[playerid][pMember], COLOR_ORANGE, format_string);
	        SCMF(playerid, COLOR_LIME, "Semua t/c dari fraksi Anda diisi ulang %.0f liter.", MAX_VEHICLE_FUEL);
	        return GivePlayerMoneyEx(playerid, -12600, "pengisian bahan bakar fraksi otomatis");
 		}

case 203:
		{
		    if(!response) return 1;
            if(PlayerInfo[playerid][pCash] < 4600) return Send(playerid, COLOR_GREY, "Anda tidak punya cukup uang, Anda perlu 4600rp");
			new kolvo = 0;
		    for(new v = 0; v < MAX_VEHICLES; v++)
			{
			    if(VehInfo[v][vFr] == PlayerInfo[playerid][pMember])
			    {
			        if(IsVehicleOccupiedMode(v) == -1)
			        {
			            kolvo++;
			            SetVehicleToRespawn(v);
		         	}
		         }
			}
			if(kolvo == 0) return Send(playerid, COLOR_GREY, "Semua kendaraan ditempati oleh pemain.");
			else
			{
			    format(format_string, sizeof(format_string), "[INFO] %s %s[%d] mengirimkan semua kendaraan fraksional ke basis fraksi", FracRank[PlayerInfo[playerid][pMember]][PlayerInfo[playerid][pRank]], Name(playerid), playerid), SendFrac(PlayerInfo[playerid][pMember], COLOR_ORANGE, format_string);
				Send(playerid, COLOR_LIME, "Semua transportasi gratis dikirimkan ke pangkalan organisasi.");
			}
			GivePlayerMoneyEx(playerid, -4600, "transportasi ke pangkalan org"), PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			return 1;
		}
    
    case 207:
 		{
   			if(!response) return pc_cmd_drive(playerid, "");
            if(PlayerInfo[playerid][pCash] < 41200) return Send(playerid, COLOR_GREY, "Anda tidak punya cukup uang, Anda perlu 41200rp");
		    for(new v = 0; v < MAX_VEHICLES; v++) { if(VehInfo[v][vFr] == PlayerInfo[playerid][pMember]) Milliage[v] = float(0), VehInfo[v][vSost] = 100; }

			format(format_string, sizeof(format_string), "[INFO] %s %s[%d] membuat perbaikan besar dari semua kendaraan fraksional", FracRank[PlayerInfo[playerid][pMember]][PlayerInfo[playerid][pRank]], Name(playerid), playerid), SendFrac(PlayerInfo[playerid][pMember], COLOR_ORANGE, format_string);
            Send(playerid, COLOR_LIME, "Semua t/c dari fraksi Anda telah diperbaiki. Mesin baru yang diinstal, jarak tempuh nol.");
	        return GivePlayerMoneyEx(playerid, -41200, "perbaikan semua fraksi kendaraan");
		}
    
   }
   
   
alias:engine("en");
CMD:engine(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SCM(playerid, COLOR_GREY, "Anda tidak berada di belakang kursi pengemudi.");

    new vehicleid = GetPlayerVehicleID(playerid);

    if(CloseEngine(vehicleid)) return 1; //Transportasi tanpa mesin
    
	if(!IsVehicleHaveFuel(vehicleid))
	{
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    	return SetVehicleParamsEx(vehicleid,!engine,lights,alarm,doors,bonnet,boot,objective);
	}

	if(Fuell[vehicleid] < 1.0)
	//return
	{
		SPD(playerid, 0000, DIALOG_STYLE_MSGBOX, "Perhatikan", "{FFFFFF}Tidak ada bahan bakar dalam transportasi ini tuan. Mohon ke SPBU terdekat untuk mengisi", "Tutup", "");
	}

	if(IsAGang(playerid) && VehInfo[vehicleid][vFr] == FRACTION_LSPD) return 1; //Larangan memulai untuk sebuah pencarian

    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);

    if(engine == 1)
	{
	    SetPlayerChatBubble(playerid, "Yang terakhir Penyedia",COLOR_PURPLE,30.0,10000);
		return SetVehicleParamsEx(vehicleid,0,lights,alarm,doors,bonnet,boot,objective);
	}

	new Float: health;
    GetVehicleHealth(vehicleid, health);

	if(health <= 350.0) return SPD(playerid, 0000, DIALOG_STYLE_MSGBOX, "Perhatikan", "{FFFFFF}Kendaraan dalam kondisi kritis.", "Tutup", "");

	if(vehicle_owner_id[vehicleid] != INVALID_PLAYER_ID)
	{
	    new owner_id = vehicle_owner_id[vehicleid];

	    for(new x; x < MAX_PLAYER_VEHICLES; x++)
			if(vehicleid == player_home_car[owner_id][x] && player_car_keys[owner_id][x] == 0)
				return SPD(playerid, 0000, DIALOG_STYLE_MSGBOX, "Perhatikan", "{FFFFFF}Tidak ada kunci kontak, gunakan: /key atau /en.", "Tutup", "");
	}

    SetPlayerChatBubble(playerid, "menyalakan mesin",COLOR_PURPLE,30.0,10000);

	return SetVehicleParamsEx(vehicleid,1,lights,alarm,doors,bonnet,boot,objective);
	GameTextForPlayer(playerid, "~g~ Starting Dalam 4Detik", 3000, 1);

	vehicleid = GetPlayerVehicleID(playerid);
 	new engine = (GetVehicleParamsEx(vehicleid, engine) ^ VEHICLE_PARAMS_ON);
	SetVehicleParamsEx(vehicleid, engine, engine);
	if(GetVehicleParamsEx(vehicleid, engine) == VEHICLE_PARAMS_ON)
	{
	SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF);
 	GameTextForPlayer(playerid, "Engine ~r~OFF", 4000);
  	SetTimerEx("EngineStatus", 4000, false, "i", playerid);
	}
	else if(GetVehicleParamsEx(vehicleid, engine) == VEHICLE_PARAMS_OFF)
	{
 	GameTextForPlayer(playerid, "Starting Engine...", 4000);
	SetTimerEx("EngineStatus", 3000, false, "id", playerid, vehicleid);
 	}
}
   
